//============================== Hydride File =================================
//
// Part of the Hydride Compiler Infrastructure. 
// <Placeholder for license information> 
//
//=============================================================================
//
// Do NOT modify this file. It is automatically generated. 
//
//=============================================================================


#include "llvm/IR/Function.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/IntrinsicInst.h"
#include "llvm/IR/Type.h"
#include "llvm/InitializePasses.h"
#include "llvm/Pass.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Transforms/Scalar.h"
#include "Legalizer.h"
      namespace llvm {

      class X86LegalizationPass : public FunctionPass {
      public:
          static char ID;

          X86LegalizationPass() : FunctionPass(ID) {}

          bool runOnFunction(Function &F);

          void getAnalysisUsage(AnalysisUsage &AU) const {}
      };

      }
    
    using namespace llvm;

    class X86Legalizer : public Legalizer {
    public:
    
    virtual bool legalize(Instruction *I) {
      auto *CI = dyn_cast<CallInst>(I);
      if (CI == nullptr)
        return false;
      if (InstToInstMap[CI] != nullptr)
        return false;
      
      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_sub_pi16_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psubw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psubw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psubd_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psubd_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psubb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psubb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_extracti32x4_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_extracti32x4_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_extracti32x4_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_extracti64x2_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_extracti64x2_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_extracti64x2_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_extracti64x2_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_extracti32x4_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_extracti32x4_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_sllv_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_adds_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_cmplt_epi16_mask_dsl")) { 
        
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_madd_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_srl_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mulhi_pi16_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mulhi_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mulhi_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pmulhw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pmulhw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_cvtepu8_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_hadd_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 128)
       && isAMatch(CI, 9, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hadd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hadd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 48)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hadd_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hadd_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 128)
       && isAMatch(CI, 9, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hadd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hadd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_hsubs_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 112)
       && isAMatch(CI, 6, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hsubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hsubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 48)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hsubs_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hsubs_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_extract_epi16_dsl")) { 
        
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 3, 4)
       && isAMatch(CI, 4, 4)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 5)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extract_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extract_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 3, 2)
       && isAMatch(CI, 4, 2)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 7)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extract_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extract_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 3, 3)
       && isAMatch(CI, 4, 3)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 6)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extract_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extract_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 3, 2)
       && isAMatch(CI, 4, 2)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 5)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_extract_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_extract_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 3, 2)
       && isAMatch(CI, 4, 2)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 5)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pextrw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pextrw_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 3, 1)
       && isAMatch(CI, 4, 1)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 7)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_extract_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_extract_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 3, 2)
       && isAMatch(CI, 4, 2)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 6)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_extract_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_extract_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 3, 3)
       && isAMatch(CI, 4, 3)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 5)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_extract_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_extract_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_sra_epi64_dsl")) { 
        
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_div_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_subs_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_hadds_epi16_dsl")) { 
        
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm256_hadds_epi16_wrapper"); 
              std::vector<int> Permutation = {0,1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_hsub_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_hsub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_hsub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_hsub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_hsub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_madd52lo_epu64_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_extracti64x2_epi64_dsl")) { 
        
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_extracti64x2_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_extracti64x2_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_extracti32x4_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_extracti32x4_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_extracti32x8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_extracti32x8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_extracti64x4_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_extracti64x4_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_extracti32x4_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_extracti32x4_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_extracti32x8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_extracti32x8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_extracti64x4_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_extracti64x4_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_extracti64x2_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_extracti64x2_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_cvtepi16_epi8_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_hsub_pi32_dsl")) { 
        
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm_hsub_pi32_wrapper"); 
              std::vector<int> Permutation = {0,1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_max_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmplt_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 65535)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 4294967295)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 255)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_srli_pi32_dsl")) { 
        
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srli_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srli_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psrlwi_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psrlwi_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psrldi_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psrldi_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srli_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srli_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmple_epu16_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_movepi64_mask_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 255)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 63)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movepi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movepi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 255)
       && isAMatch(CI, 3, 4)
       && isAMatch(CI, 4, 31)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movepi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movepi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 255)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 31)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movepi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movepi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 4294967295)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 7)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movepi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movepi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 65535)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 15)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movepi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movepi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 255)
       && isAMatch(CI, 3, 2)
       && isAMatch(CI, 4, 63)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movepi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movepi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 4294967295)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 15)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movepi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movepi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 65535)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 31)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movepi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movepi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 65535)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 7)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movepi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movepi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 255)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 15)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movepi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movepi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 18446744073709551615)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 7)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movepi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movepi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 255)
       && isAMatch(CI, 3, 4)
       && isAMatch(CI, 4, 63)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movepi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movepi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_testn_epi16_mask_dsl")) { 
        
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_testn_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_testn_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_test_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_test_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_testn_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_testn_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_testn_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_testn_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_testn_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_testn_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_test_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_test_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_testn_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_testn_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 2)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_test_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_test_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_testn_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_testn_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 4)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_testn_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_testn_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_test_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_test_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 4)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_testn_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_testn_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_test_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_test_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_test_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_test_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 2)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_testn_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_testn_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 4)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_test_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_test_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_test_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_test_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_testn_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_testn_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_test_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_test_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_testn_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_testn_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_test_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_test_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_testn_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_testn_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_test_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_test_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 4)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_test_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_test_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_sll_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_mul_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_cmpneq_epi8_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpneq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpneq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpneq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpneq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpneq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpneq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mulhrs_pi16_dsl")) { 
        
            if(isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mulhrs_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mulhrs_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_max_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pmaxsw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pmaxsw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_madd52lo_epu64_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._m_por_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_m_por_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_por_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_or_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_or_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_or_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_or_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_or_si512_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_or_si512_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_or_si128_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_or_si128_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_unpackhi_epi8_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpackhi_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpackhi_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_punpckhwd_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_punpckhwd_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpackhi_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpackhi_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_punpckhbw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_punpckhbw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_mul_epu32_dsl")) { 
        
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_mulhi_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mullo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mullo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mulhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mulhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mul_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mul_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mul_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_packus_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_sllv_epi64_dsl")) { 
        
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sllv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sllv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sllv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sllv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sllv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sllv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_unpacklo_epi64_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_punpckldq_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_punpckldq_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpacklo_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpacklo_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_dpbusds_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._m_paddsb_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_paddsb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_paddsb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_paddsw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_paddsw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cvtsepi64_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_testn_epi32_mask_dsl")) { 
        
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_testn_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_testn_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_testn_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_testn_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_test_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_test_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_testn_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_testn_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_test_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_test_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_test_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_test_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_test_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_test_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_testn_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_testn_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 4)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_test_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_test_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 2)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_test_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_test_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 4)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_testn_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_testn_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_testn_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_testn_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_testn_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_testn_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_test_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_test_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_test_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_test_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 4)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_testn_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_testn_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 2)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_testn_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_testn_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 4)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_test_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_test_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_testn_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_testn_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_test_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_test_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_test_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_test_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_testn_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_testn_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_testn_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_testn_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_test_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_test_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,2,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._m_pminub_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pminub_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pminub_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_pu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_pu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_srl_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_srlv_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_srav_epi64_dsl")) { 
        
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 2, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 512)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 2, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 2, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 2, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 2, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 512)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 2, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 2, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 2, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 2, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 512)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_slli_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mulhi_epu16_dsl")) { 
        
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mullo_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mullo_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pmullw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pmullw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mulhi_pu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mulhi_pu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pmulhuw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pmulhuw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_adds_epu8_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_cmplt_epu16_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpge_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpge_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpgt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpgt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmple_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmple_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmplt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmplt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmplt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmplt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpgt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpgt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmplt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmplt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmple_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmple_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 176)
       && isAMatch(CI, 3, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpgt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpgt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpge_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpge_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmple_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmple_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 177)
       && isAMatch(CI, 3, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpge_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpge_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_maddubs_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_ror_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_broadcast_i64x4_dsl")) { 
        
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcast_i64x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcast_i64x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcast_i64x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcast_i64x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcast_i32x8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcast_i32x8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcast_i32x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcast_i32x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcast_i32x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcast_i32x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcast_i64x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcast_i64x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_broadcastq_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_fmadd_epi32_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_avg_epu16_dsl")) { 
        
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pavgw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pavgw_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_avg_pu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_avg_pu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_avg_pu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_avg_pu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pavgb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pavgb_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 1)
       && isAMatch(CI, 1, 1)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_min_epu16_dsl")) { 
        
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cvtepi64_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmpgt_pi32_dsl")) { 
        
            if(isAMatch(CI, 0, 4294967295)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 4294967295)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 255)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 4294967295)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pcmpgtd_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pcmpgtd_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 65535)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 18446744073709551615)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 65535)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pcmpgtw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pcmpgtw_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 65535)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 4294967295)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 255)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pcmpgtb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pcmpgtb_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 65535)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 255)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 18446744073709551615)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 255)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_dpbusd_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_abs_epi64_dsl")) { 
        
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_sll_epi64_dsl")) { 
        
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,-1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,-1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,-1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_unpackhi_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_sub_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sub_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sub_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sub_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sub_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,3,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_xor_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_xor_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_xor_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_xor_si128_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_xor_si128_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_xor_si512_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_xor_si512_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pxor_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pxor_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_xor_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_xor_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_blendv_epi8_dsl")) { 
        
            if(isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_blendv_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_blendv_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_blendv_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_blendv_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_movepi64_pi64_dsl")) { 
        
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movepi64_pi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movepi64_pi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_move_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_move_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsi64_m64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsi64_m64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_m_to_int64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_to_int64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_m_from_int64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_from_int64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtm64_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtm64_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsi32_si128_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsi32_si128_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movpi64_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movpi64_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsi32_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsi32_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtsi256_si32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtsi256_si32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsi64_si32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsi64_si32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsi128_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsi128_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtsi512_si32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtsi512_si32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_from_int_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_from_int_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsi64_si128_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsi64_si128_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtsi128_si32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtsi128_si32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_m_to_int_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_to_int_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_movm_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movm_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movm_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movm_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movm_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_blend_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_blend_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mov_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mov_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mov_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mov_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mov_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mov_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mov_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mov_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_blend_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_blend_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_blend_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_blend_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movm_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movm_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_blend_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_blend_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mov_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mov_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mov_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mov_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movm_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movm_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mov_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mov_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mov_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mov_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mov_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mov_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_movm_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_movm_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mov_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mov_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mov_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mov_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movm_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movm_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_blend_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_blend_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_blend_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_blend_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_blend_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_blend_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_blend_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_blend_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mov_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mov_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mov_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mov_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_blend_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_blend_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mov_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mov_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_blend_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_blend_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mov_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mov_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 340282366920938463463374607431768211455)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movm_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movm_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 340282366920938463463374607431768211455)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movm_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movm_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 340282366920938463463374607431768211455)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movm_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movm_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_blend_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_blend_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movm_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movm_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mov_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mov_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_blend_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_blend_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mov_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mov_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mov_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mov_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mov_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mov_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mov_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mov_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_blend_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_blend_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 340282366920938463463374607431768211455)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movm_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movm_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_blend_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_blend_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mov_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mov_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mov_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mov_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_blend_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_blend_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mov_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mov_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 115792089237316195423570985008687907853269984665640564039457584007913129639935)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movm_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movm_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mov_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mov_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_sign_epi8_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sign_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sign_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sign_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sign_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sign_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sign_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sign_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sign_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sign_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sign_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sign_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sign_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sign_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sign_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sign_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sign_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sign_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sign_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,-1,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_cvtusepi64_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_packus_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_m_packuswb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_packuswb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_packs_pu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_packs_pu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_max_epu64_dsl")) { 
        
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pmaxub_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pmaxub_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_max_pu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_max_pu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_subs_epu8_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_ror_epi64_dsl")) { 
        
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_ror_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_ror_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_ror_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_ror_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_abs_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_abs_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_abs_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_abs_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_abs_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_abs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_abs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_abs_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_abs_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_abs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_abs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_abs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_abs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_abs_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_abs_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_min_epi8_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_mulhi_epi32_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_sll_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sll_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sll_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_unpacklo_epi64_dsl")) { 
        
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_cmpgt_epi16_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mul_epu32_dsl")) { 
        
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mul_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mul_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_div_epu32_dsl")) { 
        
            { 
              std::vector<int> Permutation = {1,0,2,3}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_dpbusds_epi32_dsl")) { 
        
            if(isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maddubs_pi16_dsl")) { 
        
            if(isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maddubs_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maddubs_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maddubs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maddubs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_extracti32x4_epi32_dsl")) { 
        
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm512_extracti32x4_epi32_wrapper"); 
              std::vector<int> Permutation = {1,0}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
          
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm512_extracti64x2_epi64_wrapper"); 
              std::vector<int> Permutation = {1,0}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_srlv_epi32_dsl")) { 
        
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srlv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srlv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srlv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srlv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 16)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srlv_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srlv_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,0,-1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_div_epu16_dsl")) { 
        
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::UDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask3_fmadd_epi32_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_dpwssds_epi32_dsl")) { 
        
            if(isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_cvtepi8_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_or_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_or_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_or_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_or_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_or_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmplt_epu16_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_rem_epu32_dsl")) { 
        
            { 
              std::vector<int> Permutation = {1,0,2,3}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            } 
          
            { 
              std::vector<int> Permutation = {1,0,2,3}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_dpwssds_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_hadd_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_hadd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_hadd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_hadd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_hadd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_rorv_epi32_dsl")) { 
        
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_hsub_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 96)
       && isAMatch(CI, 9, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hsub_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hsub_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 48)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hsub_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hsub_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 112)
       && isAMatch(CI, 9, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hsub_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hsub_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_srai_epi32_dsl")) { 
        
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 18446744073709551615)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 18446744073709551615)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srai_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srai_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psrawi_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psrawi_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 18446744073709551615)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psradi_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psradi_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srai_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srai_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_avg_epu16_dsl")) { 
        
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_avg_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_avg_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 1)
       && isAMatch(CI, 2, 1)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_avg_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_avg_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmpeq_epi32_dsl")) { 
        
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 4294967295)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 65535)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 255)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 18446744073709551615)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 18446744073709551615)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 4294967295)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 4294967295)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 255)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 65535)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 65535)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 255)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 4294967295)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pcmpeqd_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pcmpeqd_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 65535)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pcmpeqw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pcmpeqw_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 0)
       && isAMatch(CI, 1, 255)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pcmpeqb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pcmpeqb_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_dpwssd_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_subs_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psubsb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psubsb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psubsw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psubsw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_subs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_subs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_sra_epi64_dsl")) { 
        
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,1,2,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,1,2,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sra_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sra_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,1,2,0,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_sll_pi16_dsl")) { 
        
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sll_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sll_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psrld_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psrld_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srl_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srl_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pslld_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pslld_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srl_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srl_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psllw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psllw_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_srl_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_srl_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psrlw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psrlw_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sll_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sll_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sll_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sll_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_srl_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_srl_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sll_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sll_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmpge_epu64_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_andnot_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_andnot_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_andnot_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_andnot_si512_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_andnot_si512_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_andnot_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_andnot_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_andnot_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_andnot_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pandn_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pandn_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_andnot_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_andnot_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_andnot_si128_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_andnot_si128_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mulhi_epi32_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_unpacklo_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_xor_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_xor_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_xor_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_xor_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_xor_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mul_su32_dsl")) { 
        
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm_mul_su32_wrapper"); 
              std::vector<int> Permutation = {0,1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_unpackhi_epi8_dsl")) { 
        
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_set1_pi8_dsl")) { 
        
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcastsi128_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcastsi128_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_epi64x_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_epi64x_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcastb_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcastb_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcastd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcastd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcastsi128_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcastsi128_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 512)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_set1_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_set1_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_set1_epi64x_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_set1_epi64x_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_set1_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_set1_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcastw_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcastw_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_set1_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_set1_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcastq_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcastq_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_unpackhi_epi64_dsl")) { 
        
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_srav_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)
       && isAMatch(CI, 10, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)
       && isAMatch(CI, 10, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)
       && isAMatch(CI, 10, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)
       && isAMatch(CI, 10, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)
       && isAMatch(CI, 10, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srav_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srav_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 3, 18446744073709551615)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)
       && isAMatch(CI, 10, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srav_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srav_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,-1,-1,2,0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srav_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srav_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,-1,-1,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_unpacklo_epi8_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)
       && isAMatch(CI, 10, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_broadcast_i32x2_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcast_i64x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcast_i64x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcast_i32x8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcast_i32x8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcast_i32x8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcast_i32x8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_broadcast_i32x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_broadcast_i32x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_broadcast_i64x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_broadcast_i64x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcast_i64x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcast_i64x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_broadcast_i64x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_broadcast_i64x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_broadcast_i32x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_broadcast_i32x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcast_i64x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcast_i64x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcast_i32x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcast_i32x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcast_i64x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcast_i64x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_broadcast_i32x4_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_broadcast_i32x4_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 2)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_broadcast_i32x2_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_broadcast_i32x2_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_mulhrs_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mulhrs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mulhrs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_packs_epi16_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_sra_epi16_dsl")) { 
        
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,-1,2,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,-1,2,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,-1,2,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,-1,2,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 4294967295)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,-1,2,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 65535)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,-1,2,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_fmadd_epi32_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_unpackhi_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_and_si256_dsl")) { 
        
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_and_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_and_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_and_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_and_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_and_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_and_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_and_si512_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_and_si512_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_and_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_and_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pand_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pand_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_and_si128_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_and_si128_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_mullo_epi64_dsl")) { 
        
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_mulhi_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_mulhi_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mullo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mullo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_mullo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_mullo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_hadds_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hadds_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hadds_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 48)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_hadds_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_hadds_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_unpacklo_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_punpcklbw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_punpcklbw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_punpcklwd_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_punpcklwd_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpacklo_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpacklo_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpacklo_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpacklo_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmpeq_epi64_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpeq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpeq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpeq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpeq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpeq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpeq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_rem_epu16_dsl")) { 
        
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SRem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::URem, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            }
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cvtusepi64_epi8_dsl")) { 
        
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtusepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtusepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtusepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtusepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtusepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtusepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtusepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtusepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtusepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtusepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtusepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtusepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._m_paddusw_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_paddusw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_paddusw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_pu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_pu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_pu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_pu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_paddusb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_paddusb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_adds_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_adds_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_adds_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_adds_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_dpwssd_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_dpbusd_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._m_packsswb_dsl")) { 
        
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_m_packsswb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_packsswb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_packs_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_packs_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_packs_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_packs_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_m_packssdw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_packssdw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_packus_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_min_epi16_dsl")) { 
        
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_min_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_min_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pminsw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pminsw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_madd52hi_epu64_dsl")) { 
         
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_div_epi32_dsl")) { 
        
            { 
              std::vector<int> Permutation = {1,0,2,3}; 
              std::vector<Value *> Args = getArgsAfterPermutationForSpecialCases(CI, Permutation);    
              auto *NewInst = BinaryOperator::Create(Instruction::SDiv, Args[0], Args[1], "", CI);
              errs() << "NEW INSTUCTION:" << *NewInst << "\n"; 
              InstToInstMap[CI] = NewInst; 
              ToBeRemoved.insert(CI); 
              return true; 
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._m_psllwi_dsl")) { 
        
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psllwi_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psllwi_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_slli_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_slli_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pslldi_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pslldi_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_slli_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_slli_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_slli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_slli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_slli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_slli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_slli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_slli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_broadcastmw_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcastmw_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcastmw_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcastmb_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcastmb_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcastmb_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcastmb_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_broadcastmw_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_broadcastmw_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_broadcastmb_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_broadcastmb_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_broadcastmw_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_broadcastmw_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_andnot_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_andnot_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_andnot_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_andnot_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_andnot_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_andnot_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_andnot_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_andnot_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_andnot_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_andnot_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_andnot_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_andnot_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_andnot_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_andnot_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_andnot_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_andnot_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_andnot_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_andnot_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_andnot_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_andnot_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_andnot_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_andnot_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_andnot_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_andnot_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_andnot_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_add_epi8_dsl")) { 
        
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_dpwssd_epi32_dsl")) { 
        
            if(isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_dpwssd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_dpwssd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_cmple_epi32_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmple_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmple_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmple_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmple_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmple_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmple_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_unpackhi_epi8_dsl")) { 
        
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpackhi_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpackhi_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_unpackhi_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_unpackhi_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_unpackhi_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_unpackhi_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_madd_pi16_dsl")) { 
        
            if(isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_madd_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_madd_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_madd_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_madd_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pmaddwd_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pmaddwd_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_cvtepi8_epi32_dsl")) { 
        
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtepi32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtepi32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtepi16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtepi16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtepi8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtepi8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtepi8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtepi8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_packus_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)
       && isAMatch(CI, 10, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_packus_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_packus_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 8)
       && isAMatch(CI, 9, 8)
       && isAMatch(CI, 10, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_packus_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_packus_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_packs_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmpgt_epu8_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpgt_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpgt_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpgt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpgt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpgt_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpgt_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_cmpge_epi64_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmpge_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmpge_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmpge_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmpge_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmpge_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmpge_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_srl_epi64_dsl")) { 
        
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,-1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,-1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 0)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,2,-1,-1,1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srl_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srl_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,3,0,-1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_dpwssds_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 5, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_dpwssds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_dpwssds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._m_punpckhdq_dsl")) { 
        
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_punpckhdq_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_punpckhdq_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpackhi_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpackhi_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_dpbusd_epi32_dsl")) { 
        
            if(isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_dpbusd_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_dpbusd_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,2,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_cmpneq_epu16_mask_dsl")) { 
        
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 4)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpeq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpeq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpeq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpeq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epu16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epu16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 177)
       && isAMatch(CI, 4, 176)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpeq_epu64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpeq_epu64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epu8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epu8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cmpneq_epu32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cmpneq_epu32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 2)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cmpneq_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cmpneq_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 176)
       && isAMatch(CI, 4, 177)
       && isAMatch(CI, 5, 0)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cmpneq_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cmpneq_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,2,1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_packs_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_packs_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_packs_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_packs_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_packs_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_rol_epi64_dsl")) { 
        
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 64)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_cvtepu16_epi32_dsl")) { 
        
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 256)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepu8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepu8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepu16_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepu16_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepu8_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepu8_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepu32_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepu32_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 128)
       && isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cvtepu16_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cvtepu16_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cvtepu8_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cvtepu8_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_mask_unpacklo_epi16_dsl")) { 
        
            if(isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 32)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpacklo_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpacklo_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 8)
       && isAMatch(CI, 6, 8)
       && isAMatch(CI, 7, 8)
       && isAMatch(CI, 8, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_unpacklo_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_unpacklo_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 16)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_unpacklo_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_unpacklo_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_movemask_pi8_dsl")) { 
        
            if(isAMatch(CI, 1, 8)
       && isAMatch(CI, 2, 24)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movemask_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movemask_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 16)
       && isAMatch(CI, 2, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_movemask_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_movemask_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 8)
       && isAMatch(CI, 2, 24)) {
              auto *InstFunction = I->getModule()->getFunction("_m_pmovmskb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_pmovmskb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_movemask_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_movemask_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_unpacklo_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpacklo_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpacklo_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_maskz_srai_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 18446744073709551615)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 65535)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 18446744073709551615)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 65535)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 4294967295)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 4294967295)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 18446744073709551615)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 4294967295)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 18446744073709551615)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 65535)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 4294967295)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 65535)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 65535)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 18446744073709551615)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {3,-1,1,2,-1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 63)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 18446744073709551615)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 64)
       && isAMatch(CI, 9, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srai_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srai_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 4294967295)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 256)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 15)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 65535)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 128)
       && isAMatch(CI, 8, 16)
       && isAMatch(CI, 9, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srai_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srai_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 31)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 5, 4294967295)
       && isAMatch(CI, 6, 0)
       && isAMatch(CI, 7, 512)
       && isAMatch(CI, 8, 32)
       && isAMatch(CI, 9, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srai_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srai_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {2,-1,0,1,-1,-1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_rolv_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 64)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,-1,-1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 32)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_hadd_pi32_dsl")) { 
        
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm_hadd_pi32_wrapper"); 
              std::vector<int> Permutation = {0,1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_add_epi8_dsl")) { 
        
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_si64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_si64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_paddw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_paddw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_paddb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_paddb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_pi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_pi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_add_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_add_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_paddd_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_paddd_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_add_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_add_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_rorv_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,-1,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_rorv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_rorv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_rorv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_rorv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_unpackhi_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_unpackhi_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_unpackhi_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_extract_epi8_dsl")) { 
        
            if(isAMatch(CI, 0, 8)
       && isAMatch(CI, 3, 5)
       && isAMatch(CI, 4, 5)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extract_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extract_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 8)
       && isAMatch(CI, 3, 4)
       && isAMatch(CI, 4, 4)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 24)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_extract_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_extract_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,0,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_maskz_max_epu8_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epu64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epu64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_max_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_max_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_max_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_max_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_max_epu32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_max_epu32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_sra_pi16_dsl")) { 
        
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sra_pi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sra_pi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 512)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 512)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_sra_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_sra_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sra_pi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sra_pi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psraw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psraw_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 4294967295)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psrad_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psrad_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 128)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 2, 0)
       && isAMatch(CI, 4, 65535)
       && isAMatch(CI, 5, 256)
       && isAMatch(CI, 6, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_sra_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_sra_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,1,-1,0,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_cvtsepi32_epi16_dsl")) { 
        
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 256)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtsepi64_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtsepi64_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtsepi32_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtsepi32_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 32)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_cvtsepi32_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_cvtsepi32_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 112)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_cvtsepi64_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_cvtsepi64_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)
       && isAMatch(CI, 6, 96)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_cvtsepi64_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_cvtsepi64_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 3, 128)
       && isAMatch(CI, 4, 8)
       && isAMatch(CI, 5, 16)
       && isAMatch(CI, 6, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_cvtsepi16_epi8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_cvtsepi16_epi8_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,-1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_rolv_epi32_dsl")) { 
        
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_rolv_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_rolv_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_rolv_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_rolv_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_mask_dpbusds_epi32_dsl")) { 
        
            if(isAMatch(CI, 4, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_dpbusds_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_dpbusds_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_rol_epi64_dsl")) { 
        
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 16)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 64)
       && isAMatch(CI, 1, 64)
       && isAMatch(CI, 4, 64)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_rol_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_rol_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 32)
       && isAMatch(CI, 1, 32)
       && isAMatch(CI, 4, 32)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_rol_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_rol_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,-1,0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_maskz_and_epi64_dsl")) { 
        
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_and_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_and_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_and_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_and_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_and_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_and_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_and_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_and_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_and_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_and_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_and_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_and_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_and_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_and_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_and_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_and_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_and_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_and_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 128)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_and_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_and_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 4, 512)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_and_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_and_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,2,3,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 1, 0)
       && isAMatch(CI, 4, 256)
       && isAMatch(CI, 5, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_and_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_and_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,-1,1,2,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_cmplt_epi16_mask_dsl")) { 
        
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 2)
       && isAMatch(CI, 3, 64)
       && isAMatch(CI, 4, 6)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epi64_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epi64_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 16)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 32)
       && isAMatch(CI, 3, 16)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epi16_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epi16_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 4)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 4)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_cmplt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_cmplt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_cmplt_epi8_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_cmplt_epi8_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 8)
       && isAMatch(CI, 3, 32)
       && isAMatch(CI, 4, 0)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_cmplt_epi32_mask_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_cmplt_epi32_mask_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_blend_epi16_dsl")) { 
        
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm256_blend_epi16_wrapper"); 
              std::vector<int> Permutation = {2,0,1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_hsubs_epi16_dsl")) { 
        
            { 
              auto *InstFunction = I->getModule()->getFunction("_mm256_hsubs_epi16_wrapper"); 
              std::vector<int> Permutation = {0,1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true;
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm256_extracti32x4_epi32_dsl")) { 
        
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extracti32x4_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extracti32x4_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_extracti64x4_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_extracti64x4_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extracti64x2_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extracti64x2_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 256)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_extracti32x8_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_extracti32x8_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extracti128_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extracti128_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 128)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_extractf128_si256_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_extractf128_si256_wrapper" << "\n"; 
              std::vector<int> Permutation = {1,0,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm_subs_epu8_dsl")) { 
        
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psubusw_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psubusw_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_pu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_pu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_pu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_pu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_subs_epu8_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_subs_epu8_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 256)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 128)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 64)
       && isAMatch(CI, 3, 8)) {
              auto *InstFunction = I->getModule()->getFunction("_m_psubusb_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_m_psubusb_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 2, 512)
       && isAMatch(CI, 3, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_subs_epu16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_subs_epu16_wrapper" << "\n"; 
              std::vector<int> Permutation = {0,1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    

      if(CI->getCalledFunction()->getName().contains("llvm.hydride._mm512_mask_srli_epi64_dsl")) { 
        
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 63)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 64)
       && isAMatch(CI, 8, 64)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srli_epi64_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srli_epi64_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_mask_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_mask_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_mask_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_mask_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 256)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm256_maskz_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm256_maskz_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 15)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 128)
       && isAMatch(CI, 7, 16)
       && isAMatch(CI, 8, 16)) {
              auto *InstFunction = I->getModule()->getFunction("_mm_maskz_srli_epi16_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm_maskz_srli_epi16_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_mask_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_mask_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,3,1,-1,0,2,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
          
            if(isAMatch(CI, 0, 31)
       && isAMatch(CI, 3, 0)
       && isAMatch(CI, 4, 0)
       && isAMatch(CI, 6, 512)
       && isAMatch(CI, 7, 32)
       && isAMatch(CI, 8, 32)) {
              auto *InstFunction = I->getModule()->getFunction("_mm512_maskz_srli_epi32_wrapper"); 
              errs() << "INST FUNCTION NAME: " << "_mm512_maskz_srli_epi32_wrapper" << "\n"; 
              std::vector<int> Permutation = {-1,2,0,-1,-1,1,-1,-1,-1}; 
              std::vector<Value *> Args = getArgsAfterPermutation(CI, InstFunction, Permutation, CI); 
              if (Args.size() != 0) {
                auto *NewCallInst = CallInst::Create(InstFunction, Args, "", CI); 
                errs() << "NEW INSTUCTION:" << *NewCallInst << "\n"; 
                InstToInstMap[CI] = NewCallInst; 
                ToBeRemoved.insert(CI); 
                return true; 
              }
            } 
           
      } 
    
    }
    

    };

    
    bool X86LegalizationPass::runOnFunction(Function &F) {
      if (F.getName().contains("hydride") == false)
        return false;
      // Initialize the legalizer
      errs() << "LEGALIZATION BEGIN\n";
      Legalizer *L = new X86Legalizer();
      return L->legalize(F);
    }
    
    
    char X86LegalizationPass::ID = 0;
    static RegisterPass<X86LegalizationPass> X("x86-hydride-legalize", 
                                              "Pass to legalize tensor intrinsics");
    