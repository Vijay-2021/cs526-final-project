//===----------------------------------------------------------------------===//
//
// This file implements a very simple version of instruction simplify pass
// for LLVM.
//
//===----------------------------------------------------------------------===//


#include "llvm/IR/Function.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/IntrinsicInst.h"
#include "llvm/IR/Type.h"
#include "llvm/InitializePasses.h"
#include "llvm/Pass.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Transforms/Scalar.h"


namespace llvm {

class HydrideLLVMInstSimplifyPass : public FunctionPass {
public:
    static char ID;

    HydrideLLVMInstSimplifyPass() : FunctionPass(ID) {}

    bool runOnFunction(Function &F);

    void getAnalysisUsage(AnalysisUsage &AU) const {}
};

}


using namespace llvm;

bool HydrideLLVMInstSimplifyPass::simplify(CallInst *CI) {
  // Generate rosette semantics for this instruction
  // Invoke Hydride's synthesis-based constant folder
  return ;
}

bool HydrideLLVMInstSimplifyPass::runOnFunction(Function &F) {
  // Simplify every instruction in this function that is known to Hydride
  SmallVector<Instruction *, 16> Worklist;
  SmallPtrSet<Instruction *, 16> ToBeRemoved;
  ReversePostOrderTraversal<Function *> RPOT(&F);
  bool Changed = false;
  for(auto *BB : RPOT) {
    for(Instruction &I : *BB) {
        auto *CI = dyn_cast<CallInst>(&I);
        if(CI != nullptr) {
          InstSimplified = simplify(CI);
          if (InstSimplified) {
            // This instruction must be removed
            ToBeRemoved.push_back(CI);
            // Replace all the uses of this instruction
            CI->replaceAllUsesWith(NewVal);
          }
          Changed |= InstSimplified;
        }
      }
    }

    // Remove the dead instructions
    for(auto *I : ToBeRemoved)
      I->eraseFromParent();
    
    return Changed;
}

    
char HydrideLLVMInstSimplify::ID = 0;
static RegisterPass<HydrideLLVMInstSimplify> X("hydride-llvm-instsimplify", 
          "Pass to simplify target-agnostic instructions generated by Hydride.");

