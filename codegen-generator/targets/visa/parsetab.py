
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startpointADD_ASSIGN CONSTANT D DEC_OP ELSE EQ_OP FOR GE_OP IDENTIFIER IF INC_OP IS LAND_OP LEFT_OP LE_OP LOR_OP NE_OP RIGHT_OP STRING UD WHILE bitprimary_expression : IDENTIFIER\n        | CONSTANT\n        | '(' expression ')'\n        postfix_expression : primary_expression\n        | postfix_expression '[' expression ']'\n        | postfix_expression '[' expression ':' expression ']'\n        | postfix_expression '.' IDENTIFIER\n        | postfix_expression '(' ')'\n        | postfix_expression '(' argument_expression_list ')'\n        | postfix_expression INC_OP\n        unary_expression : postfix_expression\n        | '-' unary_expression\n        | '!' unary_expression\n        | '*' unary_expression\n        | '&' unary_expression\n        | INC_OP unary_expression\n        | DEC_OP unary_expression\n        | '~' unary_expression\n        argument_expression_list : expression\n        | argument_expression_list ',' expression\n        multiplicative_expression : unary_expression\n        | multiplicative_expression '*' unary_expression\n        | multiplicative_expression '/' unary_expression\n        | multiplicative_expression '%' unary_expression\n        additive_expression : multiplicative_expression\n        | additive_expression '+' multiplicative_expression\n        | additive_expression '-' multiplicative_expression\n        shift_expression : additive_expression\n        | shift_expression LEFT_OP additive_expression\n        | shift_expression RIGHT_OP additive_expression\n        relational_expression : shift_expression\n        | relational_expression '<' shift_expression\n        | relational_expression '>' shift_expression\n        | relational_expression LE_OP shift_expression\n        | relational_expression GE_OP shift_expression\n        equality_expression : relational_expression\n        | equality_expression EQ_OP relational_expression\n        | equality_expression NE_OP relational_expression\n        and_expression : equality_expression\n        | and_expression '&' equality_expression\n        exclusive_or_expression : and_expression\n        | exclusive_or_expression '^' and_expression\n        inclusive_or_expression : exclusive_or_expression\n        | inclusive_or_expression '|' exclusive_or_expression\n        logical_and_expression : inclusive_or_expression\n        | logical_and_expression LAND_OP inclusive_or_expression\n        logical_or_expression : logical_and_expression\n        | logical_or_expression LOR_OP logical_and_expression\n        logical_is_expression : logical_or_expression\n        | logical_or_expression IS logical_or_expression\n        conditional_expression : logical_is_expression\n        | logical_is_expression '?' expression ':' conditional_expression\n        expression : conditional_expression\n        | unary_expression '=' conditional_expression\n        | unary_expression ADD_ASSIGN conditional_expression\n        expression_statement : ';'\n        | expression ';'\n        selection_statement : IF '(' expression ')' statement\n        | IF '(' expression ')' statement ELSE statement\n        iteration_statement : WHILE '(' expression ')' statement\n        | FOR '(' expression_statement expression_statement expression ')' statement\n        compound_statement : '{' '}'\n        | '{' statement_list '}'\n        | '{' declaration_list '}'\n        | '{' declaration_list statement_list '}'\n        statement : expression_statement\n        | compound_statement\n        | iteration_statement\n        | selection_statement\n        statement_list : statement\n        | statement_list statement\n        \n        declaration_list : declaration\n        | declaration_list declaration\n        \n        declaration : declaration_specifiers init_declarator_list ';'\n        declaration_specifiers : UDinit_declarator_list : init_declarator\n        | init_declarator_list ',' init_declarator\n        init_declarator : IDENTIFIER\n        | IDENTIFIER '=' expressionstartpoint : statement_list\n        | declaration_list statement_list"
    
_lr_action_items = {';':([0,2,3,4,5,6,7,8,9,11,12,13,19,20,21,22,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,63,64,65,66,67,68,69,70,90,93,94,95,97,98,100,101,102,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,137,139,141,142,145,146,147,148,149,],[11,11,11,-70,-72,-66,-67,-68,-69,-56,49,11,-53,-21,-51,-11,-49,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,-71,11,-73,90,-76,-78,-57,-62,11,11,11,-10,-12,-13,-14,-15,-16,-17,-18,-74,-63,-64,11,-3,11,-21,-54,-55,-7,-8,-50,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-77,-79,-65,11,11,-5,-9,-60,-58,-52,11,11,-6,-61,-59,]),'{':([0,2,3,4,5,6,7,8,9,11,13,43,44,45,49,50,51,52,90,93,94,95,130,131,133,139,141,145,146,148,149,],[13,13,13,-70,-72,-66,-67,-68,-69,-56,13,-71,13,-73,-57,-62,13,13,-74,-63,-64,13,-65,13,13,-60,-58,13,13,-61,-59,]),'WHILE':([0,2,3,4,5,6,7,8,9,11,13,43,44,45,49,50,51,52,90,93,94,95,130,131,133,139,141,145,146,148,149,],[14,14,14,-70,-72,-66,-67,-68,-69,-56,14,-71,14,-73,-57,-62,14,14,-74,-63,-64,14,-65,14,14,-60,-58,14,14,-61,-59,]),'FOR':([0,2,3,4,5,6,7,8,9,11,13,43,44,45,49,50,51,52,90,93,94,95,130,131,133,139,141,145,146,148,149,],[16,16,16,-70,-72,-66,-67,-68,-69,-56,16,-71,16,-73,-57,-62,16,16,-74,-63,-64,16,-65,16,16,-60,-58,16,16,-61,-59,]),'IF':([0,2,3,4,5,6,7,8,9,11,13,43,44,45,49,50,51,52,90,93,94,95,130,131,133,139,141,145,146,148,149,],[17,17,17,-70,-72,-66,-67,-68,-69,-56,17,-71,17,-73,-57,-62,17,17,-74,-63,-64,17,-65,17,17,-60,-58,17,17,-61,-59,]),'UD':([0,3,5,13,45,52,90,],[18,18,-72,18,-73,18,-74,]),'-':([0,2,3,4,5,6,7,8,9,11,13,15,20,22,23,24,25,26,27,28,29,31,32,34,41,42,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,98,100,105,106,121,122,123,124,125,126,127,130,131,132,133,134,135,136,137,138,139,141,145,146,147,148,149,],[23,23,23,-70,-72,-66,-67,-68,-69,-56,23,23,-21,-11,23,23,23,23,23,23,23,-4,-1,-2,86,-25,-71,23,-73,-57,-62,23,23,23,23,23,23,23,23,23,23,-10,-12,-13,-14,-15,-16,-17,-18,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-74,23,-63,-64,23,-3,23,-21,-7,-8,86,86,-26,-27,-22,-23,-24,-65,23,23,23,23,-5,23,-9,23,-60,-58,23,23,-6,-61,-59,]),'!':([0,2,3,4,5,6,7,8,9,11,13,15,23,24,25,26,27,28,29,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,98,130,131,132,133,134,136,138,139,141,145,146,148,149,],[24,24,24,-70,-72,-66,-67,-68,-69,-56,24,24,24,24,24,24,24,24,24,-71,24,-73,-57,-62,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-74,24,-63,-64,24,24,-65,24,24,24,24,24,24,-60,-58,24,24,-61,-59,]),'*':([0,2,3,4,5,6,7,8,9,11,13,15,20,22,23,24,25,26,27,28,29,31,32,34,42,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,98,100,105,106,123,124,125,126,127,130,131,132,133,134,135,136,137,138,139,141,145,146,147,148,149,],[25,25,25,-70,-72,-66,-67,-68,-69,-56,25,25,-21,-11,25,25,25,25,25,25,25,-4,-1,-2,87,-71,25,-73,-57,-62,25,25,25,25,25,25,25,25,25,25,-10,-12,-13,-14,-15,-16,-17,-18,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-74,25,-63,-64,25,-3,25,-21,-7,-8,87,87,-22,-23,-24,-65,25,25,25,25,-5,25,-9,25,-60,-58,25,25,-6,-61,-59,]),'&':([0,2,3,4,5,6,7,8,9,11,13,15,20,22,23,24,25,26,27,28,29,31,32,34,37,38,39,40,41,42,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,98,100,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,133,134,135,136,137,138,139,141,145,146,147,148,149,],[26,26,26,-70,-72,-66,-67,-68,-69,-56,26,26,-21,-11,26,26,26,26,26,26,26,-4,-1,-2,76,-39,-36,-31,-28,-25,-71,26,-73,-57,-62,26,26,26,26,26,26,26,26,26,26,-10,-12,-13,-14,-15,-16,-17,-18,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-74,26,-63,-64,26,-3,26,-21,-7,-8,76,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-65,26,26,26,26,-5,26,-9,26,-60,-58,26,26,-6,-61,-59,]),'INC_OP':([0,2,3,4,5,6,7,8,9,11,13,15,22,23,24,25,26,27,28,29,31,32,34,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,98,105,106,130,131,132,133,134,135,136,137,138,139,141,145,146,147,148,149,],[27,27,27,-70,-72,-66,-67,-68,-69,-56,27,27,63,27,27,27,27,27,27,27,-4,-1,-2,-71,27,-73,-57,-62,27,27,27,27,27,27,27,27,27,27,-10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-74,27,-63,-64,27,-3,27,-7,-8,-65,27,27,27,27,-5,27,-9,27,-60,-58,27,27,-6,-61,-59,]),'DEC_OP':([0,2,3,4,5,6,7,8,9,11,13,15,23,24,25,26,27,28,29,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,98,130,131,132,133,134,136,138,139,141,145,146,148,149,],[28,28,28,-70,-72,-66,-67,-68,-69,-56,28,28,28,28,28,28,28,28,28,-71,28,-73,-57,-62,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-74,28,-63,-64,28,28,-65,28,28,28,28,28,28,-60,-58,28,28,-61,-59,]),'~':([0,2,3,4,5,6,7,8,9,11,13,15,23,24,25,26,27,28,29,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,98,130,131,132,133,134,136,138,139,141,145,146,148,149,],[29,29,29,-70,-72,-66,-67,-68,-69,-56,29,29,29,29,29,29,29,29,29,-71,29,-73,-57,-62,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-74,29,-63,-64,29,29,-65,29,29,29,29,29,29,-60,-58,29,29,-61,-59,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,15,18,23,24,25,26,27,28,29,43,44,45,49,50,51,52,53,55,56,57,58,59,60,61,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98,130,131,132,133,134,136,138,139,141,145,146,148,149,],[32,32,32,-70,-72,-66,-67,-68,-69,48,-56,32,32,-75,32,32,32,32,32,32,32,-71,32,-73,-57,-62,32,32,32,32,32,32,32,32,32,105,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-74,48,32,-63,-64,32,32,-65,32,32,32,32,32,32,-60,-58,32,32,-61,-59,]),'CONSTANT':([0,2,3,4,5,6,7,8,9,11,13,15,23,24,25,26,27,28,29,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,98,130,131,132,133,134,136,138,139,141,145,146,148,149,],[34,34,34,-70,-72,-66,-67,-68,-69,-56,34,34,34,34,34,34,34,34,34,-71,34,-73,-57,-62,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-74,34,-63,-64,34,34,-65,34,34,34,34,34,34,-60,-58,34,34,-61,-59,]),'(':([0,2,3,4,5,6,7,8,9,11,13,14,15,16,17,22,23,24,25,26,27,28,29,31,32,34,43,44,45,49,50,51,52,53,55,56,57,58,59,60,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,95,97,98,105,106,130,131,132,133,134,135,136,137,138,139,141,145,146,147,148,149,],[15,15,15,-70,-72,-66,-67,-68,-69,-56,15,53,15,55,56,62,15,15,15,15,15,15,15,-4,-1,-2,-71,15,-73,-57,-62,15,15,15,15,15,15,15,15,15,15,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-74,15,-63,-64,15,-3,15,-7,-8,-65,15,15,15,15,-5,15,-9,15,-60,-58,15,15,-6,-61,-59,]),'$end':([1,2,4,6,7,8,9,11,43,44,49,50,93,94,130,139,141,148,149,],[0,-80,-70,-66,-67,-68,-69,-56,-71,-81,-57,-62,-63,-64,-65,-60,-58,-61,-59,]),'}':([4,5,6,7,8,9,11,13,43,45,49,50,51,52,90,93,94,95,130,139,141,148,149,],[-70,-72,-66,-67,-68,-69,-56,50,-71,-73,-57,-62,93,94,-74,-63,-64,130,-65,-60,-58,-61,-59,]),'ELSE':([6,7,8,9,11,49,50,93,94,130,139,141,148,149,],[-66,-67,-68,-69,-56,-57,-62,-63,-64,-65,-60,146,-61,-59,]),')':([19,20,21,22,30,31,32,33,34,35,36,37,38,39,40,41,42,54,62,63,64,65,66,67,68,69,70,96,97,99,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,140,142,144,147,],[-53,-21,-51,-11,-49,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,97,106,-10,-12,-13,-14,-15,-16,-17,-18,131,-3,133,-21,-54,-55,-7,-8,137,-19,-50,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,145,-52,-20,-6,]),':':([19,20,21,22,30,31,32,33,34,35,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,142,147,],[-53,-21,-51,-11,-49,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-54,-55,134,136,-7,-8,-50,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-52,-6,]),']':([19,20,21,22,30,31,32,33,34,35,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,101,102,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,142,143,147,],[-53,-21,-51,-11,-49,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-54,-55,135,-7,-8,-50,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-52,147,-6,]),',':([19,20,21,22,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,63,64,65,66,67,68,69,70,97,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,135,137,142,144,147,],[-53,-21,-51,-11,-49,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,91,-76,-78,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-54,-55,-7,-8,138,-19,-50,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-77,-79,-5,-9,-52,-20,-6,]),'=':([20,22,31,32,34,48,63,64,65,66,67,68,69,70,97,105,106,135,137,147,],[57,-11,-4,-1,-2,92,-10,-12,-13,-14,-15,-16,-17,-18,-3,-7,-8,-5,-9,-6,]),'ADD_ASSIGN':([20,22,31,32,34,63,64,65,66,67,68,69,70,97,105,106,135,137,147,],[58,-11,-4,-1,-2,-10,-12,-13,-14,-15,-16,-17,-18,-3,-7,-8,-5,-9,-6,]),'/':([20,22,31,32,34,42,63,64,65,66,67,68,69,70,97,100,105,106,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,88,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,88,88,-22,-23,-24,-5,-9,-6,]),'%':([20,22,31,32,34,42,63,64,65,66,67,68,69,70,97,100,105,106,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,89,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,89,89,-22,-23,-24,-5,-9,-6,]),'+':([20,22,31,32,34,41,42,63,64,65,66,67,68,69,70,97,100,105,106,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,85,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,85,85,-26,-27,-22,-23,-24,-5,-9,-6,]),'LEFT_OP':([20,22,31,32,34,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,83,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,83,83,83,83,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'RIGHT_OP':([20,22,31,32,34,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,84,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,84,84,84,84,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'<':([20,22,31,32,34,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,79,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,79,79,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'>':([20,22,31,32,34,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,80,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,80,80,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'LE_OP':([20,22,31,32,34,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,81,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,81,81,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'GE_OP':([20,22,31,32,34,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,82,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,82,82,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'EQ_OP':([20,22,31,32,34,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,77,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,77,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'NE_OP':([20,22,31,32,34,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,78,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,78,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'^':([20,22,31,32,34,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,75,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,75,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'|':([20,22,31,32,34,35,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,-2,74,-43,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,74,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'LAND_OP':([20,22,31,32,33,34,35,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,-4,-1,73,-2,-45,-43,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,73,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'IS':([20,22,30,31,32,33,34,35,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,71,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'LOR_OP':([20,22,30,31,32,33,34,35,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,-11,72,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,72,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'?':([20,21,22,30,31,32,33,34,35,36,37,38,39,40,41,42,63,64,65,66,67,68,69,70,97,100,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,135,137,147,],[-21,59,-11,-49,-4,-1,-47,-2,-45,-43,-41,-39,-36,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,-50,-48,-46,-44,-42,-40,-37,-38,-32,-33,-34,-35,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'[':([22,31,32,34,63,97,105,106,135,137,147,],[60,-4,-1,-2,-10,-3,-7,-8,-5,-9,-6,]),'.':([22,31,32,34,63,97,105,106,135,137,147,],[61,-4,-1,-2,-10,-3,-7,-8,-5,-9,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'startpoint':([0,],[1,]),'statement_list':([0,3,13,52,],[2,44,51,95,]),'declaration_list':([0,13,],[3,52,]),'statement':([0,2,3,13,44,51,52,95,131,133,145,146,],[4,43,4,4,43,43,4,43,139,141,148,149,]),'declaration':([0,3,13,52,],[5,45,5,45,]),'expression_statement':([0,2,3,13,44,51,52,55,95,98,131,133,145,146,],[6,6,6,6,6,6,6,98,6,132,6,6,6,6,]),'compound_statement':([0,2,3,13,44,51,52,95,131,133,145,146,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'iteration_statement':([0,2,3,13,44,51,52,95,131,133,145,146,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'selection_statement':([0,2,3,13,44,51,52,95,131,133,145,146,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'declaration_specifiers':([0,3,13,52,],[10,10,10,10,]),'expression':([0,2,3,13,15,44,51,52,53,55,56,59,60,62,92,95,98,131,132,133,136,138,145,146,],[12,12,12,12,54,12,12,12,96,12,99,103,104,108,129,12,12,12,140,12,143,144,12,12,]),'conditional_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,92,95,98,131,132,133,134,136,138,145,146,],[19,19,19,19,19,19,19,19,19,19,19,101,102,19,19,19,19,19,19,19,19,19,142,19,19,19,19,]),'unary_expression':([0,2,3,13,15,23,24,25,26,27,28,29,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,95,98,131,132,133,134,136,138,145,146,],[20,20,20,20,20,64,65,66,67,68,69,70,20,20,20,20,20,20,100,100,20,20,20,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,125,126,127,20,20,20,20,20,20,100,20,20,20,20,]),'logical_is_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,92,95,98,131,132,133,134,136,138,145,146,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'postfix_expression':([0,2,3,13,15,23,24,25,26,27,28,29,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,95,98,131,132,133,134,136,138,145,146,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'logical_or_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,92,95,98,131,132,133,134,136,138,145,146,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,109,30,30,30,30,30,30,30,30,30,30,30,]),'primary_expression':([0,2,3,13,15,23,24,25,26,27,28,29,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,95,98,131,132,133,134,136,138,145,146,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'logical_and_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,92,95,98,131,132,133,134,136,138,145,146,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,110,33,33,33,33,33,33,33,33,33,33,33,]),'inclusive_or_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,92,95,98,131,132,133,134,136,138,145,146,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,111,35,35,35,35,35,35,35,35,35,35,35,]),'exclusive_or_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,92,95,98,131,132,133,134,136,138,145,146,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,112,36,36,36,36,36,36,36,36,36,36,36,]),'and_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,92,95,98,131,132,133,134,136,138,145,146,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,113,37,37,37,37,37,37,37,37,37,37,37,]),'equality_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,92,95,98,131,132,133,134,136,138,145,146,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,114,38,38,38,38,38,38,38,38,38,38,38,]),'relational_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,92,95,98,131,132,133,134,136,138,145,146,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,115,116,39,39,39,39,39,39,39,39,39,39,39,]),'shift_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,92,95,98,131,132,133,134,136,138,145,146,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,117,118,119,120,40,40,40,40,40,40,40,40,40,40,40,]),'additive_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,95,98,131,132,133,134,136,138,145,146,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,121,122,41,41,41,41,41,41,41,41,41,41,41,]),'multiplicative_expression':([0,2,3,13,15,44,51,52,53,55,56,57,58,59,60,62,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,95,98,131,132,133,134,136,138,145,146,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,123,124,42,42,42,42,42,42,42,42,42,42,42,]),'init_declarator_list':([10,],[46,]),'init_declarator':([10,91,],[47,128,]),'argument_expression_list':([62,],[107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> startpoint","S'",1,None,None,None),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','VISAParser.py',111),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','VISAParser.py',112),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','VISAParser.py',113),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','VISAParser.py',124),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression','VISAParser.py',125),
  ('postfix_expression -> postfix_expression [ expression : expression ]','postfix_expression',6,'p_postfix_expression','VISAParser.py',126),
  ('postfix_expression -> postfix_expression . IDENTIFIER','postfix_expression',3,'p_postfix_expression','VISAParser.py',127),
  ('postfix_expression -> postfix_expression ( )','postfix_expression',3,'p_postfix_expression','VISAParser.py',128),
  ('postfix_expression -> postfix_expression ( argument_expression_list )','postfix_expression',4,'p_postfix_expression','VISAParser.py',129),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','VISAParser.py',130),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','VISAParser.py',151),
  ('unary_expression -> - unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',152),
  ('unary_expression -> ! unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',153),
  ('unary_expression -> * unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',154),
  ('unary_expression -> & unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',155),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',156),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',157),
  ('unary_expression -> ~ unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',158),
  ('argument_expression_list -> expression','argument_expression_list',1,'p_argument_expression_list','VISAParser.py',166),
  ('argument_expression_list -> argument_expression_list , expression','argument_expression_list',3,'p_argument_expression_list','VISAParser.py',167),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_binary_expression','VISAParser.py',175),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_binary_expression','VISAParser.py',176),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_binary_expression','VISAParser.py',177),
  ('multiplicative_expression -> multiplicative_expression % unary_expression','multiplicative_expression',3,'p_binary_expression','VISAParser.py',178),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_binary_expression','VISAParser.py',179),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_binary_expression','VISAParser.py',180),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_binary_expression','VISAParser.py',181),
  ('shift_expression -> additive_expression','shift_expression',1,'p_binary_expression','VISAParser.py',182),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_binary_expression','VISAParser.py',183),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_binary_expression','VISAParser.py',184),
  ('relational_expression -> shift_expression','relational_expression',1,'p_binary_expression','VISAParser.py',185),
  ('relational_expression -> relational_expression < shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',186),
  ('relational_expression -> relational_expression > shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',187),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',188),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',189),
  ('equality_expression -> relational_expression','equality_expression',1,'p_binary_expression','VISAParser.py',190),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_binary_expression','VISAParser.py',191),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_binary_expression','VISAParser.py',192),
  ('and_expression -> equality_expression','and_expression',1,'p_binary_expression','VISAParser.py',193),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_binary_expression','VISAParser.py',194),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_binary_expression','VISAParser.py',195),
  ('exclusive_or_expression -> exclusive_or_expression ^ and_expression','exclusive_or_expression',3,'p_binary_expression','VISAParser.py',196),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_binary_expression','VISAParser.py',197),
  ('inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression','inclusive_or_expression',3,'p_binary_expression','VISAParser.py',198),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_binary_expression','VISAParser.py',199),
  ('logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression','logical_and_expression',3,'p_binary_expression','VISAParser.py',200),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_binary_expression','VISAParser.py',201),
  ('logical_or_expression -> logical_or_expression LOR_OP logical_and_expression','logical_or_expression',3,'p_binary_expression','VISAParser.py',202),
  ('logical_is_expression -> logical_or_expression','logical_is_expression',1,'p_binary_expression','VISAParser.py',203),
  ('logical_is_expression -> logical_or_expression IS logical_or_expression','logical_is_expression',3,'p_binary_expression','VISAParser.py',204),
  ('conditional_expression -> logical_is_expression','conditional_expression',1,'p_conditional_expression','VISAParser.py',212),
  ('conditional_expression -> logical_is_expression ? expression : conditional_expression','conditional_expression',5,'p_conditional_expression','VISAParser.py',213),
  ('expression -> conditional_expression','expression',1,'p_expression','VISAParser.py',221),
  ('expression -> unary_expression = conditional_expression','expression',3,'p_expression','VISAParser.py',222),
  ('expression -> unary_expression ADD_ASSIGN conditional_expression','expression',3,'p_expression','VISAParser.py',223),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement','VISAParser.py',231),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement','VISAParser.py',232),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement','VISAParser.py',240),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement','VISAParser.py',241),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement','VISAParser.py',259),
  ('iteration_statement -> FOR ( expression_statement expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','VISAParser.py',260),
  ('compound_statement -> { }','compound_statement',2,'p_compound_statement','VISAParser.py',269),
  ('compound_statement -> { statement_list }','compound_statement',3,'p_compound_statement','VISAParser.py',270),
  ('compound_statement -> { declaration_list }','compound_statement',3,'p_compound_statement','VISAParser.py',271),
  ('compound_statement -> { declaration_list statement_list }','compound_statement',4,'p_compound_statement','VISAParser.py',272),
  ('statement -> expression_statement','statement',1,'p_statement','VISAParser.py',282),
  ('statement -> compound_statement','statement',1,'p_statement','VISAParser.py',283),
  ('statement -> iteration_statement','statement',1,'p_statement','VISAParser.py',284),
  ('statement -> selection_statement','statement',1,'p_statement','VISAParser.py',285),
  ('statement_list -> statement','statement_list',1,'p_statement_list','VISAParser.py',290),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','VISAParser.py',291),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','VISAParser.py',300),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','VISAParser.py',301),
  ('declaration -> declaration_specifiers init_declarator_list ;','declaration',3,'p_declaration','VISAParser.py',310),
  ('declaration_specifiers -> UD','declaration_specifiers',1,'p_declaration_specifiers','VISAParser.py',322),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','VISAParser.py',327),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list','VISAParser.py',328),
  ('init_declarator -> IDENTIFIER','init_declarator',1,'p_init_declarator','VISAParser.py',336),
  ('init_declarator -> IDENTIFIER = expression','init_declarator',3,'p_init_declarator','VISAParser.py',337),
  ('startpoint -> statement_list','startpoint',1,'p_startpoint','VISAParser.py',345),
  ('startpoint -> declaration_list statement_list','startpoint',2,'p_startpoint','VISAParser.py',346),
]
