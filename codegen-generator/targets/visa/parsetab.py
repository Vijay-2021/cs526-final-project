
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startpointADD_ASSIGN CONSTANT D DEC_OP ELSE EQ_OP FOR GE_OP IDENTIFIER IF INC_OP IS LAND_OP LEFT_OP LE_OP LOR_OP NE_OP REL_OP RIGHT_OP STRING UD WHILE bitprimary_expression : IDENTIFIER\n        | CONSTANT\n        | '(' expression ')'\n        postfix_expression : primary_expression\n        | postfix_expression '[' expression ']'\n        | postfix_expression '[' expression ':' expression ']'\n        | postfix_expression '.' IDENTIFIER\n        | postfix_expression '(' ')'\n        | postfix_expression '(' argument_expression_list ')'\n        | postfix_expression INC_OP\n        unary_expression : postfix_expression\n        | '-' unary_expression\n        | '!' unary_expression\n        | '*' unary_expression\n        | '&' unary_expression\n        | INC_OP unary_expression\n        | DEC_OP unary_expression\n        | '~' unary_expression\n        argument_expression_list : expression\n        | argument_expression_list ',' expression\n        multiplicative_expression : unary_expression\n        | multiplicative_expression '*' unary_expression\n        | multiplicative_expression '/' unary_expression\n        | multiplicative_expression '%' unary_expression\n        additive_expression : multiplicative_expression\n        | additive_expression '+' multiplicative_expression\n        | additive_expression '-' multiplicative_expression\n        shift_expression : additive_expression\n        | shift_expression LEFT_OP additive_expression\n        | shift_expression RIGHT_OP additive_expression\n        relational_expression : shift_expression\n        | relational_expression '<' shift_expression\n        | relational_expression '>' shift_expression\n        | relational_expression LE_OP shift_expression\n        | relational_expression GE_OP shift_expression\n        | relational_expression REL_OP shift_expression\n        equality_expression : relational_expression\n        | equality_expression EQ_OP relational_expression\n        | equality_expression NE_OP relational_expression\n        and_expression : equality_expression\n        | and_expression '&' equality_expression\n        exclusive_or_expression : and_expression\n        | exclusive_or_expression '^' and_expression\n        inclusive_or_expression : exclusive_or_expression\n        | inclusive_or_expression '|' exclusive_or_expression\n        logical_and_expression : inclusive_or_expression\n        | logical_and_expression LAND_OP inclusive_or_expression\n        logical_or_expression : logical_and_expression\n        | logical_or_expression LOR_OP logical_and_expression\n        logical_is_expression : logical_or_expression\n        | logical_or_expression IS logical_or_expression\n        conditional_expression : logical_is_expression\n        | logical_is_expression '?' expression ':' conditional_expression\n        expression : conditional_expression\n        | unary_expression '=' conditional_expression\n        | unary_expression ADD_ASSIGN conditional_expression\n        expression_statement : ';'\n        | expression ';'\n        selection_statement : IF '(' expression ')' statement\n        | IF '(' expression ')' statement ELSE statement\n        iteration_statement : WHILE '(' expression ')' statement\n        | FOR '(' expression_statement expression_statement expression ')' statement\n        compound_statement : '{' '}'\n        | '{' statement_list '}'\n        | '{' declaration_list '}'\n        | '{' declaration_list statement_list '}'\n        statement : expression_statement\n        | compound_statement\n        | iteration_statement\n        | selection_statement\n        statement_list : statement\n        | statement_list statement\n        \n        declaration_list : declaration\n        | declaration_list declaration\n        \n        declaration : declaration_specifiers init_declarator_list ';'\n        declaration_specifiers : UD\n        | D\n        | bit\n        init_declarator_list : init_declarator\n        | init_declarator_list ',' init_declarator\n        init_declarator : IDENTIFIER\n        | IDENTIFIER '=' expressionstartpoint : statement_list\n        | declaration_list statement_list"
    
_lr_action_items = {';':([0,2,3,4,5,6,7,8,9,11,12,13,21,22,23,24,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,65,66,67,68,69,70,71,72,93,96,97,98,100,101,103,104,105,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,139,141,143,145,146,149,150,151,152,153,],[11,11,11,-71,-73,-67,-68,-69,-70,-57,51,11,-54,-21,-52,-11,-50,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,-72,11,-74,93,-79,-81,-58,-63,11,11,11,-10,-12,-13,-14,-15,-16,-17,-18,-75,-64,-65,11,-3,11,-21,-55,-56,-7,-8,-51,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-80,-82,-66,11,11,-5,-9,-61,-59,-53,11,11,-6,-62,-60,]),'{':([0,2,3,4,5,6,7,8,9,11,13,45,46,47,51,52,53,54,93,96,97,98,134,135,137,143,145,149,150,152,153,],[13,13,13,-71,-73,-67,-68,-69,-70,-57,13,-72,13,-74,-58,-63,13,13,-75,-64,-65,13,-66,13,13,-61,-59,13,13,-62,-60,]),'WHILE':([0,2,3,4,5,6,7,8,9,11,13,45,46,47,51,52,53,54,93,96,97,98,134,135,137,143,145,149,150,152,153,],[14,14,14,-71,-73,-67,-68,-69,-70,-57,14,-72,14,-74,-58,-63,14,14,-75,-64,-65,14,-66,14,14,-61,-59,14,14,-62,-60,]),'FOR':([0,2,3,4,5,6,7,8,9,11,13,45,46,47,51,52,53,54,93,96,97,98,134,135,137,143,145,149,150,152,153,],[16,16,16,-71,-73,-67,-68,-69,-70,-57,16,-72,16,-74,-58,-63,16,16,-75,-64,-65,16,-66,16,16,-61,-59,16,16,-62,-60,]),'IF':([0,2,3,4,5,6,7,8,9,11,13,45,46,47,51,52,53,54,93,96,97,98,134,135,137,143,145,149,150,152,153,],[17,17,17,-71,-73,-67,-68,-69,-70,-57,17,-72,17,-74,-58,-63,17,17,-75,-64,-65,17,-66,17,17,-61,-59,17,17,-62,-60,]),'UD':([0,3,5,13,47,54,93,],[18,18,-73,18,-74,18,-75,]),'D':([0,3,5,13,47,54,93,],[19,19,-73,19,-74,19,-75,]),'bit':([0,3,5,13,47,54,93,],[20,20,-73,20,-74,20,-75,]),'-':([0,2,3,4,5,6,7,8,9,11,13,15,22,24,25,26,27,28,29,30,31,33,34,36,43,44,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,100,101,103,108,109,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,145,149,150,151,152,153,],[25,25,25,-71,-73,-67,-68,-69,-70,-57,25,25,-21,-11,25,25,25,25,25,25,25,-4,-1,-2,89,-25,-72,25,-74,-58,-63,25,25,25,25,25,25,25,25,25,25,-10,-12,-13,-14,-15,-16,-17,-18,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-75,25,-64,-65,25,-3,25,-21,-7,-8,89,89,-26,-27,-22,-23,-24,-66,25,25,25,25,-5,25,-9,25,-61,-59,25,25,-6,-62,-60,]),'!':([0,2,3,4,5,6,7,8,9,11,13,15,25,26,27,28,29,30,31,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,101,134,135,136,137,138,140,142,143,145,149,150,152,153,],[26,26,26,-71,-73,-67,-68,-69,-70,-57,26,26,26,26,26,26,26,26,26,-72,26,-74,-58,-63,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-75,26,-64,-65,26,26,-66,26,26,26,26,26,26,-61,-59,26,26,-62,-60,]),'*':([0,2,3,4,5,6,7,8,9,11,13,15,22,24,25,26,27,28,29,30,31,33,34,36,44,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,100,101,103,108,109,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,145,149,150,151,152,153,],[27,27,27,-71,-73,-67,-68,-69,-70,-57,27,27,-21,-11,27,27,27,27,27,27,27,-4,-1,-2,90,-72,27,-74,-58,-63,27,27,27,27,27,27,27,27,27,27,-10,-12,-13,-14,-15,-16,-17,-18,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-75,27,-64,-65,27,-3,27,-21,-7,-8,90,90,-22,-23,-24,-66,27,27,27,27,-5,27,-9,27,-61,-59,27,27,-6,-62,-60,]),'&':([0,2,3,4,5,6,7,8,9,11,13,15,22,24,25,26,27,28,29,30,31,33,34,36,39,40,41,42,43,44,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,100,101,103,108,109,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,145,149,150,151,152,153,],[28,28,28,-71,-73,-67,-68,-69,-70,-57,28,28,-21,-11,28,28,28,28,28,28,28,-4,-1,-2,78,-40,-37,-31,-28,-25,-72,28,-74,-58,-63,28,28,28,28,28,28,28,28,28,28,-10,-12,-13,-14,-15,-16,-17,-18,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-75,28,-64,-65,28,-3,28,-21,-7,-8,78,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-66,28,28,28,28,-5,28,-9,28,-61,-59,28,28,-6,-62,-60,]),'INC_OP':([0,2,3,4,5,6,7,8,9,11,13,15,24,25,26,27,28,29,30,31,33,34,36,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,65,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,100,101,108,109,134,135,136,137,138,139,140,141,142,143,145,149,150,151,152,153,],[29,29,29,-71,-73,-67,-68,-69,-70,-57,29,29,65,29,29,29,29,29,29,29,-4,-1,-2,-72,29,-74,-58,-63,29,29,29,29,29,29,29,29,29,29,-10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-75,29,-64,-65,29,-3,29,-7,-8,-66,29,29,29,29,-5,29,-9,29,-61,-59,29,29,-6,-62,-60,]),'DEC_OP':([0,2,3,4,5,6,7,8,9,11,13,15,25,26,27,28,29,30,31,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,101,134,135,136,137,138,140,142,143,145,149,150,152,153,],[30,30,30,-71,-73,-67,-68,-69,-70,-57,30,30,30,30,30,30,30,30,30,-72,30,-74,-58,-63,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-75,30,-64,-65,30,30,-66,30,30,30,30,30,30,-61,-59,30,30,-62,-60,]),'~':([0,2,3,4,5,6,7,8,9,11,13,15,25,26,27,28,29,30,31,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,101,134,135,136,137,138,140,142,143,145,149,150,152,153,],[31,31,31,-71,-73,-67,-68,-69,-70,-57,31,31,31,31,31,31,31,31,31,-72,31,-74,-58,-63,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-75,31,-64,-65,31,31,-66,31,31,31,31,31,31,-61,-59,31,31,-62,-60,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,15,18,19,20,25,26,27,28,29,30,31,45,46,47,51,52,53,54,55,57,58,59,60,61,62,63,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,134,135,136,137,138,140,142,143,145,149,150,152,153,],[34,34,34,-71,-73,-67,-68,-69,-70,50,-57,34,34,-76,-77,-78,34,34,34,34,34,34,34,-72,34,-74,-58,-63,34,34,34,34,34,34,34,34,34,108,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-75,50,34,-64,-65,34,34,-66,34,34,34,34,34,34,-61,-59,34,34,-62,-60,]),'CONSTANT':([0,2,3,4,5,6,7,8,9,11,13,15,25,26,27,28,29,30,31,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,101,134,135,136,137,138,140,142,143,145,149,150,152,153,],[36,36,36,-71,-73,-67,-68,-69,-70,-57,36,36,36,36,36,36,36,36,36,-72,36,-74,-58,-63,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-75,36,-64,-65,36,36,-66,36,36,36,36,36,36,-61,-59,36,36,-62,-60,]),'(':([0,2,3,4,5,6,7,8,9,11,13,14,15,16,17,24,25,26,27,28,29,30,31,33,34,36,45,46,47,51,52,53,54,55,57,58,59,60,61,62,64,65,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,100,101,108,109,134,135,136,137,138,139,140,141,142,143,145,149,150,151,152,153,],[15,15,15,-71,-73,-67,-68,-69,-70,-57,15,55,15,57,58,64,15,15,15,15,15,15,15,-4,-1,-2,-72,15,-74,-58,-63,15,15,15,15,15,15,15,15,15,15,-10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-75,15,-64,-65,15,-3,15,-7,-8,-66,15,15,15,15,-5,15,-9,15,-61,-59,15,15,-6,-62,-60,]),'$end':([1,2,4,6,7,8,9,11,45,46,51,52,96,97,134,143,145,152,153,],[0,-83,-71,-67,-68,-69,-70,-57,-72,-84,-58,-63,-64,-65,-66,-61,-59,-62,-60,]),'}':([4,5,6,7,8,9,11,13,45,47,51,52,53,54,93,96,97,98,134,143,145,152,153,],[-71,-73,-67,-68,-69,-70,-57,52,-72,-74,-58,-63,96,97,-75,-64,-65,134,-66,-61,-59,-62,-60,]),'ELSE':([6,7,8,9,11,51,52,96,97,134,143,145,152,153,],[-67,-68,-69,-70,-57,-58,-63,-64,-65,-66,-61,150,-62,-60,]),')':([21,22,23,24,32,33,34,35,36,37,38,39,40,41,42,43,44,56,64,65,66,67,68,69,70,71,72,99,100,102,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,144,146,148,151,],[-54,-21,-52,-11,-50,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,100,109,-10,-12,-13,-14,-15,-16,-17,-18,135,-3,137,-21,-55,-56,-7,-8,141,-19,-51,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,149,-53,-20,-6,]),':':([21,22,23,24,32,33,34,35,36,37,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,146,151,],[-54,-21,-52,-11,-50,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-55,-56,138,140,-7,-8,-51,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-53,-6,]),']':([21,22,23,24,32,33,34,35,36,37,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,104,105,107,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,146,147,151,],[-54,-21,-52,-11,-50,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-55,-56,139,-7,-8,-51,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-53,151,-6,]),',':([21,22,23,24,32,33,34,35,36,37,38,39,40,41,42,43,44,48,49,50,65,66,67,68,69,70,71,72,100,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,139,141,146,148,151,],[-54,-21,-52,-11,-50,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,94,-79,-81,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-55,-56,-7,-8,142,-19,-51,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-80,-82,-5,-9,-53,-20,-6,]),'=':([22,24,33,34,36,50,65,66,67,68,69,70,71,72,100,108,109,139,141,151,],[59,-11,-4,-1,-2,95,-10,-12,-13,-14,-15,-16,-17,-18,-3,-7,-8,-5,-9,-6,]),'ADD_ASSIGN':([22,24,33,34,36,65,66,67,68,69,70,71,72,100,108,109,139,141,151,],[60,-11,-4,-1,-2,-10,-12,-13,-14,-15,-16,-17,-18,-3,-7,-8,-5,-9,-6,]),'/':([22,24,33,34,36,44,65,66,67,68,69,70,71,72,100,103,108,109,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,91,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,91,91,-22,-23,-24,-5,-9,-6,]),'%':([22,24,33,34,36,44,65,66,67,68,69,70,71,72,100,103,108,109,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,92,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,92,92,-22,-23,-24,-5,-9,-6,]),'+':([22,24,33,34,36,43,44,65,66,67,68,69,70,71,72,100,103,108,109,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,88,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,88,88,-26,-27,-22,-23,-24,-5,-9,-6,]),'LEFT_OP':([22,24,33,34,36,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,86,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,86,86,86,86,86,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'RIGHT_OP':([22,24,33,34,36,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,87,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,87,87,87,87,87,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'<':([22,24,33,34,36,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,81,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,81,81,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'>':([22,24,33,34,36,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,82,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,82,82,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'LE_OP':([22,24,33,34,36,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,83,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,83,83,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'GE_OP':([22,24,33,34,36,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,84,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,84,84,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'REL_OP':([22,24,33,34,36,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,85,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,85,85,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'EQ_OP':([22,24,33,34,36,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,79,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,79,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'NE_OP':([22,24,33,34,36,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,80,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,80,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'^':([22,24,33,34,36,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,77,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,77,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'|':([22,24,33,34,36,37,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,-2,76,-44,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,76,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'LAND_OP':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,-4,-1,75,-2,-46,-44,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,75,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'IS':([22,24,32,33,34,35,36,37,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,73,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'LOR_OP':([22,24,32,33,34,35,36,37,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,-11,74,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,74,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'?':([22,23,24,32,33,34,35,36,37,38,39,40,41,42,43,44,65,66,67,68,69,70,71,72,100,103,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,139,141,151,],[-21,61,-11,-50,-4,-1,-48,-2,-46,-44,-42,-40,-37,-31,-28,-25,-10,-12,-13,-14,-15,-16,-17,-18,-3,-21,-7,-8,-51,-49,-47,-45,-43,-41,-38,-39,-32,-33,-34,-35,-36,-29,-30,-26,-27,-22,-23,-24,-5,-9,-6,]),'[':([24,33,34,36,65,100,108,109,139,141,151,],[62,-4,-1,-2,-10,-3,-7,-8,-5,-9,-6,]),'.':([24,33,34,36,65,100,108,109,139,141,151,],[63,-4,-1,-2,-10,-3,-7,-8,-5,-9,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'startpoint':([0,],[1,]),'statement_list':([0,3,13,54,],[2,46,53,98,]),'declaration_list':([0,13,],[3,54,]),'statement':([0,2,3,13,46,53,54,98,135,137,149,150,],[4,45,4,4,45,45,4,45,143,145,152,153,]),'declaration':([0,3,13,54,],[5,47,5,47,]),'expression_statement':([0,2,3,13,46,53,54,57,98,101,135,137,149,150,],[6,6,6,6,6,6,6,101,6,136,6,6,6,6,]),'compound_statement':([0,2,3,13,46,53,54,98,135,137,149,150,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'iteration_statement':([0,2,3,13,46,53,54,98,135,137,149,150,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'selection_statement':([0,2,3,13,46,53,54,98,135,137,149,150,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'declaration_specifiers':([0,3,13,54,],[10,10,10,10,]),'expression':([0,2,3,13,15,46,53,54,55,57,58,61,62,64,95,98,101,135,136,137,140,142,149,150,],[12,12,12,12,56,12,12,12,99,12,102,106,107,111,133,12,12,12,144,12,147,148,12,12,]),'conditional_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,95,98,101,135,136,137,138,140,142,149,150,],[21,21,21,21,21,21,21,21,21,21,21,104,105,21,21,21,21,21,21,21,21,21,146,21,21,21,21,]),'unary_expression':([0,2,3,13,15,25,26,27,28,29,30,31,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,98,101,135,136,137,138,140,142,149,150,],[22,22,22,22,22,66,67,68,69,70,71,72,22,22,22,22,22,22,103,103,22,22,22,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,129,130,131,22,22,22,22,22,22,103,22,22,22,22,]),'logical_is_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,95,98,101,135,136,137,138,140,142,149,150,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'postfix_expression':([0,2,3,13,15,25,26,27,28,29,30,31,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,98,101,135,136,137,138,140,142,149,150,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'logical_or_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,95,98,101,135,136,137,138,140,142,149,150,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,32,32,32,32,32,32,32,32,32,32,32,]),'primary_expression':([0,2,3,13,15,25,26,27,28,29,30,31,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,98,101,135,136,137,138,140,142,149,150,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'logical_and_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,95,98,101,135,136,137,138,140,142,149,150,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,113,35,35,35,35,35,35,35,35,35,35,35,]),'inclusive_or_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,95,98,101,135,136,137,138,140,142,149,150,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,114,37,37,37,37,37,37,37,37,37,37,37,]),'exclusive_or_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,95,98,101,135,136,137,138,140,142,149,150,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,115,38,38,38,38,38,38,38,38,38,38,38,]),'and_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,95,98,101,135,136,137,138,140,142,149,150,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,116,39,39,39,39,39,39,39,39,39,39,39,]),'equality_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,95,98,101,135,136,137,138,140,142,149,150,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,117,40,40,40,40,40,40,40,40,40,40,40,]),'relational_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,95,98,101,135,136,137,138,140,142,149,150,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,118,119,41,41,41,41,41,41,41,41,41,41,41,]),'shift_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,95,98,101,135,136,137,138,140,142,149,150,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,120,121,122,123,124,42,42,42,42,42,42,42,42,42,42,42,]),'additive_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,95,98,101,135,136,137,138,140,142,149,150,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,125,126,43,43,43,43,43,43,43,43,43,43,43,]),'multiplicative_expression':([0,2,3,13,15,46,53,54,55,57,58,59,60,61,62,64,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,98,101,135,136,137,138,140,142,149,150,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,127,128,44,44,44,44,44,44,44,44,44,44,44,]),'init_declarator_list':([10,],[48,]),'init_declarator':([10,94,],[49,132,]),'argument_expression_list':([64,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> startpoint","S'",1,None,None,None),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','VISAParser.py',112),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','VISAParser.py',113),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','VISAParser.py',114),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','VISAParser.py',125),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression','VISAParser.py',126),
  ('postfix_expression -> postfix_expression [ expression : expression ]','postfix_expression',6,'p_postfix_expression','VISAParser.py',127),
  ('postfix_expression -> postfix_expression . IDENTIFIER','postfix_expression',3,'p_postfix_expression','VISAParser.py',128),
  ('postfix_expression -> postfix_expression ( )','postfix_expression',3,'p_postfix_expression','VISAParser.py',129),
  ('postfix_expression -> postfix_expression ( argument_expression_list )','postfix_expression',4,'p_postfix_expression','VISAParser.py',130),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','VISAParser.py',131),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','VISAParser.py',152),
  ('unary_expression -> - unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',153),
  ('unary_expression -> ! unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',154),
  ('unary_expression -> * unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',155),
  ('unary_expression -> & unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',156),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',157),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',158),
  ('unary_expression -> ~ unary_expression','unary_expression',2,'p_unary_expression','VISAParser.py',159),
  ('argument_expression_list -> expression','argument_expression_list',1,'p_argument_expression_list','VISAParser.py',167),
  ('argument_expression_list -> argument_expression_list , expression','argument_expression_list',3,'p_argument_expression_list','VISAParser.py',168),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_binary_expression','VISAParser.py',176),
  ('multiplicative_expression -> multiplicative_expression * unary_expression','multiplicative_expression',3,'p_binary_expression','VISAParser.py',177),
  ('multiplicative_expression -> multiplicative_expression / unary_expression','multiplicative_expression',3,'p_binary_expression','VISAParser.py',178),
  ('multiplicative_expression -> multiplicative_expression % unary_expression','multiplicative_expression',3,'p_binary_expression','VISAParser.py',179),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_binary_expression','VISAParser.py',180),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_binary_expression','VISAParser.py',181),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_binary_expression','VISAParser.py',182),
  ('shift_expression -> additive_expression','shift_expression',1,'p_binary_expression','VISAParser.py',183),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_binary_expression','VISAParser.py',184),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_binary_expression','VISAParser.py',185),
  ('relational_expression -> shift_expression','relational_expression',1,'p_binary_expression','VISAParser.py',186),
  ('relational_expression -> relational_expression < shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',187),
  ('relational_expression -> relational_expression > shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',188),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',189),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',190),
  ('relational_expression -> relational_expression REL_OP shift_expression','relational_expression',3,'p_binary_expression','VISAParser.py',191),
  ('equality_expression -> relational_expression','equality_expression',1,'p_binary_expression','VISAParser.py',192),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_binary_expression','VISAParser.py',193),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_binary_expression','VISAParser.py',194),
  ('and_expression -> equality_expression','and_expression',1,'p_binary_expression','VISAParser.py',195),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_binary_expression','VISAParser.py',196),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_binary_expression','VISAParser.py',197),
  ('exclusive_or_expression -> exclusive_or_expression ^ and_expression','exclusive_or_expression',3,'p_binary_expression','VISAParser.py',198),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_binary_expression','VISAParser.py',199),
  ('inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression','inclusive_or_expression',3,'p_binary_expression','VISAParser.py',200),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_binary_expression','VISAParser.py',201),
  ('logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression','logical_and_expression',3,'p_binary_expression','VISAParser.py',202),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_binary_expression','VISAParser.py',203),
  ('logical_or_expression -> logical_or_expression LOR_OP logical_and_expression','logical_or_expression',3,'p_binary_expression','VISAParser.py',204),
  ('logical_is_expression -> logical_or_expression','logical_is_expression',1,'p_binary_expression','VISAParser.py',205),
  ('logical_is_expression -> logical_or_expression IS logical_or_expression','logical_is_expression',3,'p_binary_expression','VISAParser.py',206),
  ('conditional_expression -> logical_is_expression','conditional_expression',1,'p_conditional_expression','VISAParser.py',214),
  ('conditional_expression -> logical_is_expression ? expression : conditional_expression','conditional_expression',5,'p_conditional_expression','VISAParser.py',215),
  ('expression -> conditional_expression','expression',1,'p_expression','VISAParser.py',223),
  ('expression -> unary_expression = conditional_expression','expression',3,'p_expression','VISAParser.py',224),
  ('expression -> unary_expression ADD_ASSIGN conditional_expression','expression',3,'p_expression','VISAParser.py',225),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement','VISAParser.py',233),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement','VISAParser.py',234),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement','VISAParser.py',242),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement','VISAParser.py',243),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement','VISAParser.py',261),
  ('iteration_statement -> FOR ( expression_statement expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','VISAParser.py',262),
  ('compound_statement -> { }','compound_statement',2,'p_compound_statement','VISAParser.py',271),
  ('compound_statement -> { statement_list }','compound_statement',3,'p_compound_statement','VISAParser.py',272),
  ('compound_statement -> { declaration_list }','compound_statement',3,'p_compound_statement','VISAParser.py',273),
  ('compound_statement -> { declaration_list statement_list }','compound_statement',4,'p_compound_statement','VISAParser.py',274),
  ('statement -> expression_statement','statement',1,'p_statement','VISAParser.py',284),
  ('statement -> compound_statement','statement',1,'p_statement','VISAParser.py',285),
  ('statement -> iteration_statement','statement',1,'p_statement','VISAParser.py',286),
  ('statement -> selection_statement','statement',1,'p_statement','VISAParser.py',287),
  ('statement_list -> statement','statement_list',1,'p_statement_list','VISAParser.py',292),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','VISAParser.py',293),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','VISAParser.py',302),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','VISAParser.py',303),
  ('declaration -> declaration_specifiers init_declarator_list ;','declaration',3,'p_declaration','VISAParser.py',312),
  ('declaration_specifiers -> UD','declaration_specifiers',1,'p_declaration_specifiers','VISAParser.py',324),
  ('declaration_specifiers -> D','declaration_specifiers',1,'p_declaration_specifiers','VISAParser.py',325),
  ('declaration_specifiers -> bit','declaration_specifiers',1,'p_declaration_specifiers','VISAParser.py',326),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','VISAParser.py',332),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list','VISAParser.py',333),
  ('init_declarator -> IDENTIFIER','init_declarator',1,'p_init_declarator','VISAParser.py',341),
  ('init_declarator -> IDENTIFIER = expression','init_declarator',3,'p_init_declarator','VISAParser.py',342),
  ('startpoint -> statement_list','startpoint',1,'p_startpoint','VISAParser.py',350),
  ('startpoint -> declaration_list statement_list','startpoint',2,'p_startpoint','VISAParser.py',351),
]
