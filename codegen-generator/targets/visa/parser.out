Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> startpoint
Rule 1     primary_expression -> IDENTIFIER
Rule 2     primary_expression -> CONSTANT
Rule 3     primary_expression -> ( expression )
Rule 4     postfix_expression -> primary_expression
Rule 5     postfix_expression -> postfix_expression [ expression ]
Rule 6     postfix_expression -> postfix_expression [ expression : expression ]
Rule 7     postfix_expression -> postfix_expression . IDENTIFIER
Rule 8     postfix_expression -> postfix_expression ( )
Rule 9     postfix_expression -> postfix_expression ( argument_expression_list )
Rule 10    postfix_expression -> postfix_expression INC_OP
Rule 11    unary_expression -> postfix_expression
Rule 12    unary_expression -> - unary_expression
Rule 13    unary_expression -> ! unary_expression
Rule 14    unary_expression -> * unary_expression
Rule 15    unary_expression -> & unary_expression
Rule 16    unary_expression -> INC_OP unary_expression
Rule 17    unary_expression -> DEC_OP unary_expression
Rule 18    unary_expression -> ~ unary_expression
Rule 19    argument_expression_list -> expression
Rule 20    argument_expression_list -> argument_expression_list , expression
Rule 21    multiplicative_expression -> unary_expression
Rule 22    multiplicative_expression -> multiplicative_expression * unary_expression
Rule 23    multiplicative_expression -> multiplicative_expression / unary_expression
Rule 24    multiplicative_expression -> multiplicative_expression % unary_expression
Rule 25    additive_expression -> multiplicative_expression
Rule 26    additive_expression -> additive_expression + multiplicative_expression
Rule 27    additive_expression -> additive_expression - multiplicative_expression
Rule 28    shift_expression -> additive_expression
Rule 29    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 30    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 31    relational_expression -> shift_expression
Rule 32    relational_expression -> relational_expression < shift_expression
Rule 33    relational_expression -> relational_expression > shift_expression
Rule 34    relational_expression -> relational_expression LE_OP shift_expression
Rule 35    relational_expression -> relational_expression GE_OP shift_expression
Rule 36    relational_expression -> relational_expression REL_OP shift_expression
Rule 37    equality_expression -> relational_expression
Rule 38    equality_expression -> equality_expression EQ_OP relational_expression
Rule 39    equality_expression -> equality_expression NE_OP relational_expression
Rule 40    and_expression -> equality_expression
Rule 41    and_expression -> and_expression & equality_expression
Rule 42    exclusive_or_expression -> and_expression
Rule 43    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 44    inclusive_or_expression -> exclusive_or_expression
Rule 45    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 46    logical_and_expression -> inclusive_or_expression
Rule 47    logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression
Rule 48    logical_or_expression -> logical_and_expression
Rule 49    logical_or_expression -> logical_or_expression LOR_OP logical_and_expression
Rule 50    logical_is_expression -> logical_or_expression
Rule 51    logical_is_expression -> logical_or_expression IS logical_or_expression
Rule 52    conditional_expression -> logical_is_expression
Rule 53    conditional_expression -> logical_is_expression ? expression : conditional_expression
Rule 54    expression -> conditional_expression
Rule 55    expression -> unary_expression = conditional_expression
Rule 56    expression -> unary_expression ADD_ASSIGN conditional_expression
Rule 57    expression_statement -> ;
Rule 58    expression_statement -> expression ;
Rule 59    selection_statement -> IF ( expression ) statement
Rule 60    selection_statement -> IF ( expression ) statement ELSE statement
Rule 61    iteration_statement -> WHILE ( expression ) statement
Rule 62    iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 63    compound_statement -> { }
Rule 64    compound_statement -> { statement_list }
Rule 65    compound_statement -> { declaration_list }
Rule 66    compound_statement -> { declaration_list statement_list }
Rule 67    statement -> expression_statement
Rule 68    statement -> compound_statement
Rule 69    statement -> iteration_statement
Rule 70    statement -> selection_statement
Rule 71    statement_list -> statement
Rule 72    statement_list -> statement_list statement
Rule 73    declaration_list -> declaration
Rule 74    declaration_list -> declaration_list declaration
Rule 75    declaration -> declaration_specifiers init_declarator_list ;
Rule 76    declaration_specifiers -> UD
Rule 77    declaration_specifiers -> D
Rule 78    declaration_specifiers -> bit
Rule 79    init_declarator_list -> init_declarator
Rule 80    init_declarator_list -> init_declarator_list , init_declarator
Rule 81    init_declarator -> IDENTIFIER
Rule 82    init_declarator -> IDENTIFIER = expression
Rule 83    startpoint -> statement_list
Rule 84    startpoint -> declaration_list statement_list

Terminals, with rules where they appear

!                    : 13
%                    : 24
&                    : 15 41
(                    : 3 8 9 59 60 61 62
)                    : 3 8 9 59 60 61 62
*                    : 14 22
+                    : 26
,                    : 20 80
-                    : 12 27
.                    : 7
/                    : 23
:                    : 6 53
;                    : 57 58 75
<                    : 32
=                    : 55 82
>                    : 33
?                    : 53
ADD_ASSIGN           : 56
CONSTANT             : 2
D                    : 77
DEC_OP               : 17
ELSE                 : 60
EQ_OP                : 38
FOR                  : 62
GE_OP                : 35
IDENTIFIER           : 1 7 81 82
IF                   : 59 60
INC_OP               : 10 16
IS                   : 51
LAND_OP              : 47
LEFT_OP              : 29
LE_OP                : 34
LOR_OP               : 49
NE_OP                : 39
REL_OP               : 36
RIGHT_OP             : 30
STRING               : 
UD                   : 76
WHILE                : 61
[                    : 5 6
]                    : 5 6
^                    : 43
bit                  : 78
error                : 
{                    : 63 64 65 66
|                    : 45
}                    : 63 64 65 66
~                    : 18

Nonterminals, with rules where they appear

additive_expression  : 26 27 28 29 30
and_expression       : 41 42 43
argument_expression_list : 9 20
compound_statement   : 68
conditional_expression : 53 54 55 56
declaration          : 73 74
declaration_list     : 65 66 74 84
declaration_specifiers : 75
equality_expression  : 38 39 40 41
exclusive_or_expression : 43 44 45
expression           : 3 5 6 6 19 20 53 58 59 60 61 62 82
expression_statement : 62 62 67
inclusive_or_expression : 45 46 47
init_declarator      : 79 80
init_declarator_list : 75 80
iteration_statement  : 69
logical_and_expression : 47 48 49
logical_is_expression : 52 53
logical_or_expression : 49 50 51 51
multiplicative_expression : 22 23 24 25 26 27
postfix_expression   : 5 6 7 8 9 10 11
primary_expression   : 4
relational_expression : 32 33 34 35 36 37 38 39
selection_statement  : 70
shift_expression     : 29 30 31 32 33 34 35 36
startpoint           : 0
statement            : 59 60 60 61 62 71 72
statement_list       : 64 66 72 83 84
unary_expression     : 12 13 14 15 16 17 18 21 22 23 24 55 56

Parsing method: LALR

state 0

    (0) S' -> . startpoint
    (83) startpoint -> . statement_list
    (84) startpoint -> . declaration_list statement_list
    (71) statement_list -> . statement
    (72) statement_list -> . statement_list statement
    (73) declaration_list -> . declaration
    (74) declaration_list -> . declaration_list declaration
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (75) declaration -> . declaration_specifiers init_declarator_list ;
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (76) declaration_specifiers -> . UD
    (77) declaration_specifiers -> . D
    (78) declaration_specifiers -> . bit
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    UD              shift and go to state 18
    D               shift and go to state 19
    bit             shift and go to state 20
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    startpoint                     shift and go to state 1
    statement_list                 shift and go to state 2
    declaration_list               shift and go to state 3
    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    declaration_specifiers         shift and go to state 10
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 1

    (0) S' -> startpoint .



state 2

    (83) startpoint -> statement_list .
    (72) statement_list -> statement_list . statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    $end            reduce using rule 83 (startpoint -> statement_list .)
    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    statement                      shift and go to state 45
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 3

    (84) startpoint -> declaration_list . statement_list
    (74) declaration_list -> declaration_list . declaration
    (71) statement_list -> . statement
    (72) statement_list -> . statement_list statement
    (75) declaration -> . declaration_specifiers init_declarator_list ;
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (76) declaration_specifiers -> . UD
    (77) declaration_specifiers -> . D
    (78) declaration_specifiers -> . bit
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    UD              shift and go to state 18
    D               shift and go to state 19
    bit             shift and go to state 20
    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    statement_list                 shift and go to state 46
    declaration                    shift and go to state 47
    statement                      shift and go to state 4
    declaration_specifiers         shift and go to state 10
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 4

    (71) statement_list -> statement .

    ;               reduce using rule 71 (statement_list -> statement .)
    {               reduce using rule 71 (statement_list -> statement .)
    WHILE           reduce using rule 71 (statement_list -> statement .)
    FOR             reduce using rule 71 (statement_list -> statement .)
    IF              reduce using rule 71 (statement_list -> statement .)
    -               reduce using rule 71 (statement_list -> statement .)
    !               reduce using rule 71 (statement_list -> statement .)
    *               reduce using rule 71 (statement_list -> statement .)
    &               reduce using rule 71 (statement_list -> statement .)
    INC_OP          reduce using rule 71 (statement_list -> statement .)
    DEC_OP          reduce using rule 71 (statement_list -> statement .)
    ~               reduce using rule 71 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 71 (statement_list -> statement .)
    CONSTANT        reduce using rule 71 (statement_list -> statement .)
    (               reduce using rule 71 (statement_list -> statement .)
    $end            reduce using rule 71 (statement_list -> statement .)
    }               reduce using rule 71 (statement_list -> statement .)


state 5

    (73) declaration_list -> declaration .

    UD              reduce using rule 73 (declaration_list -> declaration .)
    D               reduce using rule 73 (declaration_list -> declaration .)
    bit             reduce using rule 73 (declaration_list -> declaration .)
    ;               reduce using rule 73 (declaration_list -> declaration .)
    {               reduce using rule 73 (declaration_list -> declaration .)
    WHILE           reduce using rule 73 (declaration_list -> declaration .)
    FOR             reduce using rule 73 (declaration_list -> declaration .)
    IF              reduce using rule 73 (declaration_list -> declaration .)
    -               reduce using rule 73 (declaration_list -> declaration .)
    !               reduce using rule 73 (declaration_list -> declaration .)
    *               reduce using rule 73 (declaration_list -> declaration .)
    &               reduce using rule 73 (declaration_list -> declaration .)
    INC_OP          reduce using rule 73 (declaration_list -> declaration .)
    DEC_OP          reduce using rule 73 (declaration_list -> declaration .)
    ~               reduce using rule 73 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 73 (declaration_list -> declaration .)
    CONSTANT        reduce using rule 73 (declaration_list -> declaration .)
    (               reduce using rule 73 (declaration_list -> declaration .)
    }               reduce using rule 73 (declaration_list -> declaration .)


state 6

    (67) statement -> expression_statement .

    ;               reduce using rule 67 (statement -> expression_statement .)
    {               reduce using rule 67 (statement -> expression_statement .)
    WHILE           reduce using rule 67 (statement -> expression_statement .)
    FOR             reduce using rule 67 (statement -> expression_statement .)
    IF              reduce using rule 67 (statement -> expression_statement .)
    -               reduce using rule 67 (statement -> expression_statement .)
    !               reduce using rule 67 (statement -> expression_statement .)
    *               reduce using rule 67 (statement -> expression_statement .)
    &               reduce using rule 67 (statement -> expression_statement .)
    INC_OP          reduce using rule 67 (statement -> expression_statement .)
    DEC_OP          reduce using rule 67 (statement -> expression_statement .)
    ~               reduce using rule 67 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 67 (statement -> expression_statement .)
    CONSTANT        reduce using rule 67 (statement -> expression_statement .)
    (               reduce using rule 67 (statement -> expression_statement .)
    $end            reduce using rule 67 (statement -> expression_statement .)
    }               reduce using rule 67 (statement -> expression_statement .)
    ELSE            reduce using rule 67 (statement -> expression_statement .)


state 7

    (68) statement -> compound_statement .

    ;               reduce using rule 68 (statement -> compound_statement .)
    {               reduce using rule 68 (statement -> compound_statement .)
    WHILE           reduce using rule 68 (statement -> compound_statement .)
    FOR             reduce using rule 68 (statement -> compound_statement .)
    IF              reduce using rule 68 (statement -> compound_statement .)
    -               reduce using rule 68 (statement -> compound_statement .)
    !               reduce using rule 68 (statement -> compound_statement .)
    *               reduce using rule 68 (statement -> compound_statement .)
    &               reduce using rule 68 (statement -> compound_statement .)
    INC_OP          reduce using rule 68 (statement -> compound_statement .)
    DEC_OP          reduce using rule 68 (statement -> compound_statement .)
    ~               reduce using rule 68 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 68 (statement -> compound_statement .)
    CONSTANT        reduce using rule 68 (statement -> compound_statement .)
    (               reduce using rule 68 (statement -> compound_statement .)
    $end            reduce using rule 68 (statement -> compound_statement .)
    }               reduce using rule 68 (statement -> compound_statement .)
    ELSE            reduce using rule 68 (statement -> compound_statement .)


state 8

    (69) statement -> iteration_statement .

    ;               reduce using rule 69 (statement -> iteration_statement .)
    {               reduce using rule 69 (statement -> iteration_statement .)
    WHILE           reduce using rule 69 (statement -> iteration_statement .)
    FOR             reduce using rule 69 (statement -> iteration_statement .)
    IF              reduce using rule 69 (statement -> iteration_statement .)
    -               reduce using rule 69 (statement -> iteration_statement .)
    !               reduce using rule 69 (statement -> iteration_statement .)
    *               reduce using rule 69 (statement -> iteration_statement .)
    &               reduce using rule 69 (statement -> iteration_statement .)
    INC_OP          reduce using rule 69 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 69 (statement -> iteration_statement .)
    ~               reduce using rule 69 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 69 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 69 (statement -> iteration_statement .)
    (               reduce using rule 69 (statement -> iteration_statement .)
    $end            reduce using rule 69 (statement -> iteration_statement .)
    }               reduce using rule 69 (statement -> iteration_statement .)
    ELSE            reduce using rule 69 (statement -> iteration_statement .)


state 9

    (70) statement -> selection_statement .

    ;               reduce using rule 70 (statement -> selection_statement .)
    {               reduce using rule 70 (statement -> selection_statement .)
    WHILE           reduce using rule 70 (statement -> selection_statement .)
    FOR             reduce using rule 70 (statement -> selection_statement .)
    IF              reduce using rule 70 (statement -> selection_statement .)
    -               reduce using rule 70 (statement -> selection_statement .)
    !               reduce using rule 70 (statement -> selection_statement .)
    *               reduce using rule 70 (statement -> selection_statement .)
    &               reduce using rule 70 (statement -> selection_statement .)
    INC_OP          reduce using rule 70 (statement -> selection_statement .)
    DEC_OP          reduce using rule 70 (statement -> selection_statement .)
    ~               reduce using rule 70 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 70 (statement -> selection_statement .)
    CONSTANT        reduce using rule 70 (statement -> selection_statement .)
    (               reduce using rule 70 (statement -> selection_statement .)
    $end            reduce using rule 70 (statement -> selection_statement .)
    }               reduce using rule 70 (statement -> selection_statement .)
    ELSE            reduce using rule 70 (statement -> selection_statement .)


state 10

    (75) declaration -> declaration_specifiers . init_declarator_list ;
    (79) init_declarator_list -> . init_declarator
    (80) init_declarator_list -> . init_declarator_list , init_declarator
    (81) init_declarator -> . IDENTIFIER
    (82) init_declarator -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 50

    init_declarator_list           shift and go to state 48
    init_declarator                shift and go to state 49

state 11

    (57) expression_statement -> ; .

    ;               reduce using rule 57 (expression_statement -> ; .)
    {               reduce using rule 57 (expression_statement -> ; .)
    WHILE           reduce using rule 57 (expression_statement -> ; .)
    FOR             reduce using rule 57 (expression_statement -> ; .)
    IF              reduce using rule 57 (expression_statement -> ; .)
    -               reduce using rule 57 (expression_statement -> ; .)
    !               reduce using rule 57 (expression_statement -> ; .)
    *               reduce using rule 57 (expression_statement -> ; .)
    &               reduce using rule 57 (expression_statement -> ; .)
    INC_OP          reduce using rule 57 (expression_statement -> ; .)
    DEC_OP          reduce using rule 57 (expression_statement -> ; .)
    ~               reduce using rule 57 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 57 (expression_statement -> ; .)
    CONSTANT        reduce using rule 57 (expression_statement -> ; .)
    (               reduce using rule 57 (expression_statement -> ; .)
    $end            reduce using rule 57 (expression_statement -> ; .)
    }               reduce using rule 57 (expression_statement -> ; .)
    ELSE            reduce using rule 57 (expression_statement -> ; .)


state 12

    (58) expression_statement -> expression . ;

    ;               shift and go to state 51


state 13

    (63) compound_statement -> { . }
    (64) compound_statement -> { . statement_list }
    (65) compound_statement -> { . declaration_list }
    (66) compound_statement -> { . declaration_list statement_list }
    (71) statement_list -> . statement
    (72) statement_list -> . statement_list statement
    (73) declaration_list -> . declaration
    (74) declaration_list -> . declaration_list declaration
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (75) declaration -> . declaration_specifiers init_declarator_list ;
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (76) declaration_specifiers -> . UD
    (77) declaration_specifiers -> . D
    (78) declaration_specifiers -> . bit
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    }               shift and go to state 52
    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    UD              shift and go to state 18
    D               shift and go to state 19
    bit             shift and go to state 20
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    statement_list                 shift and go to state 53
    declaration_list               shift and go to state 54
    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    declaration_specifiers         shift and go to state 10
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 14

    (61) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 55


state 15

    (3) primary_expression -> ( . expression )
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 56
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 16

    (62) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement

    (               shift and go to state 57


state 17

    (59) selection_statement -> IF . ( expression ) statement
    (60) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 58


state 18

    (76) declaration_specifiers -> UD .

    IDENTIFIER      reduce using rule 76 (declaration_specifiers -> UD .)


state 19

    (77) declaration_specifiers -> D .

    IDENTIFIER      reduce using rule 77 (declaration_specifiers -> D .)


state 20

    (78) declaration_specifiers -> bit .

    IDENTIFIER      reduce using rule 78 (declaration_specifiers -> bit .)


state 21

    (54) expression -> conditional_expression .

    ;               reduce using rule 54 (expression -> conditional_expression .)
    )               reduce using rule 54 (expression -> conditional_expression .)
    :               reduce using rule 54 (expression -> conditional_expression .)
    ]               reduce using rule 54 (expression -> conditional_expression .)
    ,               reduce using rule 54 (expression -> conditional_expression .)


state 22

    (55) expression -> unary_expression . = conditional_expression
    (56) expression -> unary_expression . ADD_ASSIGN conditional_expression
    (21) multiplicative_expression -> unary_expression .

    =               shift and go to state 59
    ADD_ASSIGN      shift and go to state 60
    *               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    %               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LEFT_OP         reduce using rule 21 (multiplicative_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 21 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LE_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    GE_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    REL_OP          reduce using rule 21 (multiplicative_expression -> unary_expression .)
    EQ_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    NE_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    &               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ^               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    |               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LAND_OP         reduce using rule 21 (multiplicative_expression -> unary_expression .)
    IS              reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LOR_OP          reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ?               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    :               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 21 (multiplicative_expression -> unary_expression .)


state 23

    (52) conditional_expression -> logical_is_expression .
    (53) conditional_expression -> logical_is_expression . ? expression : conditional_expression

    ;               reduce using rule 52 (conditional_expression -> logical_is_expression .)
    )               reduce using rule 52 (conditional_expression -> logical_is_expression .)
    :               reduce using rule 52 (conditional_expression -> logical_is_expression .)
    ]               reduce using rule 52 (conditional_expression -> logical_is_expression .)
    ,               reduce using rule 52 (conditional_expression -> logical_is_expression .)
    ?               shift and go to state 61


state 24

    (11) unary_expression -> postfix_expression .
    (5) postfix_expression -> postfix_expression . [ expression ]
    (6) postfix_expression -> postfix_expression . [ expression : expression ]
    (7) postfix_expression -> postfix_expression . . IDENTIFIER
    (8) postfix_expression -> postfix_expression . ( )
    (9) postfix_expression -> postfix_expression . ( argument_expression_list )
    (10) postfix_expression -> postfix_expression . INC_OP

    =               reduce using rule 11 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 11 (unary_expression -> postfix_expression .)
    *               reduce using rule 11 (unary_expression -> postfix_expression .)
    /               reduce using rule 11 (unary_expression -> postfix_expression .)
    %               reduce using rule 11 (unary_expression -> postfix_expression .)
    +               reduce using rule 11 (unary_expression -> postfix_expression .)
    -               reduce using rule 11 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 11 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 11 (unary_expression -> postfix_expression .)
    <               reduce using rule 11 (unary_expression -> postfix_expression .)
    >               reduce using rule 11 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 11 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 11 (unary_expression -> postfix_expression .)
    REL_OP          reduce using rule 11 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 11 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 11 (unary_expression -> postfix_expression .)
    &               reduce using rule 11 (unary_expression -> postfix_expression .)
    ^               reduce using rule 11 (unary_expression -> postfix_expression .)
    |               reduce using rule 11 (unary_expression -> postfix_expression .)
    LAND_OP         reduce using rule 11 (unary_expression -> postfix_expression .)
    IS              reduce using rule 11 (unary_expression -> postfix_expression .)
    LOR_OP          reduce using rule 11 (unary_expression -> postfix_expression .)
    ?               reduce using rule 11 (unary_expression -> postfix_expression .)
    ;               reduce using rule 11 (unary_expression -> postfix_expression .)
    )               reduce using rule 11 (unary_expression -> postfix_expression .)
    :               reduce using rule 11 (unary_expression -> postfix_expression .)
    ]               reduce using rule 11 (unary_expression -> postfix_expression .)
    ,               reduce using rule 11 (unary_expression -> postfix_expression .)
    [               shift and go to state 62
    .               shift and go to state 63
    (               shift and go to state 64
    INC_OP          shift and go to state 65


state 25

    (12) unary_expression -> - . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 26

    (13) unary_expression -> ! . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 67
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 27

    (14) unary_expression -> * . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 68
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 28

    (15) unary_expression -> & . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 69
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 29

    (16) unary_expression -> INC_OP . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 30

    (17) unary_expression -> DEC_OP . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 71
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 31

    (18) unary_expression -> ~ . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 32

    (50) logical_is_expression -> logical_or_expression .
    (51) logical_is_expression -> logical_or_expression . IS logical_or_expression
    (49) logical_or_expression -> logical_or_expression . LOR_OP logical_and_expression

    ?               reduce using rule 50 (logical_is_expression -> logical_or_expression .)
    ;               reduce using rule 50 (logical_is_expression -> logical_or_expression .)
    )               reduce using rule 50 (logical_is_expression -> logical_or_expression .)
    :               reduce using rule 50 (logical_is_expression -> logical_or_expression .)
    ]               reduce using rule 50 (logical_is_expression -> logical_or_expression .)
    ,               reduce using rule 50 (logical_is_expression -> logical_or_expression .)
    IS              shift and go to state 73
    LOR_OP          shift and go to state 74


state 33

    (4) postfix_expression -> primary_expression .

    [               reduce using rule 4 (postfix_expression -> primary_expression .)
    .               reduce using rule 4 (postfix_expression -> primary_expression .)
    (               reduce using rule 4 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 4 (postfix_expression -> primary_expression .)
    =               reduce using rule 4 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 4 (postfix_expression -> primary_expression .)
    *               reduce using rule 4 (postfix_expression -> primary_expression .)
    /               reduce using rule 4 (postfix_expression -> primary_expression .)
    %               reduce using rule 4 (postfix_expression -> primary_expression .)
    +               reduce using rule 4 (postfix_expression -> primary_expression .)
    -               reduce using rule 4 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 4 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 4 (postfix_expression -> primary_expression .)
    <               reduce using rule 4 (postfix_expression -> primary_expression .)
    >               reduce using rule 4 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 4 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 4 (postfix_expression -> primary_expression .)
    REL_OP          reduce using rule 4 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 4 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 4 (postfix_expression -> primary_expression .)
    &               reduce using rule 4 (postfix_expression -> primary_expression .)
    ^               reduce using rule 4 (postfix_expression -> primary_expression .)
    |               reduce using rule 4 (postfix_expression -> primary_expression .)
    LAND_OP         reduce using rule 4 (postfix_expression -> primary_expression .)
    IS              reduce using rule 4 (postfix_expression -> primary_expression .)
    LOR_OP          reduce using rule 4 (postfix_expression -> primary_expression .)
    ?               reduce using rule 4 (postfix_expression -> primary_expression .)
    ;               reduce using rule 4 (postfix_expression -> primary_expression .)
    )               reduce using rule 4 (postfix_expression -> primary_expression .)
    :               reduce using rule 4 (postfix_expression -> primary_expression .)
    ]               reduce using rule 4 (postfix_expression -> primary_expression .)
    ,               reduce using rule 4 (postfix_expression -> primary_expression .)


state 34

    (1) primary_expression -> IDENTIFIER .

    [               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    REL_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LAND_OP         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    IS              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LOR_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    )               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    :               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ]               reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 1 (primary_expression -> IDENTIFIER .)


state 35

    (48) logical_or_expression -> logical_and_expression .
    (47) logical_and_expression -> logical_and_expression . LAND_OP inclusive_or_expression

    IS              reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    LOR_OP          reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    ?               reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 48 (logical_or_expression -> logical_and_expression .)
    LAND_OP         shift and go to state 75


state 36

    (2) primary_expression -> CONSTANT .

    [               reduce using rule 2 (primary_expression -> CONSTANT .)
    .               reduce using rule 2 (primary_expression -> CONSTANT .)
    (               reduce using rule 2 (primary_expression -> CONSTANT .)
    INC_OP          reduce using rule 2 (primary_expression -> CONSTANT .)
    =               reduce using rule 2 (primary_expression -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    *               reduce using rule 2 (primary_expression -> CONSTANT .)
    /               reduce using rule 2 (primary_expression -> CONSTANT .)
    %               reduce using rule 2 (primary_expression -> CONSTANT .)
    +               reduce using rule 2 (primary_expression -> CONSTANT .)
    -               reduce using rule 2 (primary_expression -> CONSTANT .)
    LEFT_OP         reduce using rule 2 (primary_expression -> CONSTANT .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> CONSTANT .)
    <               reduce using rule 2 (primary_expression -> CONSTANT .)
    >               reduce using rule 2 (primary_expression -> CONSTANT .)
    LE_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    GE_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    REL_OP          reduce using rule 2 (primary_expression -> CONSTANT .)
    EQ_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    NE_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    &               reduce using rule 2 (primary_expression -> CONSTANT .)
    ^               reduce using rule 2 (primary_expression -> CONSTANT .)
    |               reduce using rule 2 (primary_expression -> CONSTANT .)
    LAND_OP         reduce using rule 2 (primary_expression -> CONSTANT .)
    IS              reduce using rule 2 (primary_expression -> CONSTANT .)
    LOR_OP          reduce using rule 2 (primary_expression -> CONSTANT .)
    ?               reduce using rule 2 (primary_expression -> CONSTANT .)
    ;               reduce using rule 2 (primary_expression -> CONSTANT .)
    )               reduce using rule 2 (primary_expression -> CONSTANT .)
    :               reduce using rule 2 (primary_expression -> CONSTANT .)
    ]               reduce using rule 2 (primary_expression -> CONSTANT .)
    ,               reduce using rule 2 (primary_expression -> CONSTANT .)


state 37

    (46) logical_and_expression -> inclusive_or_expression .
    (45) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    LAND_OP         reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    IS              reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    LOR_OP          reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 46 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 76


state 38

    (44) inclusive_or_expression -> exclusive_or_expression .
    (43) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    LAND_OP         reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    IS              reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    LOR_OP          reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 77


state 39

    (42) exclusive_or_expression -> and_expression .
    (41) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    LAND_OP         reduce using rule 42 (exclusive_or_expression -> and_expression .)
    IS              reduce using rule 42 (exclusive_or_expression -> and_expression .)
    LOR_OP          reduce using rule 42 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 42 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 78


state 40

    (40) and_expression -> equality_expression .
    (38) equality_expression -> equality_expression . EQ_OP relational_expression
    (39) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 40 (and_expression -> equality_expression .)
    ^               reduce using rule 40 (and_expression -> equality_expression .)
    |               reduce using rule 40 (and_expression -> equality_expression .)
    LAND_OP         reduce using rule 40 (and_expression -> equality_expression .)
    IS              reduce using rule 40 (and_expression -> equality_expression .)
    LOR_OP          reduce using rule 40 (and_expression -> equality_expression .)
    ?               reduce using rule 40 (and_expression -> equality_expression .)
    ;               reduce using rule 40 (and_expression -> equality_expression .)
    )               reduce using rule 40 (and_expression -> equality_expression .)
    :               reduce using rule 40 (and_expression -> equality_expression .)
    ]               reduce using rule 40 (and_expression -> equality_expression .)
    ,               reduce using rule 40 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 79
    NE_OP           shift and go to state 80


state 41

    (37) equality_expression -> relational_expression .
    (32) relational_expression -> relational_expression . < shift_expression
    (33) relational_expression -> relational_expression . > shift_expression
    (34) relational_expression -> relational_expression . LE_OP shift_expression
    (35) relational_expression -> relational_expression . GE_OP shift_expression
    (36) relational_expression -> relational_expression . REL_OP shift_expression

    EQ_OP           reduce using rule 37 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 37 (equality_expression -> relational_expression .)
    &               reduce using rule 37 (equality_expression -> relational_expression .)
    ^               reduce using rule 37 (equality_expression -> relational_expression .)
    |               reduce using rule 37 (equality_expression -> relational_expression .)
    LAND_OP         reduce using rule 37 (equality_expression -> relational_expression .)
    IS              reduce using rule 37 (equality_expression -> relational_expression .)
    LOR_OP          reduce using rule 37 (equality_expression -> relational_expression .)
    ?               reduce using rule 37 (equality_expression -> relational_expression .)
    ;               reduce using rule 37 (equality_expression -> relational_expression .)
    )               reduce using rule 37 (equality_expression -> relational_expression .)
    :               reduce using rule 37 (equality_expression -> relational_expression .)
    ]               reduce using rule 37 (equality_expression -> relational_expression .)
    ,               reduce using rule 37 (equality_expression -> relational_expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LE_OP           shift and go to state 83
    GE_OP           shift and go to state 84
    REL_OP          shift and go to state 85


state 42

    (31) relational_expression -> shift_expression .
    (29) shift_expression -> shift_expression . LEFT_OP additive_expression
    (30) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 31 (relational_expression -> shift_expression .)
    >               reduce using rule 31 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 31 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 31 (relational_expression -> shift_expression .)
    REL_OP          reduce using rule 31 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 31 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 31 (relational_expression -> shift_expression .)
    &               reduce using rule 31 (relational_expression -> shift_expression .)
    ^               reduce using rule 31 (relational_expression -> shift_expression .)
    |               reduce using rule 31 (relational_expression -> shift_expression .)
    LAND_OP         reduce using rule 31 (relational_expression -> shift_expression .)
    IS              reduce using rule 31 (relational_expression -> shift_expression .)
    LOR_OP          reduce using rule 31 (relational_expression -> shift_expression .)
    ?               reduce using rule 31 (relational_expression -> shift_expression .)
    ;               reduce using rule 31 (relational_expression -> shift_expression .)
    )               reduce using rule 31 (relational_expression -> shift_expression .)
    :               reduce using rule 31 (relational_expression -> shift_expression .)
    ]               reduce using rule 31 (relational_expression -> shift_expression .)
    ,               reduce using rule 31 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 86
    RIGHT_OP        shift and go to state 87


state 43

    (28) shift_expression -> additive_expression .
    (26) additive_expression -> additive_expression . + multiplicative_expression
    (27) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 28 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 28 (shift_expression -> additive_expression .)
    <               reduce using rule 28 (shift_expression -> additive_expression .)
    >               reduce using rule 28 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 28 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 28 (shift_expression -> additive_expression .)
    REL_OP          reduce using rule 28 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 28 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 28 (shift_expression -> additive_expression .)
    &               reduce using rule 28 (shift_expression -> additive_expression .)
    ^               reduce using rule 28 (shift_expression -> additive_expression .)
    |               reduce using rule 28 (shift_expression -> additive_expression .)
    LAND_OP         reduce using rule 28 (shift_expression -> additive_expression .)
    IS              reduce using rule 28 (shift_expression -> additive_expression .)
    LOR_OP          reduce using rule 28 (shift_expression -> additive_expression .)
    ?               reduce using rule 28 (shift_expression -> additive_expression .)
    ;               reduce using rule 28 (shift_expression -> additive_expression .)
    )               reduce using rule 28 (shift_expression -> additive_expression .)
    :               reduce using rule 28 (shift_expression -> additive_expression .)
    ]               reduce using rule 28 (shift_expression -> additive_expression .)
    ,               reduce using rule 28 (shift_expression -> additive_expression .)
    +               shift and go to state 88
    -               shift and go to state 89


state 44

    (25) additive_expression -> multiplicative_expression .
    (22) multiplicative_expression -> multiplicative_expression . * unary_expression
    (23) multiplicative_expression -> multiplicative_expression . / unary_expression
    (24) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 25 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 25 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 25 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 25 (additive_expression -> multiplicative_expression .)
    REL_OP          reduce using rule 25 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 25 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 25 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    LAND_OP         reduce using rule 25 (additive_expression -> multiplicative_expression .)
    IS              reduce using rule 25 (additive_expression -> multiplicative_expression .)
    LOR_OP          reduce using rule 25 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 25 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 90
    /               shift and go to state 91
    %               shift and go to state 92


state 45

    (72) statement_list -> statement_list statement .

    ;               reduce using rule 72 (statement_list -> statement_list statement .)
    {               reduce using rule 72 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 72 (statement_list -> statement_list statement .)
    FOR             reduce using rule 72 (statement_list -> statement_list statement .)
    IF              reduce using rule 72 (statement_list -> statement_list statement .)
    -               reduce using rule 72 (statement_list -> statement_list statement .)
    !               reduce using rule 72 (statement_list -> statement_list statement .)
    *               reduce using rule 72 (statement_list -> statement_list statement .)
    &               reduce using rule 72 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 72 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 72 (statement_list -> statement_list statement .)
    ~               reduce using rule 72 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 72 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 72 (statement_list -> statement_list statement .)
    (               reduce using rule 72 (statement_list -> statement_list statement .)
    $end            reduce using rule 72 (statement_list -> statement_list statement .)
    }               reduce using rule 72 (statement_list -> statement_list statement .)


state 46

    (84) startpoint -> declaration_list statement_list .
    (72) statement_list -> statement_list . statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    $end            reduce using rule 84 (startpoint -> declaration_list statement_list .)
    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    statement                      shift and go to state 45
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 47

    (74) declaration_list -> declaration_list declaration .

    UD              reduce using rule 74 (declaration_list -> declaration_list declaration .)
    D               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    bit             reduce using rule 74 (declaration_list -> declaration_list declaration .)
    ;               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    {               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 74 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 74 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 74 (declaration_list -> declaration_list declaration .)
    -               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    !               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    *               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    &               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    INC_OP          reduce using rule 74 (declaration_list -> declaration_list declaration .)
    DEC_OP          reduce using rule 74 (declaration_list -> declaration_list declaration .)
    ~               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 74 (declaration_list -> declaration_list declaration .)
    CONSTANT        reduce using rule 74 (declaration_list -> declaration_list declaration .)
    (               reduce using rule 74 (declaration_list -> declaration_list declaration .)
    }               reduce using rule 74 (declaration_list -> declaration_list declaration .)


state 48

    (75) declaration -> declaration_specifiers init_declarator_list . ;
    (80) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 93
    ,               shift and go to state 94


state 49

    (79) init_declarator_list -> init_declarator .

    ;               reduce using rule 79 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 79 (init_declarator_list -> init_declarator .)


state 50

    (81) init_declarator -> IDENTIFIER .
    (82) init_declarator -> IDENTIFIER . = expression

    ;               reduce using rule 81 (init_declarator -> IDENTIFIER .)
    ,               reduce using rule 81 (init_declarator -> IDENTIFIER .)
    =               shift and go to state 95


state 51

    (58) expression_statement -> expression ; .

    ;               reduce using rule 58 (expression_statement -> expression ; .)
    {               reduce using rule 58 (expression_statement -> expression ; .)
    WHILE           reduce using rule 58 (expression_statement -> expression ; .)
    FOR             reduce using rule 58 (expression_statement -> expression ; .)
    IF              reduce using rule 58 (expression_statement -> expression ; .)
    -               reduce using rule 58 (expression_statement -> expression ; .)
    !               reduce using rule 58 (expression_statement -> expression ; .)
    *               reduce using rule 58 (expression_statement -> expression ; .)
    &               reduce using rule 58 (expression_statement -> expression ; .)
    INC_OP          reduce using rule 58 (expression_statement -> expression ; .)
    DEC_OP          reduce using rule 58 (expression_statement -> expression ; .)
    ~               reduce using rule 58 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 58 (expression_statement -> expression ; .)
    CONSTANT        reduce using rule 58 (expression_statement -> expression ; .)
    (               reduce using rule 58 (expression_statement -> expression ; .)
    $end            reduce using rule 58 (expression_statement -> expression ; .)
    }               reduce using rule 58 (expression_statement -> expression ; .)
    ELSE            reduce using rule 58 (expression_statement -> expression ; .)


state 52

    (63) compound_statement -> { } .

    ;               reduce using rule 63 (compound_statement -> { } .)
    {               reduce using rule 63 (compound_statement -> { } .)
    WHILE           reduce using rule 63 (compound_statement -> { } .)
    FOR             reduce using rule 63 (compound_statement -> { } .)
    IF              reduce using rule 63 (compound_statement -> { } .)
    -               reduce using rule 63 (compound_statement -> { } .)
    !               reduce using rule 63 (compound_statement -> { } .)
    *               reduce using rule 63 (compound_statement -> { } .)
    &               reduce using rule 63 (compound_statement -> { } .)
    INC_OP          reduce using rule 63 (compound_statement -> { } .)
    DEC_OP          reduce using rule 63 (compound_statement -> { } .)
    ~               reduce using rule 63 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 63 (compound_statement -> { } .)
    CONSTANT        reduce using rule 63 (compound_statement -> { } .)
    (               reduce using rule 63 (compound_statement -> { } .)
    $end            reduce using rule 63 (compound_statement -> { } .)
    }               reduce using rule 63 (compound_statement -> { } .)
    ELSE            reduce using rule 63 (compound_statement -> { } .)


state 53

    (64) compound_statement -> { statement_list . }
    (72) statement_list -> statement_list . statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    }               shift and go to state 96
    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    statement                      shift and go to state 45
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 54

    (65) compound_statement -> { declaration_list . }
    (66) compound_statement -> { declaration_list . statement_list }
    (74) declaration_list -> declaration_list . declaration
    (71) statement_list -> . statement
    (72) statement_list -> . statement_list statement
    (75) declaration -> . declaration_specifiers init_declarator_list ;
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (76) declaration_specifiers -> . UD
    (77) declaration_specifiers -> . D
    (78) declaration_specifiers -> . bit
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    }               shift and go to state 97
    UD              shift and go to state 18
    D               shift and go to state 19
    bit             shift and go to state 20
    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    statement_list                 shift and go to state 98
    declaration                    shift and go to state 47
    statement                      shift and go to state 4
    declaration_specifiers         shift and go to state 10
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 55

    (61) iteration_statement -> WHILE ( . expression ) statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 99
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 56

    (3) primary_expression -> ( expression . )

    )               shift and go to state 100


state 57

    (62) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    ;               shift and go to state 11
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression_statement           shift and go to state 101
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 58

    (59) selection_statement -> IF ( . expression ) statement
    (60) selection_statement -> IF ( . expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 102
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 59

    (55) expression -> unary_expression = . conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 103
    conditional_expression         shift and go to state 104
    logical_is_expression          shift and go to state 23
    logical_or_expression          shift and go to state 32
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 60

    (56) expression -> unary_expression ADD_ASSIGN . conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 103
    conditional_expression         shift and go to state 105
    logical_is_expression          shift and go to state 23
    logical_or_expression          shift and go to state 32
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 61

    (53) conditional_expression -> logical_is_expression ? . expression : conditional_expression
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    logical_is_expression          shift and go to state 23
    expression                     shift and go to state 106
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 62

    (5) postfix_expression -> postfix_expression [ . expression ]
    (6) postfix_expression -> postfix_expression [ . expression : expression ]
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    postfix_expression             shift and go to state 24
    expression                     shift and go to state 107
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 63

    (7) postfix_expression -> postfix_expression . . IDENTIFIER

    IDENTIFIER      shift and go to state 108


state 64

    (8) postfix_expression -> postfix_expression ( . )
    (9) postfix_expression -> postfix_expression ( . argument_expression_list )
    (19) argument_expression_list -> . expression
    (20) argument_expression_list -> . argument_expression_list , expression
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    )               shift and go to state 109
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    postfix_expression             shift and go to state 24
    argument_expression_list       shift and go to state 110
    expression                     shift and go to state 111
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 65

    (10) postfix_expression -> postfix_expression INC_OP .

    [               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    .               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    (               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    =               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    *               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    /               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    %               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    +               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    -               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    <               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    >               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    REL_OP          reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    &               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    ^               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    |               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    LAND_OP         reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    IS              reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    LOR_OP          reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    ?               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    ;               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    )               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    :               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    ]               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)
    ,               reduce using rule 10 (postfix_expression -> postfix_expression INC_OP .)


state 66

    (12) unary_expression -> - unary_expression .

    =               reduce using rule 12 (unary_expression -> - unary_expression .)
    ADD_ASSIGN      reduce using rule 12 (unary_expression -> - unary_expression .)
    *               reduce using rule 12 (unary_expression -> - unary_expression .)
    /               reduce using rule 12 (unary_expression -> - unary_expression .)
    %               reduce using rule 12 (unary_expression -> - unary_expression .)
    +               reduce using rule 12 (unary_expression -> - unary_expression .)
    -               reduce using rule 12 (unary_expression -> - unary_expression .)
    LEFT_OP         reduce using rule 12 (unary_expression -> - unary_expression .)
    RIGHT_OP        reduce using rule 12 (unary_expression -> - unary_expression .)
    <               reduce using rule 12 (unary_expression -> - unary_expression .)
    >               reduce using rule 12 (unary_expression -> - unary_expression .)
    LE_OP           reduce using rule 12 (unary_expression -> - unary_expression .)
    GE_OP           reduce using rule 12 (unary_expression -> - unary_expression .)
    REL_OP          reduce using rule 12 (unary_expression -> - unary_expression .)
    EQ_OP           reduce using rule 12 (unary_expression -> - unary_expression .)
    NE_OP           reduce using rule 12 (unary_expression -> - unary_expression .)
    &               reduce using rule 12 (unary_expression -> - unary_expression .)
    ^               reduce using rule 12 (unary_expression -> - unary_expression .)
    |               reduce using rule 12 (unary_expression -> - unary_expression .)
    LAND_OP         reduce using rule 12 (unary_expression -> - unary_expression .)
    IS              reduce using rule 12 (unary_expression -> - unary_expression .)
    LOR_OP          reduce using rule 12 (unary_expression -> - unary_expression .)
    ?               reduce using rule 12 (unary_expression -> - unary_expression .)
    ;               reduce using rule 12 (unary_expression -> - unary_expression .)
    )               reduce using rule 12 (unary_expression -> - unary_expression .)
    :               reduce using rule 12 (unary_expression -> - unary_expression .)
    ]               reduce using rule 12 (unary_expression -> - unary_expression .)
    ,               reduce using rule 12 (unary_expression -> - unary_expression .)


state 67

    (13) unary_expression -> ! unary_expression .

    =               reduce using rule 13 (unary_expression -> ! unary_expression .)
    ADD_ASSIGN      reduce using rule 13 (unary_expression -> ! unary_expression .)
    *               reduce using rule 13 (unary_expression -> ! unary_expression .)
    /               reduce using rule 13 (unary_expression -> ! unary_expression .)
    %               reduce using rule 13 (unary_expression -> ! unary_expression .)
    +               reduce using rule 13 (unary_expression -> ! unary_expression .)
    -               reduce using rule 13 (unary_expression -> ! unary_expression .)
    LEFT_OP         reduce using rule 13 (unary_expression -> ! unary_expression .)
    RIGHT_OP        reduce using rule 13 (unary_expression -> ! unary_expression .)
    <               reduce using rule 13 (unary_expression -> ! unary_expression .)
    >               reduce using rule 13 (unary_expression -> ! unary_expression .)
    LE_OP           reduce using rule 13 (unary_expression -> ! unary_expression .)
    GE_OP           reduce using rule 13 (unary_expression -> ! unary_expression .)
    REL_OP          reduce using rule 13 (unary_expression -> ! unary_expression .)
    EQ_OP           reduce using rule 13 (unary_expression -> ! unary_expression .)
    NE_OP           reduce using rule 13 (unary_expression -> ! unary_expression .)
    &               reduce using rule 13 (unary_expression -> ! unary_expression .)
    ^               reduce using rule 13 (unary_expression -> ! unary_expression .)
    |               reduce using rule 13 (unary_expression -> ! unary_expression .)
    LAND_OP         reduce using rule 13 (unary_expression -> ! unary_expression .)
    IS              reduce using rule 13 (unary_expression -> ! unary_expression .)
    LOR_OP          reduce using rule 13 (unary_expression -> ! unary_expression .)
    ?               reduce using rule 13 (unary_expression -> ! unary_expression .)
    ;               reduce using rule 13 (unary_expression -> ! unary_expression .)
    )               reduce using rule 13 (unary_expression -> ! unary_expression .)
    :               reduce using rule 13 (unary_expression -> ! unary_expression .)
    ]               reduce using rule 13 (unary_expression -> ! unary_expression .)
    ,               reduce using rule 13 (unary_expression -> ! unary_expression .)


state 68

    (14) unary_expression -> * unary_expression .

    =               reduce using rule 14 (unary_expression -> * unary_expression .)
    ADD_ASSIGN      reduce using rule 14 (unary_expression -> * unary_expression .)
    *               reduce using rule 14 (unary_expression -> * unary_expression .)
    /               reduce using rule 14 (unary_expression -> * unary_expression .)
    %               reduce using rule 14 (unary_expression -> * unary_expression .)
    +               reduce using rule 14 (unary_expression -> * unary_expression .)
    -               reduce using rule 14 (unary_expression -> * unary_expression .)
    LEFT_OP         reduce using rule 14 (unary_expression -> * unary_expression .)
    RIGHT_OP        reduce using rule 14 (unary_expression -> * unary_expression .)
    <               reduce using rule 14 (unary_expression -> * unary_expression .)
    >               reduce using rule 14 (unary_expression -> * unary_expression .)
    LE_OP           reduce using rule 14 (unary_expression -> * unary_expression .)
    GE_OP           reduce using rule 14 (unary_expression -> * unary_expression .)
    REL_OP          reduce using rule 14 (unary_expression -> * unary_expression .)
    EQ_OP           reduce using rule 14 (unary_expression -> * unary_expression .)
    NE_OP           reduce using rule 14 (unary_expression -> * unary_expression .)
    &               reduce using rule 14 (unary_expression -> * unary_expression .)
    ^               reduce using rule 14 (unary_expression -> * unary_expression .)
    |               reduce using rule 14 (unary_expression -> * unary_expression .)
    LAND_OP         reduce using rule 14 (unary_expression -> * unary_expression .)
    IS              reduce using rule 14 (unary_expression -> * unary_expression .)
    LOR_OP          reduce using rule 14 (unary_expression -> * unary_expression .)
    ?               reduce using rule 14 (unary_expression -> * unary_expression .)
    ;               reduce using rule 14 (unary_expression -> * unary_expression .)
    )               reduce using rule 14 (unary_expression -> * unary_expression .)
    :               reduce using rule 14 (unary_expression -> * unary_expression .)
    ]               reduce using rule 14 (unary_expression -> * unary_expression .)
    ,               reduce using rule 14 (unary_expression -> * unary_expression .)


state 69

    (15) unary_expression -> & unary_expression .

    =               reduce using rule 15 (unary_expression -> & unary_expression .)
    ADD_ASSIGN      reduce using rule 15 (unary_expression -> & unary_expression .)
    *               reduce using rule 15 (unary_expression -> & unary_expression .)
    /               reduce using rule 15 (unary_expression -> & unary_expression .)
    %               reduce using rule 15 (unary_expression -> & unary_expression .)
    +               reduce using rule 15 (unary_expression -> & unary_expression .)
    -               reduce using rule 15 (unary_expression -> & unary_expression .)
    LEFT_OP         reduce using rule 15 (unary_expression -> & unary_expression .)
    RIGHT_OP        reduce using rule 15 (unary_expression -> & unary_expression .)
    <               reduce using rule 15 (unary_expression -> & unary_expression .)
    >               reduce using rule 15 (unary_expression -> & unary_expression .)
    LE_OP           reduce using rule 15 (unary_expression -> & unary_expression .)
    GE_OP           reduce using rule 15 (unary_expression -> & unary_expression .)
    REL_OP          reduce using rule 15 (unary_expression -> & unary_expression .)
    EQ_OP           reduce using rule 15 (unary_expression -> & unary_expression .)
    NE_OP           reduce using rule 15 (unary_expression -> & unary_expression .)
    &               reduce using rule 15 (unary_expression -> & unary_expression .)
    ^               reduce using rule 15 (unary_expression -> & unary_expression .)
    |               reduce using rule 15 (unary_expression -> & unary_expression .)
    LAND_OP         reduce using rule 15 (unary_expression -> & unary_expression .)
    IS              reduce using rule 15 (unary_expression -> & unary_expression .)
    LOR_OP          reduce using rule 15 (unary_expression -> & unary_expression .)
    ?               reduce using rule 15 (unary_expression -> & unary_expression .)
    ;               reduce using rule 15 (unary_expression -> & unary_expression .)
    )               reduce using rule 15 (unary_expression -> & unary_expression .)
    :               reduce using rule 15 (unary_expression -> & unary_expression .)
    ]               reduce using rule 15 (unary_expression -> & unary_expression .)
    ,               reduce using rule 15 (unary_expression -> & unary_expression .)


state 70

    (16) unary_expression -> INC_OP unary_expression .

    =               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    *               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    /               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    %               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    +               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    -               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    <               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    >               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    REL_OP          reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    &               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ^               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    |               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LAND_OP         reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    IS              reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LOR_OP          reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ?               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ;               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    )               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    :               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ]               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ,               reduce using rule 16 (unary_expression -> INC_OP unary_expression .)


state 71

    (17) unary_expression -> DEC_OP unary_expression .

    =               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    *               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    /               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    %               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    +               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    -               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    <               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    >               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    REL_OP          reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    &               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ^               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    |               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LAND_OP         reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    IS              reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LOR_OP          reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ?               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ;               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    )               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    :               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ]               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ,               reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)


state 72

    (18) unary_expression -> ~ unary_expression .

    =               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    ADD_ASSIGN      reduce using rule 18 (unary_expression -> ~ unary_expression .)
    *               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    /               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    %               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    +               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    -               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    LEFT_OP         reduce using rule 18 (unary_expression -> ~ unary_expression .)
    RIGHT_OP        reduce using rule 18 (unary_expression -> ~ unary_expression .)
    <               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    >               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    LE_OP           reduce using rule 18 (unary_expression -> ~ unary_expression .)
    GE_OP           reduce using rule 18 (unary_expression -> ~ unary_expression .)
    REL_OP          reduce using rule 18 (unary_expression -> ~ unary_expression .)
    EQ_OP           reduce using rule 18 (unary_expression -> ~ unary_expression .)
    NE_OP           reduce using rule 18 (unary_expression -> ~ unary_expression .)
    &               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    ^               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    |               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    LAND_OP         reduce using rule 18 (unary_expression -> ~ unary_expression .)
    IS              reduce using rule 18 (unary_expression -> ~ unary_expression .)
    LOR_OP          reduce using rule 18 (unary_expression -> ~ unary_expression .)
    ?               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    ;               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    )               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    :               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    ]               reduce using rule 18 (unary_expression -> ~ unary_expression .)
    ,               reduce using rule 18 (unary_expression -> ~ unary_expression .)


state 73

    (51) logical_is_expression -> logical_or_expression IS . logical_or_expression
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    logical_or_expression          shift and go to state 112
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 74

    (49) logical_or_expression -> logical_or_expression LOR_OP . logical_and_expression
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    logical_and_expression         shift and go to state 113
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 75

    (47) logical_and_expression -> logical_and_expression LAND_OP . inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    inclusive_or_expression        shift and go to state 114
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 76

    (45) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    exclusive_or_expression        shift and go to state 115
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 77

    (43) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    and_expression                 shift and go to state 116
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 78

    (41) and_expression -> and_expression & . equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    equality_expression            shift and go to state 117
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 79

    (38) equality_expression -> equality_expression EQ_OP . relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    relational_expression          shift and go to state 118
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 80

    (39) equality_expression -> equality_expression NE_OP . relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 81

    (32) relational_expression -> relational_expression < . shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    shift_expression               shift and go to state 120
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 82

    (33) relational_expression -> relational_expression > . shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    shift_expression               shift and go to state 121
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 83

    (34) relational_expression -> relational_expression LE_OP . shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    shift_expression               shift and go to state 122
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 84

    (35) relational_expression -> relational_expression GE_OP . shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 85

    (36) relational_expression -> relational_expression REL_OP . shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    shift_expression               shift and go to state 124
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 86

    (29) shift_expression -> shift_expression LEFT_OP . additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    additive_expression            shift and go to state 125
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 87

    (30) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    additive_expression            shift and go to state 126
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 88

    (26) additive_expression -> additive_expression + . multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    multiplicative_expression      shift and go to state 127
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 89

    (27) additive_expression -> additive_expression - . multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    multiplicative_expression      shift and go to state 128
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 90

    (22) multiplicative_expression -> multiplicative_expression * . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 129
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 91

    (23) multiplicative_expression -> multiplicative_expression / . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 92

    (24) multiplicative_expression -> multiplicative_expression % . unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 93

    (75) declaration -> declaration_specifiers init_declarator_list ; .

    UD              reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    D               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    bit             reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_OP          reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC_OP          reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    IDENTIFIER      reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANT        reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 75 (declaration -> declaration_specifiers init_declarator_list ; .)


state 94

    (80) init_declarator_list -> init_declarator_list , . init_declarator
    (81) init_declarator -> . IDENTIFIER
    (82) init_declarator -> . IDENTIFIER = expression

    IDENTIFIER      shift and go to state 50

    init_declarator                shift and go to state 132

state 95

    (82) init_declarator -> IDENTIFIER = . expression
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 133
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 96

    (64) compound_statement -> { statement_list } .

    ;               reduce using rule 64 (compound_statement -> { statement_list } .)
    {               reduce using rule 64 (compound_statement -> { statement_list } .)
    WHILE           reduce using rule 64 (compound_statement -> { statement_list } .)
    FOR             reduce using rule 64 (compound_statement -> { statement_list } .)
    IF              reduce using rule 64 (compound_statement -> { statement_list } .)
    -               reduce using rule 64 (compound_statement -> { statement_list } .)
    !               reduce using rule 64 (compound_statement -> { statement_list } .)
    *               reduce using rule 64 (compound_statement -> { statement_list } .)
    &               reduce using rule 64 (compound_statement -> { statement_list } .)
    INC_OP          reduce using rule 64 (compound_statement -> { statement_list } .)
    DEC_OP          reduce using rule 64 (compound_statement -> { statement_list } .)
    ~               reduce using rule 64 (compound_statement -> { statement_list } .)
    IDENTIFIER      reduce using rule 64 (compound_statement -> { statement_list } .)
    CONSTANT        reduce using rule 64 (compound_statement -> { statement_list } .)
    (               reduce using rule 64 (compound_statement -> { statement_list } .)
    $end            reduce using rule 64 (compound_statement -> { statement_list } .)
    }               reduce using rule 64 (compound_statement -> { statement_list } .)
    ELSE            reduce using rule 64 (compound_statement -> { statement_list } .)


state 97

    (65) compound_statement -> { declaration_list } .

    ;               reduce using rule 65 (compound_statement -> { declaration_list } .)
    {               reduce using rule 65 (compound_statement -> { declaration_list } .)
    WHILE           reduce using rule 65 (compound_statement -> { declaration_list } .)
    FOR             reduce using rule 65 (compound_statement -> { declaration_list } .)
    IF              reduce using rule 65 (compound_statement -> { declaration_list } .)
    -               reduce using rule 65 (compound_statement -> { declaration_list } .)
    !               reduce using rule 65 (compound_statement -> { declaration_list } .)
    *               reduce using rule 65 (compound_statement -> { declaration_list } .)
    &               reduce using rule 65 (compound_statement -> { declaration_list } .)
    INC_OP          reduce using rule 65 (compound_statement -> { declaration_list } .)
    DEC_OP          reduce using rule 65 (compound_statement -> { declaration_list } .)
    ~               reduce using rule 65 (compound_statement -> { declaration_list } .)
    IDENTIFIER      reduce using rule 65 (compound_statement -> { declaration_list } .)
    CONSTANT        reduce using rule 65 (compound_statement -> { declaration_list } .)
    (               reduce using rule 65 (compound_statement -> { declaration_list } .)
    $end            reduce using rule 65 (compound_statement -> { declaration_list } .)
    }               reduce using rule 65 (compound_statement -> { declaration_list } .)
    ELSE            reduce using rule 65 (compound_statement -> { declaration_list } .)


state 98

    (66) compound_statement -> { declaration_list statement_list . }
    (72) statement_list -> statement_list . statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    }               shift and go to state 134
    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    statement                      shift and go to state 45
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 99

    (61) iteration_statement -> WHILE ( expression . ) statement

    )               shift and go to state 135


state 100

    (3) primary_expression -> ( expression ) .

    [               reduce using rule 3 (primary_expression -> ( expression ) .)
    .               reduce using rule 3 (primary_expression -> ( expression ) .)
    (               reduce using rule 3 (primary_expression -> ( expression ) .)
    INC_OP          reduce using rule 3 (primary_expression -> ( expression ) .)
    =               reduce using rule 3 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> ( expression ) .)
    *               reduce using rule 3 (primary_expression -> ( expression ) .)
    /               reduce using rule 3 (primary_expression -> ( expression ) .)
    %               reduce using rule 3 (primary_expression -> ( expression ) .)
    +               reduce using rule 3 (primary_expression -> ( expression ) .)
    -               reduce using rule 3 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 3 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> ( expression ) .)
    <               reduce using rule 3 (primary_expression -> ( expression ) .)
    >               reduce using rule 3 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 3 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 3 (primary_expression -> ( expression ) .)
    REL_OP          reduce using rule 3 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 3 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 3 (primary_expression -> ( expression ) .)
    &               reduce using rule 3 (primary_expression -> ( expression ) .)
    ^               reduce using rule 3 (primary_expression -> ( expression ) .)
    |               reduce using rule 3 (primary_expression -> ( expression ) .)
    LAND_OP         reduce using rule 3 (primary_expression -> ( expression ) .)
    IS              reduce using rule 3 (primary_expression -> ( expression ) .)
    LOR_OP          reduce using rule 3 (primary_expression -> ( expression ) .)
    ?               reduce using rule 3 (primary_expression -> ( expression ) .)
    ;               reduce using rule 3 (primary_expression -> ( expression ) .)
    )               reduce using rule 3 (primary_expression -> ( expression ) .)
    :               reduce using rule 3 (primary_expression -> ( expression ) .)
    ]               reduce using rule 3 (primary_expression -> ( expression ) .)
    ,               reduce using rule 3 (primary_expression -> ( expression ) .)


state 101

    (62) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    ;               shift and go to state 11
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression_statement           shift and go to state 136
    expression                     shift and go to state 12
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 102

    (59) selection_statement -> IF ( expression . ) statement
    (60) selection_statement -> IF ( expression . ) statement ELSE statement

    )               shift and go to state 137


state 103

    (21) multiplicative_expression -> unary_expression .

    *               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    %               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LEFT_OP         reduce using rule 21 (multiplicative_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 21 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LE_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    GE_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    REL_OP          reduce using rule 21 (multiplicative_expression -> unary_expression .)
    EQ_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    NE_OP           reduce using rule 21 (multiplicative_expression -> unary_expression .)
    &               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ^               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    |               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LAND_OP         reduce using rule 21 (multiplicative_expression -> unary_expression .)
    IS              reduce using rule 21 (multiplicative_expression -> unary_expression .)
    LOR_OP          reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ?               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    :               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 21 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 21 (multiplicative_expression -> unary_expression .)


state 104

    (55) expression -> unary_expression = conditional_expression .

    ;               reduce using rule 55 (expression -> unary_expression = conditional_expression .)
    )               reduce using rule 55 (expression -> unary_expression = conditional_expression .)
    :               reduce using rule 55 (expression -> unary_expression = conditional_expression .)
    ]               reduce using rule 55 (expression -> unary_expression = conditional_expression .)
    ,               reduce using rule 55 (expression -> unary_expression = conditional_expression .)


state 105

    (56) expression -> unary_expression ADD_ASSIGN conditional_expression .

    ;               reduce using rule 56 (expression -> unary_expression ADD_ASSIGN conditional_expression .)
    )               reduce using rule 56 (expression -> unary_expression ADD_ASSIGN conditional_expression .)
    :               reduce using rule 56 (expression -> unary_expression ADD_ASSIGN conditional_expression .)
    ]               reduce using rule 56 (expression -> unary_expression ADD_ASSIGN conditional_expression .)
    ,               reduce using rule 56 (expression -> unary_expression ADD_ASSIGN conditional_expression .)


state 106

    (53) conditional_expression -> logical_is_expression ? expression . : conditional_expression

    :               shift and go to state 138


state 107

    (5) postfix_expression -> postfix_expression [ expression . ]
    (6) postfix_expression -> postfix_expression [ expression . : expression ]

    ]               shift and go to state 139
    :               shift and go to state 140


state 108

    (7) postfix_expression -> postfix_expression . IDENTIFIER .

    [               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    .               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    (               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INC_OP          reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    =               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    *               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    /               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    %               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    +               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    -               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LEFT_OP         reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RIGHT_OP        reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    <               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    >               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LE_OP           reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    GE_OP           reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    REL_OP          reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    EQ_OP           reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    NE_OP           reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    &               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ^               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    |               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LAND_OP         reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    IS              reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LOR_OP          reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ?               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ;               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    )               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    :               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ]               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ,               reduce using rule 7 (postfix_expression -> postfix_expression . IDENTIFIER .)


state 109

    (8) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    INC_OP          reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    ADD_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    LEFT_OP         reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_OP        reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    LE_OP           reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    GE_OP           reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    REL_OP          reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    EQ_OP           reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    NE_OP           reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    LAND_OP         reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    IS              reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    LOR_OP          reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 8 (postfix_expression -> postfix_expression ( ) .)


state 110

    (9) postfix_expression -> postfix_expression ( argument_expression_list . )
    (20) argument_expression_list -> argument_expression_list . , expression

    )               shift and go to state 141
    ,               shift and go to state 142


state 111

    (19) argument_expression_list -> expression .

    )               reduce using rule 19 (argument_expression_list -> expression .)
    ,               reduce using rule 19 (argument_expression_list -> expression .)


state 112

    (51) logical_is_expression -> logical_or_expression IS logical_or_expression .
    (49) logical_or_expression -> logical_or_expression . LOR_OP logical_and_expression

    ?               reduce using rule 51 (logical_is_expression -> logical_or_expression IS logical_or_expression .)
    ;               reduce using rule 51 (logical_is_expression -> logical_or_expression IS logical_or_expression .)
    )               reduce using rule 51 (logical_is_expression -> logical_or_expression IS logical_or_expression .)
    :               reduce using rule 51 (logical_is_expression -> logical_or_expression IS logical_or_expression .)
    ]               reduce using rule 51 (logical_is_expression -> logical_or_expression IS logical_or_expression .)
    ,               reduce using rule 51 (logical_is_expression -> logical_or_expression IS logical_or_expression .)
    LOR_OP          shift and go to state 74


state 113

    (49) logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .
    (47) logical_and_expression -> logical_and_expression . LAND_OP inclusive_or_expression

    IS              reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    LOR_OP          reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    ?               reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    ;               reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    )               reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    :               reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    ]               reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    ,               reduce using rule 49 (logical_or_expression -> logical_or_expression LOR_OP logical_and_expression .)
    LAND_OP         shift and go to state 75


state 114

    (47) logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .
    (45) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    LAND_OP         reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    IS              reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    LOR_OP          reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    ?               reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    ;               reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    )               reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    :               reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    ]               reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    ,               reduce using rule 47 (logical_and_expression -> logical_and_expression LAND_OP inclusive_or_expression .)
    |               shift and go to state 76


state 115

    (45) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (43) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    LAND_OP         reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    IS              reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    LOR_OP          reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 77


state 116

    (43) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (41) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    LAND_OP         reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    IS              reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    LOR_OP          reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 43 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 78


state 117

    (41) and_expression -> and_expression & equality_expression .
    (38) equality_expression -> equality_expression . EQ_OP relational_expression
    (39) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    LAND_OP         reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    IS              reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    LOR_OP          reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 41 (and_expression -> and_expression & equality_expression .)
    EQ_OP           shift and go to state 79
    NE_OP           shift and go to state 80


state 118

    (38) equality_expression -> equality_expression EQ_OP relational_expression .
    (32) relational_expression -> relational_expression . < shift_expression
    (33) relational_expression -> relational_expression . > shift_expression
    (34) relational_expression -> relational_expression . LE_OP shift_expression
    (35) relational_expression -> relational_expression . GE_OP shift_expression
    (36) relational_expression -> relational_expression . REL_OP shift_expression

    EQ_OP           reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    &               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ^               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    |               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LAND_OP         reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    IS              reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    LOR_OP          reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ?               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ;               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    )               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    :               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ]               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ,               reduce using rule 38 (equality_expression -> equality_expression EQ_OP relational_expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LE_OP           shift and go to state 83
    GE_OP           shift and go to state 84
    REL_OP          shift and go to state 85


state 119

    (39) equality_expression -> equality_expression NE_OP relational_expression .
    (32) relational_expression -> relational_expression . < shift_expression
    (33) relational_expression -> relational_expression . > shift_expression
    (34) relational_expression -> relational_expression . LE_OP shift_expression
    (35) relational_expression -> relational_expression . GE_OP shift_expression
    (36) relational_expression -> relational_expression . REL_OP shift_expression

    EQ_OP           reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    &               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    ^               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    |               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    LAND_OP         reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    IS              reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    LOR_OP          reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    ?               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    ;               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    )               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    :               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    ]               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    ,               reduce using rule 39 (equality_expression -> equality_expression NE_OP relational_expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LE_OP           shift and go to state 83
    GE_OP           shift and go to state 84
    REL_OP          shift and go to state 85


state 120

    (32) relational_expression -> relational_expression < shift_expression .
    (29) shift_expression -> shift_expression . LEFT_OP additive_expression
    (30) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    LE_OP           reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    GE_OP           reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    REL_OP          reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    EQ_OP           reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    NE_OP           reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    LAND_OP         reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    IS              reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    LOR_OP          reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 32 (relational_expression -> relational_expression < shift_expression .)
    LEFT_OP         shift and go to state 86
    RIGHT_OP        shift and go to state 87


state 121

    (33) relational_expression -> relational_expression > shift_expression .
    (29) shift_expression -> shift_expression . LEFT_OP additive_expression
    (30) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    LE_OP           reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    GE_OP           reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    REL_OP          reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    EQ_OP           reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    NE_OP           reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    LAND_OP         reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    IS              reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    LOR_OP          reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 33 (relational_expression -> relational_expression > shift_expression .)
    LEFT_OP         shift and go to state 86
    RIGHT_OP        shift and go to state 87


state 122

    (34) relational_expression -> relational_expression LE_OP shift_expression .
    (29) shift_expression -> shift_expression . LEFT_OP additive_expression
    (30) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    >               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    REL_OP          reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    &               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    ^               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    |               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    LAND_OP         reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    IS              reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    LOR_OP          reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    ?               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    ;               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    )               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    :               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    ]               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    ,               reduce using rule 34 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 86
    RIGHT_OP        shift and go to state 87


state 123

    (35) relational_expression -> relational_expression GE_OP shift_expression .
    (29) shift_expression -> shift_expression . LEFT_OP additive_expression
    (30) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    >               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    REL_OP          reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    &               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    ^               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    |               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    LAND_OP         reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    IS              reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    LOR_OP          reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    ?               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    ;               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    )               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    :               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    ]               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    ,               reduce using rule 35 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 86
    RIGHT_OP        shift and go to state 87


state 124

    (36) relational_expression -> relational_expression REL_OP shift_expression .
    (29) shift_expression -> shift_expression . LEFT_OP additive_expression
    (30) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    >               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    LE_OP           reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    GE_OP           reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    REL_OP          reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    EQ_OP           reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    NE_OP           reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    &               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    ^               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    |               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    LAND_OP         reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    IS              reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    LOR_OP          reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    ?               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    ;               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    )               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    :               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    ]               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    ,               reduce using rule 36 (relational_expression -> relational_expression REL_OP shift_expression .)
    LEFT_OP         shift and go to state 86
    RIGHT_OP        shift and go to state 87


state 125

    (29) shift_expression -> shift_expression LEFT_OP additive_expression .
    (26) additive_expression -> additive_expression . + multiplicative_expression
    (27) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    <               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    >               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    REL_OP          reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    &               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ^               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    |               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LAND_OP         reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    IS              reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LOR_OP          reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ?               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ;               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    )               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    :               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ]               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ,               reduce using rule 29 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    +               shift and go to state 88
    -               shift and go to state 89


state 126

    (30) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (26) additive_expression -> additive_expression . + multiplicative_expression
    (27) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    <               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    >               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    REL_OP          reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    &               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ^               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    |               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LAND_OP         reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    IS              reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LOR_OP          reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ?               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ;               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    )               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    :               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ]               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ,               reduce using rule 30 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    +               shift and go to state 88
    -               shift and go to state 89


state 127

    (26) additive_expression -> additive_expression + multiplicative_expression .
    (22) multiplicative_expression -> multiplicative_expression . * unary_expression
    (23) multiplicative_expression -> multiplicative_expression . / unary_expression
    (24) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    LEFT_OP         reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    RIGHT_OP        reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    REL_OP          reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    LAND_OP         reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    IS              reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    LOR_OP          reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 26 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 90
    /               shift and go to state 91
    %               shift and go to state 92


state 128

    (27) additive_expression -> additive_expression - multiplicative_expression .
    (22) multiplicative_expression -> multiplicative_expression . * unary_expression
    (23) multiplicative_expression -> multiplicative_expression . / unary_expression
    (24) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    LEFT_OP         reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    RIGHT_OP        reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    REL_OP          reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    LAND_OP         reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    IS              reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    LOR_OP          reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 27 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 90
    /               shift and go to state 91
    %               shift and go to state 92


state 129

    (22) multiplicative_expression -> multiplicative_expression * unary_expression .

    *               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    /               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    %               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    +               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    -               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LEFT_OP         reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    RIGHT_OP        reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    <               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    >               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LE_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GE_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    REL_OP          reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    EQ_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    NE_OP           reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    &               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ^               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    |               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LAND_OP         reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    IS              reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LOR_OP          reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ?               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ;               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    )               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    :               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ]               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ,               reduce using rule 22 (multiplicative_expression -> multiplicative_expression * unary_expression .)


state 130

    (23) multiplicative_expression -> multiplicative_expression / unary_expression .

    *               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    /               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    %               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    +               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    -               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LEFT_OP         reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    RIGHT_OP        reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    <               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    >               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LE_OP           reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    GE_OP           reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    REL_OP          reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    EQ_OP           reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    NE_OP           reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    &               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ^               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    |               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LAND_OP         reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    IS              reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LOR_OP          reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ?               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ;               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    )               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    :               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ]               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ,               reduce using rule 23 (multiplicative_expression -> multiplicative_expression / unary_expression .)


state 131

    (24) multiplicative_expression -> multiplicative_expression % unary_expression .

    *               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    /               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    %               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    +               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    -               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LEFT_OP         reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    RIGHT_OP        reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    <               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    >               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LE_OP           reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    GE_OP           reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    REL_OP          reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    EQ_OP           reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    NE_OP           reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    &               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ^               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    |               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LAND_OP         reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    IS              reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LOR_OP          reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ?               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ;               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    )               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    :               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ]               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ,               reduce using rule 24 (multiplicative_expression -> multiplicative_expression % unary_expression .)


state 132

    (80) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 80 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 80 (init_declarator_list -> init_declarator_list , init_declarator .)


state 133

    (82) init_declarator -> IDENTIFIER = expression .

    ;               reduce using rule 82 (init_declarator -> IDENTIFIER = expression .)
    ,               reduce using rule 82 (init_declarator -> IDENTIFIER = expression .)


state 134

    (66) compound_statement -> { declaration_list statement_list } .

    ;               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    {               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    WHILE           reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    FOR             reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    IF              reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    -               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    !               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    *               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    &               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    INC_OP          reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    DEC_OP          reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    ~               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    IDENTIFIER      reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    CONSTANT        reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    (               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    $end            reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    }               reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)
    ELSE            reduce using rule 66 (compound_statement -> { declaration_list statement_list } .)


state 135

    (61) iteration_statement -> WHILE ( expression ) . statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 12
    statement                      shift and go to state 143
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 136

    (62) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 144
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 137

    (59) selection_statement -> IF ( expression ) . statement
    (60) selection_statement -> IF ( expression ) . statement ELSE statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 12
    statement                      shift and go to state 145
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 138

    (53) conditional_expression -> logical_is_expression ? expression : . conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    logical_is_expression          shift and go to state 23
    conditional_expression         shift and go to state 146
    logical_or_expression          shift and go to state 32
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 24
    primary_expression             shift and go to state 33

state 139

    (5) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    INC_OP          reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_OP         reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_OP        reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    LE_OP           reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    GE_OP           reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    REL_OP          reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    NE_OP           reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    LAND_OP         reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    IS              reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    LOR_OP          reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 5 (postfix_expression -> postfix_expression [ expression ] .)


state 140

    (6) postfix_expression -> postfix_expression [ expression : . expression ]
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    postfix_expression             shift and go to state 24
    expression                     shift and go to state 147
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 141

    (9) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_OP         reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_OP        reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    REL_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LAND_OP         reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    IS              reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LOR_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 9 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 142

    (20) argument_expression_list -> argument_expression_list , . expression
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 148
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 143

    (61) iteration_statement -> WHILE ( expression ) statement .

    ;               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    INC_OP          reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    DEC_OP          reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANT        reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    $end            reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    }               reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 61 (iteration_statement -> WHILE ( expression ) statement .)


state 144

    (62) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement

    )               shift and go to state 149


state 145

    (59) selection_statement -> IF ( expression ) statement .
    (60) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    ;               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    CONSTANT        reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    $end            reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    }               reduce using rule 59 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 150

  ! ELSE            [ reduce using rule 59 (selection_statement -> IF ( expression ) statement .) ]


state 146

    (53) conditional_expression -> logical_is_expression ? expression : conditional_expression .

    ;               reduce using rule 53 (conditional_expression -> logical_is_expression ? expression : conditional_expression .)
    )               reduce using rule 53 (conditional_expression -> logical_is_expression ? expression : conditional_expression .)
    :               reduce using rule 53 (conditional_expression -> logical_is_expression ? expression : conditional_expression .)
    ]               reduce using rule 53 (conditional_expression -> logical_is_expression ? expression : conditional_expression .)
    ,               reduce using rule 53 (conditional_expression -> logical_is_expression ? expression : conditional_expression .)


state 147

    (6) postfix_expression -> postfix_expression [ expression : expression . ]

    ]               shift and go to state 151


state 148

    (20) argument_expression_list -> argument_expression_list , expression .

    )               reduce using rule 20 (argument_expression_list -> argument_expression_list , expression .)
    ,               reduce using rule 20 (argument_expression_list -> argument_expression_list , expression .)


state 149

    (62) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression_statement           shift and go to state 6
    expression                     shift and go to state 12
    statement                      shift and go to state 152
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 150

    (60) selection_statement -> IF ( expression ) statement ELSE . statement
    (67) statement -> . expression_statement
    (68) statement -> . compound_statement
    (69) statement -> . iteration_statement
    (70) statement -> . selection_statement
    (57) expression_statement -> . ;
    (58) expression_statement -> . expression ;
    (63) compound_statement -> . { }
    (64) compound_statement -> . { statement_list }
    (65) compound_statement -> . { declaration_list }
    (66) compound_statement -> . { declaration_list statement_list }
    (61) iteration_statement -> . WHILE ( expression ) statement
    (62) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (59) selection_statement -> . IF ( expression ) statement
    (60) selection_statement -> . IF ( expression ) statement ELSE statement
    (54) expression -> . conditional_expression
    (55) expression -> . unary_expression = conditional_expression
    (56) expression -> . unary_expression ADD_ASSIGN conditional_expression
    (52) conditional_expression -> . logical_is_expression
    (53) conditional_expression -> . logical_is_expression ? expression : conditional_expression
    (11) unary_expression -> . postfix_expression
    (12) unary_expression -> . - unary_expression
    (13) unary_expression -> . ! unary_expression
    (14) unary_expression -> . * unary_expression
    (15) unary_expression -> . & unary_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . ~ unary_expression
    (50) logical_is_expression -> . logical_or_expression
    (51) logical_is_expression -> . logical_or_expression IS logical_or_expression
    (4) postfix_expression -> . primary_expression
    (5) postfix_expression -> . postfix_expression [ expression ]
    (6) postfix_expression -> . postfix_expression [ expression : expression ]
    (7) postfix_expression -> . postfix_expression . IDENTIFIER
    (8) postfix_expression -> . postfix_expression ( )
    (9) postfix_expression -> . postfix_expression ( argument_expression_list )
    (10) postfix_expression -> . postfix_expression INC_OP
    (48) logical_or_expression -> . logical_and_expression
    (49) logical_or_expression -> . logical_or_expression LOR_OP logical_and_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . ( expression )
    (46) logical_and_expression -> . inclusive_or_expression
    (47) logical_and_expression -> . logical_and_expression LAND_OP inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (42) exclusive_or_expression -> . and_expression
    (43) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (40) and_expression -> . equality_expression
    (41) and_expression -> . and_expression & equality_expression
    (37) equality_expression -> . relational_expression
    (38) equality_expression -> . equality_expression EQ_OP relational_expression
    (39) equality_expression -> . equality_expression NE_OP relational_expression
    (31) relational_expression -> . shift_expression
    (32) relational_expression -> . relational_expression < shift_expression
    (33) relational_expression -> . relational_expression > shift_expression
    (34) relational_expression -> . relational_expression LE_OP shift_expression
    (35) relational_expression -> . relational_expression GE_OP shift_expression
    (36) relational_expression -> . relational_expression REL_OP shift_expression
    (28) shift_expression -> . additive_expression
    (29) shift_expression -> . shift_expression LEFT_OP additive_expression
    (30) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (25) additive_expression -> . multiplicative_expression
    (26) additive_expression -> . additive_expression + multiplicative_expression
    (27) additive_expression -> . additive_expression - multiplicative_expression
    (21) multiplicative_expression -> . unary_expression
    (22) multiplicative_expression -> . multiplicative_expression * unary_expression
    (23) multiplicative_expression -> . multiplicative_expression / unary_expression
    (24) multiplicative_expression -> . multiplicative_expression % unary_expression

    ;               shift and go to state 11
    {               shift and go to state 13
    WHILE           shift and go to state 14
    FOR             shift and go to state 16
    IF              shift and go to state 17
    -               shift and go to state 25
    !               shift and go to state 26
    *               shift and go to state 27
    &               shift and go to state 28
    INC_OP          shift and go to state 29
    DEC_OP          shift and go to state 30
    ~               shift and go to state 31
    IDENTIFIER      shift and go to state 34
    CONSTANT        shift and go to state 36
    (               shift and go to state 15

    expression                     shift and go to state 12
    statement                      shift and go to state 153
    expression_statement           shift and go to state 6
    compound_statement             shift and go to state 7
    iteration_statement            shift and go to state 8
    selection_statement            shift and go to state 9
    conditional_expression         shift and go to state 21
    unary_expression               shift and go to state 22
    logical_is_expression          shift and go to state 23
    postfix_expression             shift and go to state 24
    logical_or_expression          shift and go to state 32
    primary_expression             shift and go to state 33
    logical_and_expression         shift and go to state 35
    inclusive_or_expression        shift and go to state 37
    exclusive_or_expression        shift and go to state 38
    and_expression                 shift and go to state 39
    equality_expression            shift and go to state 40
    relational_expression          shift and go to state 41
    shift_expression               shift and go to state 42
    additive_expression            shift and go to state 43
    multiplicative_expression      shift and go to state 44

state 151

    (6) postfix_expression -> postfix_expression [ expression : expression ] .

    [               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    .               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    (               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    INC_OP          reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    =               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    ADD_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    *               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    /               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    %               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    +               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    -               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    LEFT_OP         reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    RIGHT_OP        reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    <               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    >               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    LE_OP           reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    GE_OP           reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    REL_OP          reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    EQ_OP           reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    NE_OP           reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    &               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    ^               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    |               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    LAND_OP         reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    IS              reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    LOR_OP          reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    ?               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    ;               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    )               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    :               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    ]               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)
    ,               reduce using rule 6 (postfix_expression -> postfix_expression [ expression : expression ] .)


state 152

    (62) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    ;               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_OP          reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEC_OP          reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANT        reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    $end            reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    }               reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 62 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 153

    (60) selection_statement -> IF ( expression ) statement ELSE statement .

    ;               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANT        reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    $end            reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    }               reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 60 (selection_statement -> IF ( expression ) statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
