<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2022 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="str_za_ri" title="STR" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="STR" />
  </docvars>
  <heading>STR</heading>
  <desc>
    <brief>Store vector from ZA array</brief>
    <description>
      <para>The ZA array vector is selected by the sum of the vector select register and an immediate, modulo the number of bytes in a Streaming SVE vector. The immediate is in the range 0 to 15. The memory address is generated by scalar base, plus the same optional immediate offset multiplied by the current vector length in bytes. This instruction is unpredicated.</para>
      <para>The store is performed as contiguous byte accesses, with no endian conversion and no guarantee of single-copy atomicity larger than a byte. However, if alignment is checked, then the base register must be aligned to 16 bytes.</para>
      <para>This instruction does not require the PE to be in Streaming SVE mode, and it is expected that this instruction will not experience a significant slowdown due to contention with other PEs that are executing in Streaming SVE mode.</para>
    </description>
    <status>Green</status>
    <predicated>False</predicated>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="SME" oneof="1" id="iclass_mortlach" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="STR" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="FEAT_SME" feature="FEAT_SME" />
      </arch_variants>
      <regdiagram form="32" psname="STR-ZA.RI-_">
        <box hibit="31" width="10" settings="10">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" name="op" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="6" settings="6">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="imm4" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="str_za_ri_" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="instr-class" value="mortlach" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="STR" />
        </docvars>
        <asmtemplate><text>STR     ZA[</text><a link="sa_wv" hover="32-bit vector select register W12-W15 (field &quot;Rv&quot;)">&lt;Wv&gt;</a><text>, </text><a link="sa_imm" hover="Vector select offset and optional memory offset [0-15], default 0 (field &quot;imm4&quot;)">&lt;imm&gt;</a><text>], [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link="sa_imm" hover="Vector select offset and optional memory offset [0-15], default 0 (field &quot;imm4&quot;)">&lt;imm&gt;</a><text>, MUL VL</text><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="STR-ZA.RI-_" mylink="STR-ZA.RI-_" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !<a link="impl-aarch64.HaveSME.0" file="shared_pseudocode.xml" hover="function: boolean HaveSME()">HaveSME</a>() then UNDEFINED;
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('011':Rv);
integer imm = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imm4);</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="str_za_ri_" symboldefcount="1">
      <symbol link="sa_wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W12-W15, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="str_za_ri_" symboldefcount="1">
      <symbol link="sa_imm">&lt;imm&gt;</symbol>
      <account encodedin="imm4">
        <intro>
          <para>Is the vector select offset and optional memory offset, in the range 0 to 15, defaulting to 0, encoded in the "imm4" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="str_za_ri_" symboldefcount="1">
      <symbol link="sa_xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="STR-ZA.RI-_" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSMEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSMEAndZAEnabled()">CheckSMEAndZAEnabled</a>();
integer   dim = <a link="impl-aarch64.SVL.read.none" file="shared_pseudocode.xml" hover="accessor: integer SVL">SVL</a> DIV 8;
bits(32)  idx = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[v];
integer   vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(idx) + imm) MOD dim;
bits(<a link="impl-aarch64.SVL.read.none" file="shared_pseudocode.xml" hover="accessor: integer SVL">SVL</a>) src;
bits(64)  base;
integer   offset = imm * dim;

if HaveTME() &amp;&amp; TSTATE.depth &gt; 0 then
    FailTransaction(TMFailure_ERR, FALSE);

if n == 31 then
    if HaveMTEExt() then SetTagCheckedInstruction(FALSE);
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    base = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[]">SP</a>[];
else
    if HaveMTEExt() then SetTagCheckedInstruction(TRUE);
    base = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];

src = <a link="impl-aarch64.ZAvector.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAvector[integer index]">ZAvector</a>[vec];
boolean aligned = <a link="AArch64.CheckAlignment.4" file="shared_pseudocode.xml" hover="function: boolean AArch64.CheckAlignment(bits(64) address, integer alignment, AccType acctype, boolean iswrite)">AArch64.CheckAlignment</a>(base + offset, 16, <a link="AccType_SME" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_STREAM, AccType_VEC, AccType_VECSTREAM, AccType_SME, AccType_SMESTREAM, AccType_A32LSMD, AccType_ATOMIC, AccType_ORDERED, AccType_ORDEREDATOMIC, AccType_UNPRIV, AccType_IFETCH, AccType_TTW, AccType_NONFAULT, AccType_CNOTFIRST,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_SME</a>, TRUE);
for e = 0 to dim-1
    <a link="AArch64.MemSingle.write.4" file="shared_pseudocode.xml" hover="accessor: AArch64.MemSingle[bits(64) address, integer size, AccType acctype, boolean aligned] = bits(size*8) value">AArch64.MemSingle</a>[base + offset, 1, <a link="AccType_SME" file="shared_pseudocode.xml" hover="enumeration AccType {AccType_NORMAL, AccType_STREAM, AccType_VEC, AccType_VECSTREAM, AccType_SME, AccType_SMESTREAM, AccType_A32LSMD, AccType_ATOMIC, AccType_ORDERED, AccType_ORDEREDATOMIC, AccType_UNPRIV, AccType_IFETCH, AccType_TTW, AccType_NONFAULT, AccType_CNOTFIRST,  AccType_DC, AccType_IC, AccType_DCZVA, AccType_AT}">AccType_SME</a>, aligned] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[src, e, 8];
    offset = offset + 1;</pstext>
    </ps>
  </ps_section>
</instructionsection>
