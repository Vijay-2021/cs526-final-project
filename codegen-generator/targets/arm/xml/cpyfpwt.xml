<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2022 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="CPYFPWT" title="CPYFPWT, CPYFMWT, CPYFEWT -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
  </docvars>
  <heading>CPYFPWT, CPYFMWT, CPYFEWT</heading>
  <desc>
    <brief>
      <para>Memory Copy Forward-only, writes unprivileged</para>
    </brief>
    <authored>
      <para>Memory Copy Forward-only, writes unprivileged. These instructions perform a memory copy. The prologue, main, and epilogue instructions are expected to be run in succession and to appear consecutively in memory: CPYFPWT, then CPYFMWT, and then CPYFEWT.</para>
      <para>CPYFPWT performs some preconditioning of the arguments suitable for using the CPYFMWT instruction, and performs an <arm-defined-word>implementation defined</arm-defined-word> amount of the memory copy. CPYFMWT performs an <arm-defined-word>implementation defined</arm-defined-word> amount of the memory copy. CPYFEWT performs the last part of the memory copy.</para>
      <note>
        <para>The inclusion of <arm-defined-word>implementation defined</arm-defined-word> amounts of memory copy allows some optimization of the size that can be performed.</para>
      </note>
      <para>The memory copy performed by these instructions is in the forward direction only, so the instructions are suitable for a memory copy only where there is no overlap between the source and destination locations, or where the source address is greater than the destination address.</para>
      <para>The architecture supports two algorithms for the memory copy: option A and option B. Which algorithm is used is <arm-defined-word>implementation defined</arm-defined-word>.</para>
      <note>
        <para>Portable software should not assume that the choice of algorithm is constant.</para>
      </note>
      <para>After execution of CPYFPWT, option A (which results in encoding PSTATE.C = 0):</para>
      <list type="unordered">
        <listitem><content>If Xn&lt;63&gt; == 1, the copy size is saturated to <hexnumber>0x7FFFFFFFFFFFFFFF</hexnumber>.</content></listitem>
        <listitem><content>Xs holds the original Xs + saturated Xn.</content></listitem>
        <listitem><content>Xd holds the original Xd + saturated Xn.</content></listitem>
        <listitem><content>Xn holds -1* saturated Xn + an <arm-defined-word>implementation defined</arm-defined-word> number of bytes copied.</content></listitem>
        <listitem><content>PSTATE.{N,Z,V} are set to {0,0,0}.</content></listitem>
      </list>
      <para>After execution of CPYFPWT, option B (which results in encoding PSTATE.C = 1):</para>
      <list type="unordered">
        <listitem><content>If Xn&lt;63&gt; == 1, the copy size is saturated to <hexnumber>0x7FFFFFFFFFFFFFFF</hexnumber>.</content></listitem>
        <listitem><content>Xs holds the original Xs + an <arm-defined-word>implementation defined</arm-defined-word> number of bytes copied.</content></listitem>
        <listitem><content>Xd holds the original Xd + an <arm-defined-word>implementation defined</arm-defined-word> number of bytes copied.</content></listitem>
        <listitem><content>Xn holds the saturated Xn - an <arm-defined-word>implementation defined</arm-defined-word> number of bytes copied.</content></listitem>
        <listitem><content>PSTATE.{N,Z,V} are set to {0,0,0}.</content></listitem>
      </list>
      <para>For CPYFMWT, option A (encoded by PSTATE.C = 0), the format of the arguments is:</para>
      <list type="unordered">
        <listitem><content>Xn is treated as a signed 64-bit number and holds -1* the number of bytes remaining to be copied in the memory copy in total.</content></listitem>
        <listitem><content>Xs holds the lowest address that the copy is copied from -Xn.</content></listitem>
        <listitem><content>Xd holds the lowest address that the copy is made to -Xn.</content></listitem>
        <listitem><content>At the end of the instruction, the value of Xn is written back with -1* the number of bytes remaining to be copied in the memory copy in total.</content></listitem>
      </list>
      <para>For CPYFMWT, option B (encoded by PSTATE.C = 1), the format of the arguments is:</para>
      <list type="unordered">
        <listitem><content>Xn holds the number of bytes remaining to be copied in the memory copy in total.</content></listitem>
        <listitem><content>Xs holds the lowest address that the copy is copied from.</content></listitem>
        <listitem><content>Xd holds the lowest address that the copy is copied to.</content></listitem>
        <listitem><content>At the end of the instruction:<list type="unordered"><listitem><content>the value of Xn is written back with the number of bytes remaining to be copied in the memory copy in total.</content></listitem><listitem><content>the value of Xs is written back with the lowest address that has not been copied from.</content></listitem><listitem><content>the value of Xd is written back with the lowest address that has not been copied to.</content></listitem></list></content></listitem>
      </list>
      <para>For CPYFEWT, option A (encoded by PSTATE.C = 0), the format of the arguments is:</para>
      <list type="unordered">
        <listitem><content>Xn is treated as a signed 64-bit number and holds -1* the number of bytes remaining to be copied in the memory copy in total.</content></listitem>
        <listitem><content>Xs holds the lowest address that the copy is copied from -Xn.</content></listitem>
        <listitem><content>Xd holds the lowest address that the copy is made to -Xn.</content></listitem>
        <listitem><content>At the end of the instruction, the value of Xn is written back with 0.</content></listitem>
      </list>
      <para>For CPYFEWT, option B (encoded by PSTATE.C = 1), the format of the arguments is:</para>
      <list type="unordered">
        <listitem><content>Xn holds the number of bytes remaining to be copied in the memory copy in total.</content></listitem>
        <listitem><content>Xs holds the lowest address that the copy is copied from.</content></listitem>
        <listitem><content>Xd holds the lowest address that the copy is copied to.</content></listitem>
        <listitem><content>At the end of the instruction:<list type="unordered"><listitem><content>the value of Xn is written back with 0.</content></listitem><listitem><content>the value of Xs is written back with the lowest address that has not been copied from.</content></listitem><listitem><content>the value of Xd is written back with the lowest address that has not been copied to.</content></listitem></list></content></listitem>
      </list>
    </authored>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Integer" oneof="1" id="iclass_general" no_encodings="3" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
      </docvars>
      <iclassintro count="3"></iclassintro>
      <arch_variants>
        <arch_variant name="ARMv8.8" feature="FEAT_MOPS" />
      </arch_variants>
      <regdiagram form="32" psname="aarch64/instrs/memory/mcpymset/cpyf" tworows="1">
        <box hibit="31" width="2" name="sz" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="26" name="o0" settings="1">
          <c>0</c>
        </box>
        <box hibit="25" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="op1" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="21" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rs" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" width="4" name="op2" usename="1" settings="4" psbits="xxxx">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="CPYFEWT_CPY_memcms" oneofinclass="3" oneof="3" label="Epilogue" bitdiffs="op1 == 10">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="CPYFEWT" />
          <docvar key="pme" value="pme-epilogue" />
        </docvars>
        <box hibit="23" width="2" name="op1">
          <c>1</c>
          <c>0</c>
        </box>
        <asmtemplate><text>CPYFEWT  [</text><a link="sa_xd_1" hover="64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)">&lt;Xd&gt;</a><text>]!, [</text><a link="sa_xs_1" hover="64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)">&lt;Xs&gt;</a><text>]!, </text><a link="sa_xn_2" hover="64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)">&lt;Xn&gt;</a><text>!</text></asmtemplate>
      </encoding>
      <encoding name="CPYFMWT_CPY_memcms" oneofinclass="3" oneof="3" label="Main" bitdiffs="op1 == 01">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="CPYFMWT" />
          <docvar key="pme" value="pme-main" />
        </docvars>
        <box hibit="23" width="2" name="op1">
          <c>0</c>
          <c>1</c>
        </box>
        <asmtemplate><text>CPYFMWT  [</text><a link="sa_xd_1" hover="64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)">&lt;Xd&gt;</a><text>]!, [</text><a link="sa_xs_1" hover="64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)">&lt;Xs&gt;</a><text>]!, </text><a link="sa_xn_1" hover="64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)">&lt;Xn&gt;</a><text>!</text></asmtemplate>
      </encoding>
      <encoding name="CPYFPWT_CPY_memcms" oneofinclass="3" oneof="3" label="Prologue" bitdiffs="op1 == 00">
        <docvars>
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="CPYFPWT" />
          <docvar key="pme" value="pme-prologue" />
        </docvars>
        <box hibit="23" width="2" name="op1">
          <c>0</c>
          <c>0</c>
        </box>
        <asmtemplate><text>CPYFPWT  [</text><a link="sa_xd" hover="64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)">&lt;Xd&gt;</a><text>]!, [</text><a link="sa_xs" hover="64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)">&lt;Xs&gt;</a><text>]!, </text><a link="sa_xn" hover="64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)">&lt;Xn&gt;</a><text>!</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/memory/mcpymset/cpyf" mylink="aarch64.instrs.memory.mcpymset.cpyf" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !<a link="impl-shared.HaveFeatMOPS.0" file="shared_pseudocode.xml" hover="function: boolean HaveFeatMOPS()">HaveFeatMOPS</a>() then UNDEFINED;
if sz != '00' then UNDEFINED;

integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rs);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
bits(4) options = op2;

<a link="MOPSStage" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage</a> stage;
case op1 of
    when '00' stage = <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a>;
    when '01' stage = <a link="MOPSStage_Main" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Main</a>;
    when '10' stage = <a link="MOPSStage_Epilogue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Epilogue</a>;
    otherwise SEE "Memory Copy and Memory Set";

if d == s  || s == n  || d == n then UNDEFINED;
if d == 31 || s == 31 || n == 31 then UNDEFINED;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="CPYFMWT_CPY_memcms, CPYFEWT_CPY_memcms" symboldefcount="1">
      <symbol link="sa_xd_1">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>For the epilogue and main variant: is the 64-bit name of the general-purpose register that holds an encoding of the destination address, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CPYFPWT_CPY_memcms" symboldefcount="2">
      <symbol link="sa_xd">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <docvars>
          <docvar key="mnemonic" value="CPYFPWT" />
          <docvar key="pme" value="pme-prologue" />
        </docvars>
        <intro>
          <para>For the prologue variant: is the 64-bit name of the general-purpose register that holds the destination address and is updated by the instruction, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CPYFMWT_CPY_memcms, CPYFEWT_CPY_memcms" symboldefcount="1">
      <symbol link="sa_xs_1">&lt;Xs&gt;</symbol>
      <account encodedin="Rs">
        <intro>
          <para>For the epilogue and main variant: is the 64-bit name of the general-purpose register that holds an encoding of the source address, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CPYFPWT_CPY_memcms" symboldefcount="2">
      <symbol link="sa_xs">&lt;Xs&gt;</symbol>
      <account encodedin="Rs">
        <docvars>
          <docvar key="mnemonic" value="CPYFPWT" />
          <docvar key="pme" value="pme-prologue" />
        </docvars>
        <intro>
          <para>For the prologue variant: is the 64-bit name of the general-purpose register that holds the source address and is updated by the instruction, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CPYFEWT_CPY_memcms" symboldefcount="1">
      <symbol link="sa_xn_2">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <docvars>
          <docvar key="mnemonic" value="CPYFEWT" />
          <docvar key="pme" value="pme-epilogue" />
        </docvars>
        <intro>
          <para>For the epilogue variant: is the 64-bit name of the general-purpose register that holds an encoding of the number of bytes to be transferred and is set to zero at the end of the instruction, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CPYFMWT_CPY_memcms" symboldefcount="2">
      <symbol link="sa_xn_1">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <docvars>
          <docvar key="mnemonic" value="CPYFMWT" />
          <docvar key="pme" value="pme-main" />
        </docvars>
        <intro>
          <para>For the main variant: is the 64-bit name of the general-purpose register that holds an encoding of the number of bytes to be transferred, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CPYFPWT_CPY_memcms" symboldefcount="3">
      <symbol link="sa_xn">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <docvars>
          <docvar key="mnemonic" value="CPYFPWT" />
          <docvar key="pme" value="pme-prologue" />
        </docvars>
        <intro>
          <para>For the prologue variant: is the 64-bit name of the general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/mcpymset/cpyf" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckMOPSEnabled.0" file="shared_pseudocode.xml" hover="function: CheckMOPSEnabled()">CheckMOPSEnabled</a>();

integer N = <a link="impl-aarch64.MaxBlockSizeCopiedBytes.0" file="shared_pseudocode.xml" hover="function: integer MaxBlockSizeCopiedBytes()">MaxBlockSizeCopiedBytes</a>();
bits(64) toaddress   = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[d];
bits(64) fromaddress = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[s];
bits(64) cpysize     = <a link="impl-aarch64.X.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n]">X</a>[n];
bits(4) nzcv = PSTATE.&lt;N,Z,C,V&gt;;
bits(64) stagecpysize;
bits(8*N) readdata;
integer B;

if <a link="impl-shared.HaveMTE2Ext.0" file="shared_pseudocode.xml" hover="function: boolean HaveMTE2Ext()">HaveMTE2Ext</a>() then
    <a link="impl-aarch64.SetTagCheckedInstruction.1" file="shared_pseudocode.xml" hover="function: SetTagCheckedInstruction(boolean checked)">SetTagCheckedInstruction</a>(TRUE);

boolean supports_option_a = <a link="impl-aarch64.MemCpyOptionA.0" file="shared_pseudocode.xml" hover="function: boolean MemCpyOptionA()">MemCpyOptionA</a>();
(racctype, wacctype) = <a link="impl-aarch64.MemCpyAccessTypes.1" file="shared_pseudocode.xml" hover="function: (AccType, AccType) MemCpyAccessTypes(bits(4) options)">MemCpyAccessTypes</a>(options);

if stage == <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
    if cpysize&lt;63&gt; == '1' then cpysize = 0x7FFFFFFFFFFFFFFF&lt;63:0&gt;;

    if supports_option_a then
        nzcv = '0000';
        // Copy in the forward direction offsets the arguments.
        toaddress   = toaddress + cpysize;
        fromaddress = fromaddress + cpysize;
        cpysize     = <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(64) - cpysize;
    else
        nzcv = '0010';

    // IMP DEF selection of the amount covered by pre-processing.
    stagecpysize = <a link="impl-aarch64.CPYPreSizeChoice.3" file="shared_pseudocode.xml" hover="function: bits(64) CPYPreSizeChoice(bits(64) toaddress, bits(64) fromaddress, bits(64) cpysize)">CPYPreSizeChoice</a>(toaddress, fromaddress, cpysize);
    assert stagecpysize&lt;63&gt; == cpysize&lt;63&gt; || stagecpysize == <a link="impl-shared.Zeros.0" file="shared_pseudocode.xml" hover="function: bits(N) Zeros()">Zeros</a>();

    if <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(cpysize) &gt; 0 then
        assert <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(stagecpysize) &lt;= <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(cpysize);
    else
        assert <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(stagecpysize) &gt;= <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(cpysize);
else
    boolean zero_size_exceptions = <a link="impl-aarch64.MemCpyZeroSizeCheck.0" file="shared_pseudocode.xml" hover="function: boolean MemCpyZeroSizeCheck()">MemCpyZeroSizeCheck</a>();

    // Check if this version is consistent with the state of the call.
    if zero_size_exceptions || <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(cpysize) != 0 then
        if supports_option_a then
            if nzcv&lt;1&gt; == '1' then   // PSTATE.C
                boolean wrong_option  = TRUE;
                boolean from_epilogue = stage == <a link="MOPSStage_Epilogue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Epilogue</a>;
                <a link="impl-aarch64.MismatchedMemCpyException.7" file="shared_pseudocode.xml" hover="function: MismatchedMemCpyException(boolean option_a, integer destreg, integer srcreg, integer sizereg,&#13; boolean wrong_option, boolean from_epilogue, bits(4) options)">MismatchedMemCpyException</a>(supports_option_a, d, s, n, wrong_option,
                from_epilogue, options);
        else
            if nzcv&lt;1&gt; == '0' then   // PSTATE.C
                boolean wrong_option  = TRUE;
                boolean from_epilogue = stage == <a link="MOPSStage_Epilogue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Epilogue</a>;
                <a link="impl-aarch64.MismatchedMemCpyException.7" file="shared_pseudocode.xml" hover="function: MismatchedMemCpyException(boolean option_a, integer destreg, integer srcreg, integer sizereg,&#13; boolean wrong_option, boolean from_epilogue, bits(4) options)">MismatchedMemCpyException</a>(supports_option_a, d, s, n, wrong_option,
                from_epilogue, options);

    bits(64) postsize = <a link="impl-aarch64.CPYPostSizeChoice.3" file="shared_pseudocode.xml" hover="function: bits(64) CPYPostSizeChoice(bits(64) toaddress, bits(64) fromaddress, bits(64) cpysize)">CPYPostSizeChoice</a>(toaddress, fromaddress, cpysize);
    assert postsize&lt;63&gt; == cpysize&lt;63&gt; || <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(postsize) == 0;

    if stage == <a link="MOPSStage_Main" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Main</a> then
        stagecpysize = cpysize - postsize;

        // Check if the parameters to this instruction are valid.
        if <a link="impl-aarch64.MemCpyParametersIllformedM.3" file="shared_pseudocode.xml" hover="function: boolean MemCpyParametersIllformedM(bits(64) toaddress, bits(64) fromaddress,&#13; bits(64) cpysize)">MemCpyParametersIllformedM</a>(toaddress, fromaddress, cpysize) then
            boolean wrong_option  = FALSE;
            boolean from_epilogue = FALSE;
            <a link="impl-aarch64.MismatchedMemCpyException.7" file="shared_pseudocode.xml" hover="function: MismatchedMemCpyException(boolean option_a, integer destreg, integer srcreg, integer sizereg,&#13; boolean wrong_option, boolean from_epilogue, bits(4) options)">MismatchedMemCpyException</a>(supports_option_a, d, s, n, wrong_option,
            from_epilogue, options);
    else
        stagecpysize = postsize;

        // Check if the parameters to this instruction are valid for the epilogue.
        if (cpysize != postsize || <a link="impl-aarch64.MemCpyParametersIllformedE.3" file="shared_pseudocode.xml" hover="function: boolean MemCpyParametersIllformedE(bits(64) toaddress, bits(64) fromaddress,&#13; bits(64) cpysize)">MemCpyParametersIllformedE</a>(toaddress, fromaddress, cpysize)) then
            boolean wrong_option  = FALSE;
            boolean from_epilogue = TRUE;
            <a link="impl-aarch64.MismatchedMemCpyException.7" file="shared_pseudocode.xml" hover="function: MismatchedMemCpyException(boolean option_a, integer destreg, integer srcreg, integer sizereg,&#13; boolean wrong_option, boolean from_epilogue, bits(4) options)">MismatchedMemCpyException</a>(supports_option_a, d, s, n, wrong_option,
            from_epilogue, options);

if supports_option_a then
    while <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(stagecpysize) != 0 do
        // IMP DEF selection of the block size that is worked on. While many
        // implementations might make this constant, that is not assumed.
        B = <a link="impl-aarch64.CPYSizeChoice.3" file="shared_pseudocode.xml" hover="function: integer CPYSizeChoice(bits(64) toaddress, bits(64) fromaddress, bits(64) cpysize)">CPYSizeChoice</a>(toaddress, fromaddress, cpysize);
        assert B &lt;= -1*<a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(stagecpysize);

        readdata&lt;B*8-1:0&gt; = <a link="impl-aarch64.Mem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size*8) Mem[bits(64) address, integer size, AccType acctype]">Mem</a>[fromaddress + cpysize, B, racctype];
        Mem[toaddress + cpysize, B, wacctype] = readdata&lt;B*8-1:0&gt;;
        cpysize = cpysize + B;
        stagecpysize = stagecpysize + B;

        if stage != <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
            <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[n] = cpysize;
else
    while <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(stagecpysize) &gt; 0 do
        // IMP DEF selection of the block size that is worked on. While many
        // implementations might make this constant, that is not assumed.
        B = <a link="impl-aarch64.CPYSizeChoice.3" file="shared_pseudocode.xml" hover="function: integer CPYSizeChoice(bits(64) toaddress, bits(64) fromaddress, bits(64) cpysize)">CPYSizeChoice</a>(toaddress, fromaddress, cpysize);
        assert B &lt;= <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(stagecpysize);

        readdata&lt;B*8-1:0&gt; = <a link="impl-aarch64.Mem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size*8) Mem[bits(64) address, integer size, AccType acctype]">Mem</a>[fromaddress, B, racctype];
        Mem[toaddress, B, wacctype] = readdata&lt;B*8-1:0&gt;;
        fromaddress = fromaddress + B;
        toaddress   = toaddress + B;

        cpysize = cpysize - B;
        stagecpysize = stagecpysize - B;

        if stage != <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
            <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[n] = cpysize;
            <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[d] = toaddress;
            <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[s] = fromaddress;

if stage == <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
    <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[n] = cpysize;
    <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[d] = toaddress;
    <a link="impl-aarch64.X.write.1" file="shared_pseudocode.xml" hover="accessor: X[integer n] = bits(width) value">X</a>[s] = fromaddress;
    PSTATE.&lt;N,Z,C,V&gt; = nzcv;</pstext>
    </ps>
  </ps_section>
</instructionsection>
