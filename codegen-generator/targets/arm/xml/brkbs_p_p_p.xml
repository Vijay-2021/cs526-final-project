<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2022 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="brkbs_p_p_p" title="BRKBS" type="instruction">
  <docvars>
    <docvar key="cond-setting" value="s" />
    <docvar key="instr-class" value="sve" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="BRKBS" />
  </docvars>
  <heading>BRKBS</heading>
  <desc>
    <brief>Break before first true condition, setting the condition flags</brief>
    <description>
      <para>Sets destination predicate elements up to but not including the first active and true source element to true, then sets subsequent elements to false. Inactive elements in the destination predicate register are set to zero. Sets the <arm-defined-word>First</arm-defined-word> (N), <arm-defined-word>None</arm-defined-word> (Z), <arm-defined-word>!Last</arm-defined-word> (C) condition flags based on the predicate result, and the V flag to zero.</para>
    </description>
    <status>Green</status>
    <predicated>True</predicated>
    <affected_by_sme output="NZCV condition flags" />
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Setting the condition flags" oneof="1" id="iclass_s" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="cond-setting" value="s" />
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="BRKBS" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="BRKBS-P.P.P-Z" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="B" usename="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="S" usename="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="21" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="13" width="4" name="Pg" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="9" settings="1">
          <c>0</c>
        </box>
        <box hibit="8" width="4" name="Pn" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="4" name="M" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="Pd" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="brkbs_p_p_p_z" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="cond-setting" value="s" />
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="BRKBS" />
        </docvars>
        <asmtemplate><text>BRKBS   </text><a link="sa_pd" hover="Destination scalable predicate register (field &quot;Pd&quot;)">&lt;Pd&gt;</a><text>.B, </text><a link="sa_pg" hover="Governing scalable predicate register (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>/Z, </text><a link="sa_pn" hover="Source scalable predicate register (field &quot;Pn&quot;)">&lt;Pn&gt;</a><text>.B</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="BRKBS-P.P.P-Z" mylink="BRKBS-P.P.P-Z" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !<a link="impl-aarch64.HaveSVE.0" file="shared_pseudocode.xml" hover="function: boolean HaveSVE()">HaveSVE</a>() &amp;&amp; !<a link="impl-aarch64.HaveSME.0" file="shared_pseudocode.xml" hover="function: boolean HaveSME()">HaveSME</a>() then UNDEFINED;
integer esize = 8;
integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pn);
integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pd);
boolean merging = FALSE;
boolean setflags = TRUE;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="brkbs_p_p_p_z" symboldefcount="1">
      <symbol link="sa_pd">&lt;Pd&gt;</symbol>
      <account encodedin="Pd">
        <intro>
          <para>Is the name of the destination scalable predicate register, encoded in the "Pd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="brkbs_p_p_p_z" symboldefcount="1">
      <symbol link="sa_pg">&lt;Pg&gt;</symbol>
      <account encodedin="Pg">
        <intro>
          <para>Is the name of the governing scalable predicate register, encoded in the "Pg" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="brkbs_p_p_p_z" symboldefcount="1">
      <symbol link="sa_pn">&lt;Pn&gt;</symbol>
      <account encodedin="Pn">
        <intro>
          <para>Is the name of the source scalable predicate register, encoded in the "Pn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="BRKBS-P.P.P-Z" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
integer elements = <a link="impl-aarch64.VL.read.none" file="shared_pseudocode.xml" hover="accessor: integer VL">VL</a> DIV esize;
bits(<a link="impl-aarch64.PL.read.none" file="shared_pseudocode.xml" hover="accessor: integer PL">PL</a>) mask = <a link="impl-aarch64.P.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n]">P</a>[g];
bits(<a link="impl-aarch64.PL.read.none" file="shared_pseudocode.xml" hover="accessor: integer PL">PL</a>) operand  = <a link="impl-aarch64.P.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n]">P</a>[n];
bits(<a link="impl-aarch64.PL.read.none" file="shared_pseudocode.xml" hover="accessor: integer PL">PL</a>) operand2 = <a link="impl-aarch64.P.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n]">P</a>[d];
boolean break = FALSE;
bits(<a link="impl-aarch64.PL.read.none" file="shared_pseudocode.xml" hover="accessor: integer PL">PL</a>) result;

for e = 0 to elements-1
    boolean element = <a link="impl-aarch64.ElemP.read.3" file="shared_pseudocode.xml" hover="accessor: bit ElemP[bits(N) pred, integer e, integer esize]">ElemP</a>[operand, e, esize] == '1';
    if <a link="impl-aarch64.ElemP.read.3" file="shared_pseudocode.xml" hover="accessor: bit ElemP[bits(N) pred, integer e, integer esize]">ElemP</a>[mask, e, esize] == '1' then
        break = break || element;
        <a link="impl-aarch64.ElemP.write.3" file="shared_pseudocode.xml" hover="accessor: ElemP[bits(N) &amp;pred, integer e, integer esize] = bit value">ElemP</a>[result, e, esize] = if !break then '1' else '0';
    elsif merging then
        <a link="impl-aarch64.ElemP.write.3" file="shared_pseudocode.xml" hover="accessor: ElemP[bits(N) &amp;pred, integer e, integer esize] = bit value">ElemP</a>[result, e, esize] = <a link="impl-aarch64.ElemP.read.3" file="shared_pseudocode.xml" hover="accessor: bit ElemP[bits(N) pred, integer e, integer esize]">ElemP</a>[operand2, e, esize];
    else
        <a link="impl-aarch64.ElemP.write.3" file="shared_pseudocode.xml" hover="accessor: ElemP[bits(N) &amp;pred, integer e, integer esize] = bit value">ElemP</a>[result, e, esize] = '0';

if setflags then
    PSTATE.&lt;N,Z,C,V&gt; = <a link="impl-aarch64.PredTest.3" file="shared_pseudocode.xml" hover="function: bits(4) PredTest(bits(N) mask, bits(N) result, integer esize)">PredTest</a>(mask, result, esize);
<a link="impl-aarch64.P.write.1" file="shared_pseudocode.xml" hover="accessor: P[integer n] = bits(width) value">P</a>[d] = result;</pstext>
    </ps>
  </ps_section>
</instructionsection>
