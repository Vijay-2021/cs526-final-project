#lang rosette
(define (vadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvadd  %5  %10))
 %11
)
)
)
result)
(define a0 (bv #x6a927f88bf4ca740 64))
(define b0 (bv #x990665d140855616 64))
(assert (eq? (vadd_u32 a0 b0) (bv #x0398e559ffd1fd56 64)))
(define a1 (bv #x346fc5759e732c72 64))
(define b1 (bv #xe8bf83ddab410348 64))
(assert (eq? (vadd_u32 a1 b1) (bv #x1d2f495249b42fba 64)))
(define a2 (bv #x1047683424337b7f 64))
(define b2 (bv #xe79786b737675348 64))
(assert (eq? (vadd_u32 a2 b2) (bv #xf7deeeeb5b9acec7 64)))
(define a3 (bv #x79c3f4239817ecff 64))
(define b3 (bv #xc0dbd1e9f3291637 64))
(assert (eq? (vadd_u32 a3 b3) (bv #x3a9fc60c8b410336 64)))
(define a4 (bv #x2d6fbee2f744f99d 64))
(define b4 (bv #x4ffd66a2f2193368 64))
(assert (eq? (vadd_u32 a4 b4) (bv #x7d6d2584e95e2d05 64)))
(define a5 (bv #x814abdde3fe3421f 64))
(define b5 (bv #x57e7a1680e6930cb 64))
(assert (eq? (vadd_u32 a5 b5) (bv #xd9325f464e4c72ea 64)))
(define a6 (bv #x5efbd1cf3117de20 64))
(define b6 (bv #x6c8ebdaed8257c6b 64))
(assert (eq? (vadd_u32 a6 b6) (bv #xcb8a8f7d093d5a8b 64)))
(define a7 (bv #x8848bcce7cafff30 64))
(define b7 (bv #xf56bbfb0e1a6bdbf 64))
(assert (eq? (vadd_u32 a7 b7) (bv #x7db47c7e5e56bcef 64)))
(define a8 (bv #x593369d742f3d293 64))
(define b8 (bv #x41e22d54f48ee4e3 64))
(assert (eq? (vadd_u32 a8 b8) (bv #x9b15972b3782b776 64)))
(define a9 (bv #xff0e7ce12194e326 64))
(define b9 (bv #xfe1434ca6a2d6ea0 64))
(assert (eq? (vadd_u32 a9 b9) (bv #xfd22b1ab8bc251c6 64)))
