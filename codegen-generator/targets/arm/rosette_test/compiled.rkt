#lang rosette
(require "bvops.rkt")
(define (vadd_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vadd_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vadd_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vadd_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vadd_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vadd_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vadd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vadd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvadd  %11  %16))
 %21
)
)
)
result)
(define (vaddl_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vaddl_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vaddl_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vaddl_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vaddl_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vaddl_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vaddw_s8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vaddw_s16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vaddw_s32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vaddw_high_s8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vaddw_high_s16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vaddw_high_s32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vaddw_u8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vaddw_u16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vaddw_u32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vaddw_high_u8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vaddw_high_u16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vaddw_high_u32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvadd  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vhadd_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhaddq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhadd_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhaddq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhadd_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vhaddq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vhadd_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhaddq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhadd_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhaddq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhadd_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vhaddq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vrhadd_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  8 1 %24))
 %25
)
)
)
result)
(define (vrhaddq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  8 1 %24))
 %25
)
)
)
result)
(define (vrhadd_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  16 1 %24))
 %25
)
)
)
result)
(define (vrhaddq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  16 1 %24))
 %25
)
)
)
result)
(define (vrhadd_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  32 1 %24))
 %25
)
)
)
result)
(define (vrhaddq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  32 1 %24))
 %25
)
)
)
result)
(define (vrhadd_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  8 1 %24))
 %25
)
)
)
result)
(define (vrhaddq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  8 1 %24))
 %25
)
)
)
result)
(define (vrhadd_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  16 1 %24))
 %25
)
)
)
result)
(define (vrhaddq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  16 1 %24))
 %25
)
)
)
result)
(define (vrhadd_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  32 1 %24))
 %25
)
)
)
result)
(define (vrhaddq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %23 (bvadd  %12  %18))
 (define %24 (bvadd  %23  (bv 1 192)))
 (define %25 (extract  32 1 %24))
 %25
)
)
)
result)
(define (vqadd_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqaddq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqadd_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqaddq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqadd_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqaddq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqaddq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqadd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqaddb_s8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqaddh_s16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqadds_s32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqaddd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqadd_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqaddq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqadd_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqaddq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqadd_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqaddq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqaddq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vqadd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vqaddb_u8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqaddh_u16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqadds_u32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqaddd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vuqadd_s8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 8 ))
 %25
)
)
)
result)
(define (vuqaddq_s8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 8 ))
 %25
)
)
)
result)
(define (vuqadd_s16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 16 ))
 %25
)
)
)
result)
(define (vuqaddq_s16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 16 ))
 %25
)
)
)
result)
(define (vuqadd_s32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 32 ))
 %25
)
)
)
result)
(define (vuqaddq_s32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 32 ))
 %25
)
)
)
result)
(define (vuqaddq_s64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  64))
 (define %15 (*  e0  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 64 ))
 %25
)
)
)
result)
(define (vuqadd_s64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  64))
 (define %15 (*  e0  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 64 ))
 %25
)
)
)
result)
(define (vuqaddb_s8  a b )
(define %2 (extract  7 0 b))
(define %5 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 8 ))
 %25
)
)
)
result)
(define (vuqaddh_s16  a b )
(define %2 (extract  15 0 b))
(define %5 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 16 ))
 %25
)
)
)
result)
(define (vuqadds_s32  a b )
(define %2 (extract  31 0 b))
(define %5 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 32 ))
 %25
)
)
)
result)
(define (vuqaddd_s64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %13 (zero-extend  %11 (bitvector 192)))
 (define %14 (*  e0  64))
 (define %15 (*  e0  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvssat %24 192 64 ))
 %25
)
)
)
result)
(define (vsqadd_u8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 8 ))
 %25
)
)
)
result)
(define (vsqaddq_u8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 8 ))
 %25
)
)
)
result)
(define (vsqadd_u16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 16 ))
 %25
)
)
)
result)
(define (vsqaddq_u16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 16 ))
 %25
)
)
)
result)
(define (vsqadd_u32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 32 ))
 %25
)
)
)
result)
(define (vsqaddq_u32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 32 ))
 %25
)
)
)
result)
(define (vsqaddq_u64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  64))
 (define %15 (*  e0  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 64 ))
 %25
)
)
)
result)
(define (vsqadd_u64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  64))
 (define %15 (*  e0  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 64 ))
 %25
)
)
)
result)
(define (vsqaddb_u8  a b )
(define %2 (extract  7 0 b))
(define %5 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 8 ))
 %25
)
)
)
result)
(define (vsqaddh_u16  a b )
(define %2 (extract  15 0 b))
(define %5 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 16 ))
 %25
)
)
)
result)
(define (vsqadds_u32  a b )
(define %2 (extract  31 0 b))
(define %5 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 32 ))
 %25
)
)
)
result)
(define (vsqaddd_u64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %13 (sign-extend  %11 (bitvector 192)))
 (define %14 (*  e0  64))
 (define %15 (*  e0  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %24 (bvadd  %13  %19))
 (define %25 (bvusat %24 192 64 ))
 %25
)
)
)
result)
(define (vaddhn_s16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
result)
(define (vaddhn_s32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
result)
(define (vaddhn_s64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
result)
(define (vaddhn_u16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
result)
(define (vaddhn_u32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
result)
(define (vaddhn_u64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
result)
(define (vaddhn_high_s16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vaddhn_high_s32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vaddhn_high_s64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vaddhn_high_u16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vaddhn_high_u32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vaddhn_high_u64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvadd  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vraddhn_s16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
result)
(define (vraddhn_s32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
result)
(define (vraddhn_s64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
result)
(define (vraddhn_u16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
result)
(define (vraddhn_u32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
result)
(define (vraddhn_u64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
result)
(define (vraddhn_high_s16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vraddhn_high_s32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vraddhn_high_s64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vraddhn_high_u16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vraddhn_high_u32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vraddhn_high_u64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvadd  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vmul_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  7 0 %20))
 %21
)
)
)
result)
(define (vmulq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  7 0 %20))
 %21
)
)
)
result)
(define (vmul_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  7 0 %20))
 %21
)
)
)
result)
(define (vmulq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  7 0 %20))
 %21
)
)
)
result)
(define (vmul_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %18 (zero-extend  %11 (bitvector 192)))
 (define %19 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %18  %19))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmla_s8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_s8  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_s16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_s32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_u8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_u8  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_u16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_u32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlal_s8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_high_s8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_u8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_high_u8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_high_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmlal_high_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvadd  %38  %29))
 %39
)
)
)
result)
(define (vmls_s8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_s8  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_s16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_s32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_u8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_u8  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  7 0 %23))
 (define %29 (*  e0  8))
 (define %30 (*  e0  8))
 (define %32 (+  %30  7))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_u16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_u32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %21 (zero-extend  %14 (bitvector 192)))
 (define %22 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %21  %22))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsl_s8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_high_s8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (sign-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_u8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_high_u8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  15 0 %28))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_high_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  31 0 %28))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vmlsl_high_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %2))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 %5))
 (define %25 (zero-extend  %24 (bitvector 192)))
 (define %28 (bvmul  %19  %25))
 (define %29 (extract  63 0 %28))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 %9))
 (define %39 (bvsub  %38  %29))
 %39
)
)
)
result)
(define (vqdmulh_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %12))
 (define %20 (bvmul  %19  %18))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %12))
 (define %20 (bvmul  %19  %18))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %12))
 (define %20 (bvmul  %19  %18))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %12))
 (define %20 (bvmul  %19  %18))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhh_s16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %12))
 (define %20 (bvmul  %19  %18))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhs_s32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %12))
 (define %20 (bvmul  %19  %18))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqrdmulh_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhh_s16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhs_s32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqdmlal_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlalh_s16  a b c )
(define %2 (extract  15 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlals_s32  a b c )
(define %2 (extract  31 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define %9 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlslh_s16  a b c )
(define %2 (extract  15 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsls_s32  a b c )
(define %2 (extract  31 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %18))
 (define %26 (bvmul  %25  %24))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vmull_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  15 0 %30))
 %31
)
)
)
result)
(define (vmull_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  31 0 %30))
 %31
)
)
)
result)
(define (vmull_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  63 0 %30))
 %31
)
)
)
result)
(define (vmull_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  15 0 %30))
 %31
)
)
)
result)
(define (vmull_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  31 0 %30))
 %31
)
)
)
result)
(define (vmull_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  63 0 %30))
 %31
)
)
)
result)
(define (vmull_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  15 0 %30))
 %31
)
)
)
result)
(define (vmull_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  31 0 %30))
 %31
)
)
)
result)
(define (vmull_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  63 0 %30))
 %31
)
)
)
result)
(define (vmull_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  15 0 %30))
 %31
)
)
)
result)
(define (vmull_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  31 0 %30))
 %31
)
)
)
result)
(define (vmull_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  63 0 %30))
 %31
)
)
)
result)
(define (vqdmull_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmullh_s16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmulls_s32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vsub_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsub_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsub_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsub_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsub_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsub_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsub_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsub_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %21 (bvsub  %11  %16))
 %21
)
)
)
result)
(define (vsubl_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vsubl_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vsubl_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vsubl_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vsubl_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vsubl_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vsubw_s8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vsubw_s16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vsubw_s32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vsubw_high_s8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vsubw_high_s16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vsubw_high_s32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vsubw_u8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vsubw_u16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vsubw_u32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vsubw_high_u8  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %12 (*  e0  16))
 (define %15 (+  %12  15))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  15 0 %25))
 %36
)
)
)
result)
(define (vsubw_high_u16  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %12 (*  e0  32))
 (define %15 (+  %12  31))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  31 0 %25))
 %36
)
)
)
result)
(define (vsubw_high_u32  a b )
(define %3 (extract  127 0 a))
(define %6 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %12 (*  e0  64))
 (define %15 (+  %12  63))
 (define %17 (extract  %15 %10 %3))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %6))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %25 (bvsub  %18  %24))
 (define %36 (extract  63 0 %25))
 %36
)
)
)
result)
(define (vhsub_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhsubq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhsub_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhsubq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhsub_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vhsubq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vhsub_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhsubq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  8 1 %19))
 %24
)
)
)
result)
(define (vhsub_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhsubq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  16 1 %19))
 %24
)
)
)
result)
(define (vhsub_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vhsubq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (extract  32 1 %19))
 %24
)
)
)
result)
(define (vqsub_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqsubq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqsub_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqsubq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqsub_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqsubq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqsubq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqsub_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqsubb_s8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqsubh_s16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqsubs_s32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqsubd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqsub_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqsubq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqsub_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqsubq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqsub_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqsubq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqsubq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vqsub_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vqsubb_u8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqsubh_u16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqsubs_u32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqsubd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vsubhn_s16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
result)
(define (vsubhn_s32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
result)
(define (vsubhn_s64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
result)
(define (vsubhn_u16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
result)
(define (vsubhn_u32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
result)
(define (vsubhn_u64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
result)
(define (vsubhn_high_s16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vsubhn_high_s32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vsubhn_high_s64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vsubhn_high_u16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %15 (*  e0  16))
 (define %18 (+  %15  15))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 16)))
 (define %38 (extract  15 8 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vsubhn_high_u32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %15 (*  e0  32))
 (define %18 (+  %15  31))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 32)))
 (define %38 (extract  31 16 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vsubhn_high_u64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  64))
 (define %15 (*  e0  64))
 (define %18 (+  %15  63))
 (define %20 (extract  %18 %13 %3))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 %7))
 (define %30 (bvsub  %20  %29))
 (define %31 (bvadd  %30  (bv 0 64)))
 (define %38 (extract  63 32 %31))
 %38
)
)
)
(define %39 (concat result r))
%39)
(define (vrsubhn_s16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
result)
(define (vrsubhn_s32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
result)
(define (vrsubhn_s64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
result)
(define (vrsubhn_u16  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
result)
(define (vrsubhn_u32  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
result)
(define (vrsubhn_u64  a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
result)
(define (vrsubhn_high_s16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vrsubhn_high_s32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vrsubhn_high_s64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vrsubhn_high_u16  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %17 (*  e0  16))
 (define %20 (+  %17  15))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  16))
 (define %26 (*  e0  16))
 (define %29 (+  %26  15))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 128 16)))
 (define %40 (extract  15 8 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vrsubhn_high_u32  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %17 (*  e0  32))
 (define %20 (+  %17  31))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 32768 32)))
 (define %40 (extract  31 16 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vrsubhn_high_u64  r a b )
(define %3 (extract  127 0 a))
(define %7 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  64))
 (define %17 (*  e0  64))
 (define %20 (+  %17  63))
 (define %22 (extract  %20 %15 %3))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 %7))
 (define %32 (bvsub  %22  %31))
 (define %33 (bvadd  %32  (bv 2147483648 64)))
 (define %40 (extract  63 32 %33))
 %40
)
)
)
(define %41 (concat result r))
%41)
(define (vceq_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 255 8) (bv 0 8)))
 %24
)
)
)
result)
(define (vceqq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 255 8) (bv 0 8)))
 %24
)
)
)
result)
(define (vceq_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 65535 16) (bv 0 16)))
 %24
)
)
)
result)
(define (vceqq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 65535 16) (bv 0 16)))
 %24
)
)
)
result)
(define (vceq_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 4294967295 32) (bv 0 32)))
 %24
)
)
)
result)
(define (vceqq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 4294967295 32) (bv 0 32)))
 %24
)
)
)
result)
(define (vceq_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 255 8) (bv 0 8)))
 %24
)
)
)
result)
(define (vceqq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 255 8) (bv 0 8)))
 %24
)
)
)
result)
(define (vceq_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 65535 16) (bv 0 16)))
 %24
)
)
)
result)
(define (vceqq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 65535 16) (bv 0 16)))
 %24
)
)
)
result)
(define (vceq_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 4294967295 32) (bv 0 32)))
 %24
)
)
)
result)
(define (vceqq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 4294967295 32) (bv 0 32)))
 %24
)
)
)
result)
(define (vceqq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %24
)
)
)
result)
(define (vceqq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %24
)
)
)
result)
(define (vceq_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %24
)
)
)
result)
(define (vceq_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %24
)
)
)
result)
(define (vceqd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %24
)
)
)
result)
(define (vceqd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bveq  %11  %16))
 (define %24 (if (equal? %17 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %24
)
)
)
result)
(define (vceqz_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vceqzq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vceqz_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vceqzq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vceqz_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vceqzq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vceqz_u8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vceqzq_u8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vceqz_u16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vceqzq_u16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vceqz_u32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vceqzq_u32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vceqzq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vceqzq_u64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vceqz_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vceqz_u64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vceqzd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vceqzd_u64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bveq  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcge_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcgeq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcge_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcgeq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcge_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgeq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgeq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcle_s8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcleq_s8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcle_s16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcleq_s16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcle_s32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcleq_s32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcleq_s64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcge_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcgeq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcge_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcgeq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcge_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgeq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgeq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcle_u8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcleq_u8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcle_u16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcleq_u16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcle_u32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcleq_u32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcleq_u64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcge_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcged_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcle_s64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcled_s64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcge_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcged_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcle_u64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcled_u64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsge  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcgez_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vcgezq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vcgez_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vcgezq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vcgez_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vcgezq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vcgezq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcgez_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcgezd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsge  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vclez_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vclezq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vclez_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vclezq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vclez_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vclezq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vclezq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vclez_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vclezd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsle  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcgt_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcgtq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcgt_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcgtq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcgt_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgtq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgtq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vclt_s8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcltq_s8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vclt_s16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcltq_s16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vclt_s32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcltq_s32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcltq_s64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcgt_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcgtq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcgt_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcgtq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcgt_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgtq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcgtq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vclt_u8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vcltq_u8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vclt_u16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vcltq_u16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vclt_u32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcltq_u32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vcltq_u64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcgt_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcgtd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vclt_s64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcltd_s64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcgt_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcgtd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vclt_u64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcltd_u64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  64))
 (define %14 (*  e0  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsgt  %12  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vcgtz_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vcgtzq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vcgtz_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vcgtzq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vcgtz_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vcgtzq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vcgtzq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcgtz_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcgtzd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvsgt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcltz_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vcltzq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 255 8) (bv 0 8)))
 %17
)
)
)
result)
(define (vcltz_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vcltzq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 65535 16) (bv 0 16)))
 %17
)
)
)
result)
(define (vcltz_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vcltzq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 4294967295 32) (bv 0 32)))
 %17
)
)
)
result)
(define (vcltzq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcltz_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vcltzd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvslt  %9  (bv 0 192)))
 (define %17 (if (equal? %10 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %17
)
)
)
result)
(define (vtst_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vtstq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vtst_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vtstq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vtst_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vtstq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vtst_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vtstq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  8))
 (define %13 (*  e0  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 255 8) (bv 0 8)))
 %26
)
)
)
result)
(define (vtst_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vtstq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 65535 16) (bv 0 16)))
 %26
)
)
)
result)
(define (vtst_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vtstq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 4294967295 32) (bv 0 32)))
 %26
)
)
)
result)
(define (vtstq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vtstq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vtst_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vtst_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vtstd_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vtstd_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (*  e0  64))
 (define %13 (*  e0  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %12 %5))
 (define %17 (bvand  %11  %16))
 (define %18 (bvzero  %17))
 (define %19 (not  %18))
 (define %26 (if (equal? %19 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %26
)
)
)
result)
(define (vmax_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmax  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vmaxq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmax  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vmax_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmax  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vmaxq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmax  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vmax_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmax  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vmaxq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmax  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vmax_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumax  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vmaxq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumax  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vmax_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumax  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vmaxq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumax  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vmax_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumax  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vmaxq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumax  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vmin_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmin  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vminq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmin  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vmin_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmin  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vminq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmin  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vmin_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmin  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vminq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsmin  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vmin_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumin  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vminq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumin  %12  %18))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vmin_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumin  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vminq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumin  %12  %18))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vmin_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumin  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vminq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %5))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvumin  %12  %18))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vshl_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vshlq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vshl_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vshlq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vshl_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vshlq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vshlq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  63 0 %22))
 %28
)
)
)
result)
(define (vshl_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  63 0 %22))
 %28
)
)
)
result)
(define (vshld_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  63 0 %22))
 %28
)
)
)
result)
(define (vshl_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vshlq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vshl_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vshlq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vshl_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vshlq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vshlq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  63 0 %22))
 %28
)
)
)
result)
(define (vshl_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  63 0 %22))
 %28
)
)
)
result)
(define (vshld_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %28 (extract  63 0 %22))
 %28
)
)
)
result)
(define (vqshl_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 8 ))
 %27
)
)
)
result)
(define (vqshlq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 8 ))
 %27
)
)
)
result)
(define (vqshl_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 16 ))
 %27
)
)
)
result)
(define (vqshlq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 16 ))
 %27
)
)
)
result)
(define (vqshl_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 32 ))
 %27
)
)
)
result)
(define (vqshlq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 32 ))
 %27
)
)
)
result)
(define (vqshlq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 64 ))
 %27
)
)
)
result)
(define (vqshl_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 64 ))
 %27
)
)
)
result)
(define (vqshlb_s8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 8 ))
 %27
)
)
)
result)
(define (vqshlh_s16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 16 ))
 %27
)
)
)
result)
(define (vqshls_s32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 32 ))
 %27
)
)
)
result)
(define (vqshld_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvssat %22 192 64 ))
 %27
)
)
)
result)
(define (vqshl_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
result)
(define (vqshlq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
result)
(define (vqshl_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
result)
(define (vqshlq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
result)
(define (vqshl_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
result)
(define (vqshlq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
result)
(define (vqshlq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 64 ))
 %27
)
)
)
result)
(define (vqshl_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 64 ))
 %27
)
)
)
result)
(define (vqshlb_u8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
result)
(define (vqshlh_u16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
result)
(define (vqshls_u32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
result)
(define (vqshld_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %22 (armshl  %21  %14))
 (define %27 (bvusat %22 192 64 ))
 %27
)
)
)
result)
(define (vrshl_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  7 0 %25))
 %31
)
)
)
result)
(define (vrshlq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  7 0 %25))
 %31
)
)
)
result)
(define (vrshl_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  15 0 %25))
 %31
)
)
)
result)
(define (vrshlq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  15 0 %25))
 %31
)
)
)
result)
(define (vrshl_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  31 0 %25))
 %31
)
)
)
result)
(define (vrshlq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  31 0 %25))
 %31
)
)
)
result)
(define (vrshlq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  63 0 %25))
 %31
)
)
)
result)
(define (vrshl_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  63 0 %25))
 %31
)
)
)
result)
(define (vrshld_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  63 0 %25))
 %31
)
)
)
result)
(define (vrshl_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  7 0 %25))
 %31
)
)
)
result)
(define (vrshlq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  7 0 %25))
 %31
)
)
)
result)
(define (vrshl_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  15 0 %25))
 %31
)
)
)
result)
(define (vrshlq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  15 0 %25))
 %31
)
)
)
result)
(define (vrshl_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  31 0 %25))
 %31
)
)
)
result)
(define (vrshlq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  31 0 %25))
 %31
)
)
)
result)
(define (vrshlq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  63 0 %25))
 %31
)
)
)
result)
(define (vrshl_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  63 0 %25))
 %31
)
)
)
result)
(define (vrshld_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %31 (extract  63 0 %25))
 %31
)
)
)
result)
(define (vqrshl_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 8 ))
 %30
)
)
)
result)
(define (vqrshlq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 8 ))
 %30
)
)
)
result)
(define (vqrshl_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 16 ))
 %30
)
)
)
result)
(define (vqrshlq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 16 ))
 %30
)
)
)
result)
(define (vqrshl_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 32 ))
 %30
)
)
)
result)
(define (vqrshlq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 32 ))
 %30
)
)
)
result)
(define (vqrshlq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 64 ))
 %30
)
)
)
result)
(define (vqrshl_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 64 ))
 %30
)
)
)
result)
(define (vqrshlb_s8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 8 ))
 %30
)
)
)
result)
(define (vqrshlh_s16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 16 ))
 %30
)
)
)
result)
(define (vqrshls_s32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 32 ))
 %30
)
)
)
result)
(define (vqrshld_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (sign-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvssat %25 192 64 ))
 %30
)
)
)
result)
(define (vqrshl_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 8 ))
 %30
)
)
)
result)
(define (vqrshlq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 8 ))
 %30
)
)
)
result)
(define (vqrshl_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 16 ))
 %30
)
)
)
result)
(define (vqrshlq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 16 ))
 %30
)
)
)
result)
(define (vqrshl_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 32 ))
 %30
)
)
)
result)
(define (vqrshlq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 32 ))
 %30
)
)
)
result)
(define (vqrshlq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 64 ))
 %30
)
)
)
result)
(define (vqrshl_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 64 ))
 %30
)
)
)
result)
(define (vqrshlb_u8  a b )
(define %2 (extract  7 0 a))
(define %5 (extract  7 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  8))
 (define %19 (*  e0  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 8 ))
 %30
)
)
)
result)
(define (vqrshlh_u16  a b )
(define %2 (extract  15 0 a))
(define %5 (extract  15 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  16))
 (define %19 (*  e0  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 16 ))
 %30
)
)
)
result)
(define (vqrshls_u32  a b )
(define %2 (extract  31 0 a))
(define %5 (extract  31 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  32))
 (define %19 (*  e0  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 32 ))
 %30
)
)
)
result)
(define (vqrshld_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 %5))
 (define %13 (extract  7 0 %12))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvneg  %14))
 (define %16 (bvsub  %15  (bv 1 192)))
 (define %17 (armshl  (bv 1 192)  %16))
 (define %18 (*  e0  64))
 (define %19 (*  e0  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %18 %2))
 (define %23 (zero-extend  %22 (bitvector 192)))
 (define %24 (bvadd  %23  %17))
 (define %25 (armshl  %24  %14))
 (define %30 (bvusat %25 192 64 ))
 %30
)
)
)
result)
(define (vshr_n_s8__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s8__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s8__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s8__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s8__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s8__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s8__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s8__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s8__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s16__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s16__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s32__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s32__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_33  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 33 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_34  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 34 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_35  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 35 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_36  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 36 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_37  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 37 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_38  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 38 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_39  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 39 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_40  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 40 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_41  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 41 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_42  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 42 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_43  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 43 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_44  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 44 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_45  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 45 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_46  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 46 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_47  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 47 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_48  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 48 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_49  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 49 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_50  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 50 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_51  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 51 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_52  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 52 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_53  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 53 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_54  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 54 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_55  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 55 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_56  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 56 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_57  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 57 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_58  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 58 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_59  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 59 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_60  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 60 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_61  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 61 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_62  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 62 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_63  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 63 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_s64__n_64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 64 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 33 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 34 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 35 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 36 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 37 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 38 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 39 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 40 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 41 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 42 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 43 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 44 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 45 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 46 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 47 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 48 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 49 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 50 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 51 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 52 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 53 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 54 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 55 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 56 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 57 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 58 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 59 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 60 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 61 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 62 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 63 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_s64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 64 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 33 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 34 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 35 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 36 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 37 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 38 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 39 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 40 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 41 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 42 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 43 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 44 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 45 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 46 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 47 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 48 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 49 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 50 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 51 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 52 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 53 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 54 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 55 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 56 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 57 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 58 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 59 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 60 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 61 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 62 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 63 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_s64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 64 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u8__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u8__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  7 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u16__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u16__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  15 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u32__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u32__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  31 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_33  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 33 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_34  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 34 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_35  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 35 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_36  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 36 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_37  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 37 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_38  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 38 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_39  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 39 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_40  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 40 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_41  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 41 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_42  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 42 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_43  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 43 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_44  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 44 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_45  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 45 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_46  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 46 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_47  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 47 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_48  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 48 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_49  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 49 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_50  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 50 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_51  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 51 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_52  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 52 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_53  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 53 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_54  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 54 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_55  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 55 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_56  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 56 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_57  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 57 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_58  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 58 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_59  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 59 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_60  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 60 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_61  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 61 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_62  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 62 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_63  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 63 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrq_n_u64__n_64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 64 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 128)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 33 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 34 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 35 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 36 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 37 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 38 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 39 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 40 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 41 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 42 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 43 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 44 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 45 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 46 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 47 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 48 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 49 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 50 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 51 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 52 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 53 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 54 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 55 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 56 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 57 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 58 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 59 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 60 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 61 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 62 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 63 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshr_n_u64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 64 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 1 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 2 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 3 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 4 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 5 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 6 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 7 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 8 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 9 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 10 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 11 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 12 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 13 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 14 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 15 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 16 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 17 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 18 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 19 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 20 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 21 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 22 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 23 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 24 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 25 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 26 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 27 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 28 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 29 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 30 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 31 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 32 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 33 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 34 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 35 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 36 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 37 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 38 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 39 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 40 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 41 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 42 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 43 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 44 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 45 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 46 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 47 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 48 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 49 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 50 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 51 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 52 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 53 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 54 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 55 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 56 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 57 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 58 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 59 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 60 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 61 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 62 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 63 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vshrd_n_u64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %6 (*  e0  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (bvadd  %10  (bv 0 192)))
 (define %12 (bvashr  %11  (bv 64 192)))
 (define %17 (*  e0  64))
 (define %18 (*  e0  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %17 (bv 0 64)))
 (define %23 (extract  63 0 %12))
 (define %24 (bvadd  %21  %23))
 %24
)
)
)
result)
(define (vrshr_n_s8__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s8__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s8__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s8__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s8__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s8__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s8__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s8__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s8__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s16__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s16__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s32__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s32__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_33  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4294967296 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_34  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8589934592 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_35  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17179869184 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_36  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 34359738368 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_37  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 68719476736 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_38  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 137438953472 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_39  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 274877906944 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_40  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 549755813888 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_41  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1099511627776 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_42  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2199023255552 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_43  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4398046511104 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_44  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8796093022208 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_45  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17592186044416 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_46  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 35184372088832 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_47  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 70368744177664 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_48  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 140737488355328 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_49  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 281474976710656 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_50  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 562949953421312 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_51  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1125899906842624 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_52  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2251799813685248 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_53  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4503599627370496 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_54  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9007199254740992 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_55  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 18014398509481984 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_56  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 36028797018963968 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_57  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 72057594037927936 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_58  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 144115188075855872 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_59  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 288230376151711744 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_60  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 576460752303423488 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_61  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1152921504606846976 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_62  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2305843009213693952 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_63  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4611686018427387904 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_s64__n_64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9223372036854775808 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4294967296 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8589934592 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17179869184 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 34359738368 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 68719476736 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 137438953472 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 274877906944 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 549755813888 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1099511627776 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2199023255552 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4398046511104 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8796093022208 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17592186044416 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 35184372088832 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 70368744177664 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 140737488355328 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 281474976710656 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 562949953421312 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1125899906842624 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2251799813685248 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4503599627370496 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9007199254740992 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 18014398509481984 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 36028797018963968 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 72057594037927936 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 144115188075855872 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 288230376151711744 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 576460752303423488 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1152921504606846976 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2305843009213693952 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4611686018427387904 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_s64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9223372036854775808 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4294967296 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8589934592 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17179869184 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 34359738368 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 68719476736 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 137438953472 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 274877906944 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 549755813888 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1099511627776 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2199023255552 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4398046511104 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8796093022208 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17592186044416 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 35184372088832 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 70368744177664 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 140737488355328 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 281474976710656 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 562949953421312 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1125899906842624 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2251799813685248 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4503599627370496 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9007199254740992 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 18014398509481984 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 36028797018963968 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 72057594037927936 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 144115188075855872 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 288230376151711744 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 576460752303423488 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1152921504606846976 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2305843009213693952 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4611686018427387904 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_s64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9223372036854775808 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u8__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u8__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u16__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u16__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u32__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u32__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_33  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4294967296 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_34  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8589934592 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_35  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17179869184 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_36  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 34359738368 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_37  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 68719476736 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_38  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 137438953472 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_39  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 274877906944 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_40  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 549755813888 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_41  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1099511627776 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_42  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2199023255552 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_43  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4398046511104 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_44  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8796093022208 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_45  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17592186044416 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_46  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 35184372088832 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_47  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 70368744177664 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_48  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 140737488355328 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_49  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 281474976710656 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_50  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 562949953421312 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_51  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1125899906842624 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_52  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2251799813685248 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_53  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4503599627370496 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_54  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9007199254740992 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_55  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 18014398509481984 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_56  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 36028797018963968 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_57  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 72057594037927936 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_58  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 144115188075855872 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_59  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 288230376151711744 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_60  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 576460752303423488 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_61  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1152921504606846976 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_62  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2305843009213693952 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_63  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4611686018427387904 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrq_n_u64__n_64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9223372036854775808 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 128)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4294967296 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8589934592 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17179869184 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 34359738368 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 68719476736 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 137438953472 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 274877906944 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 549755813888 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1099511627776 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2199023255552 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4398046511104 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8796093022208 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17592186044416 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 35184372088832 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 70368744177664 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 140737488355328 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 281474976710656 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 562949953421312 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1125899906842624 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2251799813685248 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4503599627370496 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9007199254740992 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 18014398509481984 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 36028797018963968 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 72057594037927936 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 144115188075855872 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 288230376151711744 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 576460752303423488 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1152921504606846976 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2305843009213693952 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4611686018427387904 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshr_n_u64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9223372036854775808 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 64 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 128 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 256 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 512 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1024 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2048 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4096 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8192 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16384 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 32768 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 65536 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 131072 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 262144 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 524288 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1048576 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2097152 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4194304 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8388608 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 16777216 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 33554432 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 67108864 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 134217728 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 268435456 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 536870912 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1073741824 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2147483648 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4294967296 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8589934592 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17179869184 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 34359738368 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 68719476736 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 137438953472 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 274877906944 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 549755813888 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1099511627776 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2199023255552 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4398046511104 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 8796093022208 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 17592186044416 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 35184372088832 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 70368744177664 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 140737488355328 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 281474976710656 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 562949953421312 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1125899906842624 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2251799813685248 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4503599627370496 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9007199254740992 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 18014398509481984 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 36028797018963968 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 72057594037927936 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 144115188075855872 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 288230376151711744 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 576460752303423488 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 1152921504606846976 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 2305843009213693952 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 4611686018427387904 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrshrd_n_u64__n_64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 9223372036854775808 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 (bv 0 64)))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s8__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s8__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s16__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s16__n_16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_17  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_18  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_19  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_20  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_21  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_22  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_23  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_24  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_25  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_26  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_27  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_28  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_29  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_30  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_31  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s32__n_32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_17  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_18  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_19  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_20  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_21  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_22  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_23  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_24  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_25  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_26  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_27  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_28  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_29  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_30  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_31  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s32__n_32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_17  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_18  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_19  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_20  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_21  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_22  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_23  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_24  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_25  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_26  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_27  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_28  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_29  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_30  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_31  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_33  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_34  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_35  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_36  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_37  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_38  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_39  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_40  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_41  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_42  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_43  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_44  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_45  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_46  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_47  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_48  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_49  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_50  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_51  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_52  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_53  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_54  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_55  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_56  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_57  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_58  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_59  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_60  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_61  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_62  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_63  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_s64__n_64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_17  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_18  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_19  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_20  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_21  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_22  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_23  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_24  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_25  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_26  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_27  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_28  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_29  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_30  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_31  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_33  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_34  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_35  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_36  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_37  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_38  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_39  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_40  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_41  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_42  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_43  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_44  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_45  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_46  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_47  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_48  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_49  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_50  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_51  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_52  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_53  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_54  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_55  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_56  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_57  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_58  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_59  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_60  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_61  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_62  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_63  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_s64__n_64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_17  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_18  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_19  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_20  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_21  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_22  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_23  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_24  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_25  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_26  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_27  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_28  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_29  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_30  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_31  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_33  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_34  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_35  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_36  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_37  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_38  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_39  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_40  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_41  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_42  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_43  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_44  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_45  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_46  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_47  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_48  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_49  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_50  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_51  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_52  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_53  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_54  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_55  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_56  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_57  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_58  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_59  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_60  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_61  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_62  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_63  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_s64__n_64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u8__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u8__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  8))
 (define %20 (*  e0  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  7 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u16__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u16__n_16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  15 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_17  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_18  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_19  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_20  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_21  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_22  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_23  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_24  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_25  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_26  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_27  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_28  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_29  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_30  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_31  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u32__n_32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_17  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_18  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_19  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_20  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_21  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_22  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_23  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_24  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_25  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_26  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_27  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_28  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_29  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_30  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_31  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u32__n_32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  31 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_16  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_17  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_18  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_19  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_20  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_21  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_22  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_23  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_24  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_25  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_26  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_27  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_28  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_29  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_30  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_31  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_32  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_33  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_34  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_35  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_36  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_37  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_38  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_39  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_40  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_41  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_42  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_43  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_44  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_45  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_46  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_47  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_48  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_49  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_50  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_51  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_52  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_53  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_54  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_55  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_56  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_57  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_58  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_59  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_60  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_61  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_62  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_63  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsraq_n_u64__n_64  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_17  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_18  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_19  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_20  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_21  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_22  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_23  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_24  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_25  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_26  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_27  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_28  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_29  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_30  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_31  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_33  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_34  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_35  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_36  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_37  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_38  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_39  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_40  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_41  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_42  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_43  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_44  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_45  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_46  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_47  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_48  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_49  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_50  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_51  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_52  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_53  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_54  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_55  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_56  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_57  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_58  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_59  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_60  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_61  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_62  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_63  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsra_n_u64__n_64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 1 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 2 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 3 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 4 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 5 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 6 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 7 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_8  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 8 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_9  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 9 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_10  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 10 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_11  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 11 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_12  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 12 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_13  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 13 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_14  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 14 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_15  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 15 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_16  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 16 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_17  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 17 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_18  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 18 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_19  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 19 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_20  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 20 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_21  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 21 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_22  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 22 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_23  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 23 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_24  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 24 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_25  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 25 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_26  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 26 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_27  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 27 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_28  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 28 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_29  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 29 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_30  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 30 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_31  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 31 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_32  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 32 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_33  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 33 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_34  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 34 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_35  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 35 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_36  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 36 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_37  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 37 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_38  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 38 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_39  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 39 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_40  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 40 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_41  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 41 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_42  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 42 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_43  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 43 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_44  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 44 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_45  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 45 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_46  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 46 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_47  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 47 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_48  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 48 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_49  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 49 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_50  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 50 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_51  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 51 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_52  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 52 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_53  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 53 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_54  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 54 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_55  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 55 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_56  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 56 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_57  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 57 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_58  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 58 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_59  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 59 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_60  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 60 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_61  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 61 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_62  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 62 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_63  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 63 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vsrad_n_u64__n_64  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 %2))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %12  (bv 0 192)))
 (define %14 (bvashr  %13  (bv 64 192)))
 (define %19 (*  e0  64))
 (define %20 (*  e0  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %19 %5))
 (define %25 (extract  63 0 %14))
 (define %26 (bvadd  %23  %25))
 %26
)
)
)
result)
(define (vrsra_n_s8__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s8__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s8__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s8__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s8__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s8__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s8__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s8__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s8__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s16__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_9  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_10  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_11  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_12  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_13  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_14  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_15  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s16__n_16  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_17  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_18  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_19  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_20  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_21  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_22  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_23  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_24  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_25  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_26  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_27  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_28  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_29  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_30  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_31  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s32__n_32  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_9  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_10  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_11  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_12  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_13  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_14  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_15  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_16  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_17  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_18  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_19  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_20  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_21  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_22  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_23  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_24  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_25  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_26  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_27  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_28  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_29  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_30  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_31  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s32__n_32  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_9  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_10  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_11  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_12  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_13  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_14  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_15  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_16  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_17  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_18  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_19  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_20  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_21  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_22  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_23  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_24  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_25  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_26  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_27  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_28  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_29  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_30  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_31  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_32  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_33  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4294967296 192)))
 (define %16 (bvashr  %15  (bv 33 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_34  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8589934592 192)))
 (define %16 (bvashr  %15  (bv 34 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_35  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17179869184 192)))
 (define %16 (bvashr  %15  (bv 35 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_36  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 34359738368 192)))
 (define %16 (bvashr  %15  (bv 36 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_37  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 68719476736 192)))
 (define %16 (bvashr  %15  (bv 37 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_38  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 137438953472 192)))
 (define %16 (bvashr  %15  (bv 38 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_39  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 274877906944 192)))
 (define %16 (bvashr  %15  (bv 39 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_40  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 549755813888 192)))
 (define %16 (bvashr  %15  (bv 40 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_41  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1099511627776 192)))
 (define %16 (bvashr  %15  (bv 41 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_42  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2199023255552 192)))
 (define %16 (bvashr  %15  (bv 42 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_43  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4398046511104 192)))
 (define %16 (bvashr  %15  (bv 43 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_44  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8796093022208 192)))
 (define %16 (bvashr  %15  (bv 44 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_45  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17592186044416 192)))
 (define %16 (bvashr  %15  (bv 45 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_46  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 35184372088832 192)))
 (define %16 (bvashr  %15  (bv 46 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_47  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 70368744177664 192)))
 (define %16 (bvashr  %15  (bv 47 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_48  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 140737488355328 192)))
 (define %16 (bvashr  %15  (bv 48 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_49  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 281474976710656 192)))
 (define %16 (bvashr  %15  (bv 49 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_50  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 562949953421312 192)))
 (define %16 (bvashr  %15  (bv 50 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_51  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1125899906842624 192)))
 (define %16 (bvashr  %15  (bv 51 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_52  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2251799813685248 192)))
 (define %16 (bvashr  %15  (bv 52 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_53  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4503599627370496 192)))
 (define %16 (bvashr  %15  (bv 53 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_54  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9007199254740992 192)))
 (define %16 (bvashr  %15  (bv 54 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_55  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 18014398509481984 192)))
 (define %16 (bvashr  %15  (bv 55 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_56  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 36028797018963968 192)))
 (define %16 (bvashr  %15  (bv 56 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_57  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 72057594037927936 192)))
 (define %16 (bvashr  %15  (bv 57 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_58  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 144115188075855872 192)))
 (define %16 (bvashr  %15  (bv 58 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_59  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 288230376151711744 192)))
 (define %16 (bvashr  %15  (bv 59 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_60  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 576460752303423488 192)))
 (define %16 (bvashr  %15  (bv 60 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_61  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1152921504606846976 192)))
 (define %16 (bvashr  %15  (bv 61 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_62  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2305843009213693952 192)))
 (define %16 (bvashr  %15  (bv 62 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_63  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4611686018427387904 192)))
 (define %16 (bvashr  %15  (bv 63 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_s64__n_64  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9223372036854775808 192)))
 (define %16 (bvashr  %15  (bv 64 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_17  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_18  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_19  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_20  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_21  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_22  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_23  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_24  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_25  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_26  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_27  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_28  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_29  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_30  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_31  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_32  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_33  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4294967296 192)))
 (define %16 (bvashr  %15  (bv 33 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_34  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8589934592 192)))
 (define %16 (bvashr  %15  (bv 34 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_35  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17179869184 192)))
 (define %16 (bvashr  %15  (bv 35 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_36  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 34359738368 192)))
 (define %16 (bvashr  %15  (bv 36 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_37  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 68719476736 192)))
 (define %16 (bvashr  %15  (bv 37 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_38  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 137438953472 192)))
 (define %16 (bvashr  %15  (bv 38 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_39  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 274877906944 192)))
 (define %16 (bvashr  %15  (bv 39 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_40  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 549755813888 192)))
 (define %16 (bvashr  %15  (bv 40 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_41  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1099511627776 192)))
 (define %16 (bvashr  %15  (bv 41 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_42  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2199023255552 192)))
 (define %16 (bvashr  %15  (bv 42 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_43  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4398046511104 192)))
 (define %16 (bvashr  %15  (bv 43 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_44  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8796093022208 192)))
 (define %16 (bvashr  %15  (bv 44 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_45  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17592186044416 192)))
 (define %16 (bvashr  %15  (bv 45 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_46  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 35184372088832 192)))
 (define %16 (bvashr  %15  (bv 46 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_47  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 70368744177664 192)))
 (define %16 (bvashr  %15  (bv 47 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_48  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 140737488355328 192)))
 (define %16 (bvashr  %15  (bv 48 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_49  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 281474976710656 192)))
 (define %16 (bvashr  %15  (bv 49 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_50  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 562949953421312 192)))
 (define %16 (bvashr  %15  (bv 50 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_51  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1125899906842624 192)))
 (define %16 (bvashr  %15  (bv 51 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_52  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2251799813685248 192)))
 (define %16 (bvashr  %15  (bv 52 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_53  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4503599627370496 192)))
 (define %16 (bvashr  %15  (bv 53 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_54  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9007199254740992 192)))
 (define %16 (bvashr  %15  (bv 54 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_55  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 18014398509481984 192)))
 (define %16 (bvashr  %15  (bv 55 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_56  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 36028797018963968 192)))
 (define %16 (bvashr  %15  (bv 56 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_57  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 72057594037927936 192)))
 (define %16 (bvashr  %15  (bv 57 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_58  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 144115188075855872 192)))
 (define %16 (bvashr  %15  (bv 58 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_59  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 288230376151711744 192)))
 (define %16 (bvashr  %15  (bv 59 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_60  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 576460752303423488 192)))
 (define %16 (bvashr  %15  (bv 60 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_61  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1152921504606846976 192)))
 (define %16 (bvashr  %15  (bv 61 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_62  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2305843009213693952 192)))
 (define %16 (bvashr  %15  (bv 62 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_63  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4611686018427387904 192)))
 (define %16 (bvashr  %15  (bv 63 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_s64__n_64  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9223372036854775808 192)))
 (define %16 (bvashr  %15  (bv 64 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_17  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_18  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_19  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_20  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_21  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_22  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_23  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_24  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_25  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_26  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_27  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_28  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_29  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_30  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_31  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_32  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_33  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4294967296 192)))
 (define %16 (bvashr  %15  (bv 33 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_34  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8589934592 192)))
 (define %16 (bvashr  %15  (bv 34 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_35  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17179869184 192)))
 (define %16 (bvashr  %15  (bv 35 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_36  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 34359738368 192)))
 (define %16 (bvashr  %15  (bv 36 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_37  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 68719476736 192)))
 (define %16 (bvashr  %15  (bv 37 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_38  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 137438953472 192)))
 (define %16 (bvashr  %15  (bv 38 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_39  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 274877906944 192)))
 (define %16 (bvashr  %15  (bv 39 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_40  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 549755813888 192)))
 (define %16 (bvashr  %15  (bv 40 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_41  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1099511627776 192)))
 (define %16 (bvashr  %15  (bv 41 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_42  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2199023255552 192)))
 (define %16 (bvashr  %15  (bv 42 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_43  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4398046511104 192)))
 (define %16 (bvashr  %15  (bv 43 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_44  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8796093022208 192)))
 (define %16 (bvashr  %15  (bv 44 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_45  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17592186044416 192)))
 (define %16 (bvashr  %15  (bv 45 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_46  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 35184372088832 192)))
 (define %16 (bvashr  %15  (bv 46 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_47  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 70368744177664 192)))
 (define %16 (bvashr  %15  (bv 47 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_48  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 140737488355328 192)))
 (define %16 (bvashr  %15  (bv 48 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_49  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 281474976710656 192)))
 (define %16 (bvashr  %15  (bv 49 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_50  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 562949953421312 192)))
 (define %16 (bvashr  %15  (bv 50 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_51  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1125899906842624 192)))
 (define %16 (bvashr  %15  (bv 51 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_52  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2251799813685248 192)))
 (define %16 (bvashr  %15  (bv 52 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_53  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4503599627370496 192)))
 (define %16 (bvashr  %15  (bv 53 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_54  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9007199254740992 192)))
 (define %16 (bvashr  %15  (bv 54 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_55  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 18014398509481984 192)))
 (define %16 (bvashr  %15  (bv 55 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_56  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 36028797018963968 192)))
 (define %16 (bvashr  %15  (bv 56 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_57  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 72057594037927936 192)))
 (define %16 (bvashr  %15  (bv 57 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_58  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 144115188075855872 192)))
 (define %16 (bvashr  %15  (bv 58 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_59  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 288230376151711744 192)))
 (define %16 (bvashr  %15  (bv 59 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_60  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 576460752303423488 192)))
 (define %16 (bvashr  %15  (bv 60 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_61  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1152921504606846976 192)))
 (define %16 (bvashr  %15  (bv 61 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_62  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2305843009213693952 192)))
 (define %16 (bvashr  %15  (bv 62 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_63  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4611686018427387904 192)))
 (define %16 (bvashr  %15  (bv 63 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_s64__n_64  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9223372036854775808 192)))
 (define %16 (bvashr  %15  (bv 64 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u8__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u8__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  e0  8))
 (define %10 (*  e0  8))
 (define %12 (+  %10  7))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  7 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u16__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_9  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_10  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_11  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_12  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_13  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_14  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_15  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u16__n_16  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  15 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_17  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_18  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_19  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_20  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_21  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_22  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_23  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_24  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_25  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_26  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_27  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_28  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_29  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_30  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_31  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u32__n_32  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_9  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_10  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_11  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_12  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_13  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_14  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_15  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_16  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_17  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_18  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_19  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_20  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_21  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_22  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_23  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_24  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_25  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_26  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_27  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_28  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_29  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_30  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_31  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u32__n_32  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  31 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_1  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_2  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_3  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_4  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_5  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_6  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_7  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_8  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_9  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_10  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_11  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_12  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_13  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_14  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_15  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_16  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_17  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_18  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_19  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_20  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_21  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_22  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_23  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_24  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_25  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_26  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_27  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_28  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_29  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_30  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_31  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_32  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_33  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4294967296 192)))
 (define %16 (bvashr  %15  (bv 33 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_34  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8589934592 192)))
 (define %16 (bvashr  %15  (bv 34 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_35  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17179869184 192)))
 (define %16 (bvashr  %15  (bv 35 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_36  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 34359738368 192)))
 (define %16 (bvashr  %15  (bv 36 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_37  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 68719476736 192)))
 (define %16 (bvashr  %15  (bv 37 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_38  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 137438953472 192)))
 (define %16 (bvashr  %15  (bv 38 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_39  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 274877906944 192)))
 (define %16 (bvashr  %15  (bv 39 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_40  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 549755813888 192)))
 (define %16 (bvashr  %15  (bv 40 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_41  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1099511627776 192)))
 (define %16 (bvashr  %15  (bv 41 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_42  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2199023255552 192)))
 (define %16 (bvashr  %15  (bv 42 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_43  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4398046511104 192)))
 (define %16 (bvashr  %15  (bv 43 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_44  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8796093022208 192)))
 (define %16 (bvashr  %15  (bv 44 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_45  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17592186044416 192)))
 (define %16 (bvashr  %15  (bv 45 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_46  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 35184372088832 192)))
 (define %16 (bvashr  %15  (bv 46 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_47  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 70368744177664 192)))
 (define %16 (bvashr  %15  (bv 47 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_48  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 140737488355328 192)))
 (define %16 (bvashr  %15  (bv 48 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_49  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 281474976710656 192)))
 (define %16 (bvashr  %15  (bv 49 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_50  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 562949953421312 192)))
 (define %16 (bvashr  %15  (bv 50 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_51  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1125899906842624 192)))
 (define %16 (bvashr  %15  (bv 51 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_52  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2251799813685248 192)))
 (define %16 (bvashr  %15  (bv 52 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_53  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4503599627370496 192)))
 (define %16 (bvashr  %15  (bv 53 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_54  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9007199254740992 192)))
 (define %16 (bvashr  %15  (bv 54 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_55  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 18014398509481984 192)))
 (define %16 (bvashr  %15  (bv 55 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_56  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 36028797018963968 192)))
 (define %16 (bvashr  %15  (bv 56 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_57  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 72057594037927936 192)))
 (define %16 (bvashr  %15  (bv 57 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_58  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 144115188075855872 192)))
 (define %16 (bvashr  %15  (bv 58 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_59  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 288230376151711744 192)))
 (define %16 (bvashr  %15  (bv 59 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_60  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 576460752303423488 192)))
 (define %16 (bvashr  %15  (bv 60 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_61  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1152921504606846976 192)))
 (define %16 (bvashr  %15  (bv 61 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_62  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2305843009213693952 192)))
 (define %16 (bvashr  %15  (bv 62 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_63  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4611686018427387904 192)))
 (define %16 (bvashr  %15  (bv 63 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsraq_n_u64__n_64  a b )
(define %2 (extract  127 0 b))
(define %7 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9223372036854775808 192)))
 (define %16 (bvashr  %15  (bv 64 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_17  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_18  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_19  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_20  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_21  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_22  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_23  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_24  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_25  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_26  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_27  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_28  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_29  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_30  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_31  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_32  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_33  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4294967296 192)))
 (define %16 (bvashr  %15  (bv 33 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_34  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8589934592 192)))
 (define %16 (bvashr  %15  (bv 34 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_35  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17179869184 192)))
 (define %16 (bvashr  %15  (bv 35 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_36  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 34359738368 192)))
 (define %16 (bvashr  %15  (bv 36 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_37  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 68719476736 192)))
 (define %16 (bvashr  %15  (bv 37 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_38  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 137438953472 192)))
 (define %16 (bvashr  %15  (bv 38 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_39  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 274877906944 192)))
 (define %16 (bvashr  %15  (bv 39 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_40  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 549755813888 192)))
 (define %16 (bvashr  %15  (bv 40 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_41  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1099511627776 192)))
 (define %16 (bvashr  %15  (bv 41 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_42  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2199023255552 192)))
 (define %16 (bvashr  %15  (bv 42 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_43  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4398046511104 192)))
 (define %16 (bvashr  %15  (bv 43 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_44  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8796093022208 192)))
 (define %16 (bvashr  %15  (bv 44 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_45  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17592186044416 192)))
 (define %16 (bvashr  %15  (bv 45 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_46  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 35184372088832 192)))
 (define %16 (bvashr  %15  (bv 46 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_47  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 70368744177664 192)))
 (define %16 (bvashr  %15  (bv 47 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_48  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 140737488355328 192)))
 (define %16 (bvashr  %15  (bv 48 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_49  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 281474976710656 192)))
 (define %16 (bvashr  %15  (bv 49 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_50  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 562949953421312 192)))
 (define %16 (bvashr  %15  (bv 50 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_51  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1125899906842624 192)))
 (define %16 (bvashr  %15  (bv 51 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_52  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2251799813685248 192)))
 (define %16 (bvashr  %15  (bv 52 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_53  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4503599627370496 192)))
 (define %16 (bvashr  %15  (bv 53 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_54  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9007199254740992 192)))
 (define %16 (bvashr  %15  (bv 54 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_55  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 18014398509481984 192)))
 (define %16 (bvashr  %15  (bv 55 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_56  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 36028797018963968 192)))
 (define %16 (bvashr  %15  (bv 56 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_57  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 72057594037927936 192)))
 (define %16 (bvashr  %15  (bv 57 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_58  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 144115188075855872 192)))
 (define %16 (bvashr  %15  (bv 58 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_59  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 288230376151711744 192)))
 (define %16 (bvashr  %15  (bv 59 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_60  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 576460752303423488 192)))
 (define %16 (bvashr  %15  (bv 60 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_61  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1152921504606846976 192)))
 (define %16 (bvashr  %15  (bv 61 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_62  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2305843009213693952 192)))
 (define %16 (bvashr  %15  (bv 62 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_63  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4611686018427387904 192)))
 (define %16 (bvashr  %15  (bv 63 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsra_n_u64__n_64  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9223372036854775808 192)))
 (define %16 (bvashr  %15  (bv 64 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_1  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_2  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_3  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_4  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_5  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_6  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_7  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 64 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_8  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 128 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_9  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 256 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_10  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 512 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_11  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1024 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_12  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2048 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_13  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4096 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_14  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8192 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_15  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16384 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_16  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 32768 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_17  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 65536 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_18  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 131072 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_19  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 262144 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_20  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 524288 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_21  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1048576 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_22  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2097152 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_23  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4194304 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_24  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8388608 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_25  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 16777216 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_26  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 33554432 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_27  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 67108864 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_28  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 134217728 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_29  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 268435456 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_30  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 536870912 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_31  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1073741824 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_32  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2147483648 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_33  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4294967296 192)))
 (define %16 (bvashr  %15  (bv 33 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_34  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8589934592 192)))
 (define %16 (bvashr  %15  (bv 34 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_35  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17179869184 192)))
 (define %16 (bvashr  %15  (bv 35 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_36  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 34359738368 192)))
 (define %16 (bvashr  %15  (bv 36 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_37  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 68719476736 192)))
 (define %16 (bvashr  %15  (bv 37 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_38  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 137438953472 192)))
 (define %16 (bvashr  %15  (bv 38 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_39  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 274877906944 192)))
 (define %16 (bvashr  %15  (bv 39 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_40  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 549755813888 192)))
 (define %16 (bvashr  %15  (bv 40 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_41  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1099511627776 192)))
 (define %16 (bvashr  %15  (bv 41 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_42  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2199023255552 192)))
 (define %16 (bvashr  %15  (bv 42 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_43  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4398046511104 192)))
 (define %16 (bvashr  %15  (bv 43 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_44  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 8796093022208 192)))
 (define %16 (bvashr  %15  (bv 44 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_45  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 17592186044416 192)))
 (define %16 (bvashr  %15  (bv 45 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_46  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 35184372088832 192)))
 (define %16 (bvashr  %15  (bv 46 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_47  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 70368744177664 192)))
 (define %16 (bvashr  %15  (bv 47 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_48  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 140737488355328 192)))
 (define %16 (bvashr  %15  (bv 48 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_49  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 281474976710656 192)))
 (define %16 (bvashr  %15  (bv 49 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_50  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 562949953421312 192)))
 (define %16 (bvashr  %15  (bv 50 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_51  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1125899906842624 192)))
 (define %16 (bvashr  %15  (bv 51 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_52  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2251799813685248 192)))
 (define %16 (bvashr  %15  (bv 52 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_53  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4503599627370496 192)))
 (define %16 (bvashr  %15  (bv 53 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_54  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9007199254740992 192)))
 (define %16 (bvashr  %15  (bv 54 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_55  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 18014398509481984 192)))
 (define %16 (bvashr  %15  (bv 55 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_56  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 36028797018963968 192)))
 (define %16 (bvashr  %15  (bv 56 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_57  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 72057594037927936 192)))
 (define %16 (bvashr  %15  (bv 57 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_58  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 144115188075855872 192)))
 (define %16 (bvashr  %15  (bv 58 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_59  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 288230376151711744 192)))
 (define %16 (bvashr  %15  (bv 59 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_60  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 576460752303423488 192)))
 (define %16 (bvashr  %15  (bv 60 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_61  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 1152921504606846976 192)))
 (define %16 (bvashr  %15  (bv 61 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_62  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 2305843009213693952 192)))
 (define %16 (bvashr  %15  (bv 62 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_63  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 4611686018427387904 192)))
 (define %16 (bvashr  %15  (bv 63 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vrsrad_n_u64__n_64  a b )
(define %2 (extract  63 0 b))
(define %7 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %9 (*  e0  64))
 (define %10 (*  e0  64))
 (define %12 (+  %10  63))
 (define %13 (extract  %12 %9 %2))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 9223372036854775808 192)))
 (define %16 (bvashr  %15  (bv 64 192)))
 (define %21 (*  e0  64))
 (define %22 (*  e0  64))
 (define %24 (+  %22  63))
 (define %25 (extract  %24 %21 %7))
 (define %27 (extract  63 0 %16))
 (define %28 (bvadd  %25  %27))
 %28
)
)
)
result)
(define (vqshlb_n_s8__n_0  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_s8__n_1  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_s8__n_2  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_s8__n_3  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_s8__n_4  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_s8__n_5  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_s8__n_6  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_s8__n_7  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_0  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_1  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_2  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_3  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_4  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_5  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_6  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_7  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_8  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_9  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_10  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_11  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_12  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_13  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_14  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_s16__n_15  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_0  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_1  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_2  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_3  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_4  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_5  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_6  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_7  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_8  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_9  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_10  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_11  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_12  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_13  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_14  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_15  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_16  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_17  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_18  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_19  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_20  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_21  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_22  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_23  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_24  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_25  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_26  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_27  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_28  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_29  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_30  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_s32__n_31  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_0  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_1  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_2  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_3  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_4  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_5  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_6  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlb_n_u8__n_7  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_0  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_1  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_2  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_3  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_4  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_5  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_6  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_7  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_8  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_9  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_10  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_11  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_12  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_13  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_14  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlh_n_u16__n_15  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_0  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_1  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_2  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_3  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_4  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_5  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_6  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_7  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_8  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_9  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_10  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_11  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_12  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_13  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_14  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_15  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_16  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_17  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_18  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_19  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_20  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_21  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_22  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_23  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_24  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_25  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_26  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_27  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_28  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_29  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_30  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshls_n_u32__n_31  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s8__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_0  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluq_n_s8__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s16__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_0  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluq_n_s16__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlu_n_s32__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_0  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s32__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_0  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_1  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_2  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_3  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_4  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_5  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_6  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_7  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_9  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_10  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_11  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_12  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_13  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_14  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_15  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_17  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_18  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_19  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_20  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_21  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_22  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_23  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_24  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_25  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_26  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_27  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_28  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_29  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_30  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_31  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 32 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_33  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 33 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_34  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 34 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_35  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 35 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_36  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 36 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_37  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 37 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_38  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 38 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_39  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 39 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_40  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 40 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_41  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 41 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_42  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 42 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_43  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 43 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_44  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 44 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_45  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 45 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_46  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 46 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_47  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 47 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_48  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 48 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_49  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 49 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_50  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 50 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_51  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 51 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_52  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 52 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_53  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 53 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_54  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 54 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_55  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 55 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_56  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 56 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_57  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 57 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_58  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 58 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_59  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 59 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_60  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 60 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_61  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 61 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_62  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 62 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshluq_n_s64__n_63  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 63 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 32 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 33 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 34 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 35 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 36 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 37 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 38 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 39 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 40 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 41 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 42 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 43 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 44 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 45 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 46 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 47 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 48 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 49 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 50 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 51 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 52 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 53 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 54 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 55 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 56 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 57 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 58 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 59 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 60 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 61 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 62 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlu_n_s64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 63 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_0  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_1  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_2  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_3  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_4  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_5  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_6  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshlub_n_s8__n_7  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 8 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_0  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_1  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_2  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_3  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_4  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_5  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_6  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_7  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_8  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_9  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_10  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_11  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_12  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_13  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_14  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshluh_n_s16__n_15  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 16 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_0  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_1  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_2  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_3  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_4  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_5  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_6  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_7  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_8  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_9  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_10  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_11  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_12  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_13  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_14  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_15  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_16  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_17  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_18  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_19  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_20  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_21  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_22  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_23  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_24  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_25  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_26  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_27  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_28  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_29  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_30  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlus_n_s32__n_31  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvusat %10 192 32 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 0 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 1 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 2 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 3 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 4 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 5 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 6 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 7 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 8 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 9 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 10 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 11 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 12 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 13 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 14 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 15 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 16 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 17 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 18 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 19 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 20 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 21 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 22 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 23 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 24 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 25 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 26 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 27 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 28 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 29 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 30 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 31 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 32 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_33  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 33 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_34  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 34 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_35  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 35 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_36  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 36 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_37  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 37 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_38  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 38 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_39  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 39 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_40  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 40 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_41  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 41 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_42  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 42 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_43  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 43 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_44  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 44 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_45  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 45 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_46  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 46 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_47  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 47 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_48  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 48 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_49  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 49 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_50  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 50 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_51  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 51 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_52  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 52 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_53  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 53 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_54  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 54 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_55  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 55 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_56  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 56 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_57  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 57 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_58  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 58 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_59  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 59 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_60  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 60 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_61  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 61 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_62  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 62 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vqshlud_n_s64__n_63  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (armshl  %9  (bv 63 192)))
 (define %15 (bvusat %10 192 64 ))
 %15
)
)
)
result)
(define (vshrn_n_s16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_s64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_n_u64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshrn_high_n_s16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_s64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vshrn_high_n_u64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
(define %23 (concat result r))
%23)
(define (vqshrun_n_s16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_n_s64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrun_high_n_s16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrun_high_n_s64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrunh_n_s16__n_1  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrunh_n_s16__n_2  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrunh_n_s16__n_3  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrunh_n_s16__n_4  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrunh_n_s16__n_5  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrunh_n_s16__n_6  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrunh_n_s16__n_7  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrunh_n_s16__n_8  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_1  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_2  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_3  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_4  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_5  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_6  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_7  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_8  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_9  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_10  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_11  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_12  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_13  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_14  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_15  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshruns_n_s32__n_16  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_1  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_2  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_3  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_4  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_5  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_6  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_7  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_8  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_9  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_10  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_11  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_12  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_13  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_14  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_15  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_16  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_17  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_18  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_19  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_20  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_21  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_22  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_23  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_24  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_25  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_26  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_27  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_28  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_29  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_30  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_31  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrund_n_s64__n_32  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqrshrun_n_s16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_n_s64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrun_high_n_s16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrun_high_n_s64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrunh_n_s16__n_1  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrunh_n_s16__n_2  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrunh_n_s16__n_3  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrunh_n_s16__n_4  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrunh_n_s16__n_5  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrunh_n_s16__n_6  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrunh_n_s16__n_7  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrunh_n_s16__n_8  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_1  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_2  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_3  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_4  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_5  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_6  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_7  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_8  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_9  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_10  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_11  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_12  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_13  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_14  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_15  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshruns_n_s32__n_16  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_1  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_2  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_3  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_4  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_5  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_6  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_7  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_8  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_9  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_10  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_11  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_12  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_13  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_14  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_15  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_16  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_17  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_18  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_19  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_20  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_21  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_22  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_23  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_24  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_25  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_26  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_27  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_28  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_29  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_30  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_31  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrund_n_s64__n_32  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqshrn_n_s16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_s64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_high_n_s16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_s64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_n_u16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_n_u64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrn_high_n_u16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrn_high_n_u64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vqshrnh_n_s16__n_1  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_s16__n_2  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_s16__n_3  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_s16__n_4  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_s16__n_5  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_s16__n_6  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_s16__n_7  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_s16__n_8  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_1  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_2  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_3  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_4  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_5  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_6  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_7  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_8  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_9  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_10  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_11  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_12  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_13  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_14  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_15  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_s32__n_16  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_1  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_2  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_3  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_4  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_5  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_6  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_7  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_8  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_9  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_10  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_11  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_12  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_13  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_14  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_15  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_16  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_17  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_18  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_19  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_20  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_21  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_22  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_23  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_24  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_25  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_26  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_27  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_28  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_29  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_30  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_31  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_s64__n_32  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_1  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_2  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_3  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_4  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_5  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_6  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_7  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrnh_n_u16__n_8  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  16))
 (define %8 (*  e0  16))
 (define %11 (+  %8  15))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_1  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_2  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_3  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_4  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_5  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_6  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_7  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_8  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_9  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_10  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_11  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_12  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_13  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_14  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_15  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrns_n_u32__n_16  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  32))
 (define %8 (*  e0  32))
 (define %11 (+  %8  31))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_1  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 1 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_2  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 2 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_3  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 3 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_4  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 4 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_5  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 5 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_6  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 6 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_7  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 7 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_8  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 8 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_9  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 9 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_10  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 10 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_11  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 11 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_12  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 12 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_13  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 13 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_14  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 14 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_15  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 15 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_16  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 16 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_17  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 17 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_18  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 18 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_19  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 19 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_20  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 20 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_21  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 21 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_22  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 22 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_23  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 23 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_24  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 24 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_25  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 25 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_26  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 26 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_27  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 27 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_28  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 28 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_29  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 29 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_30  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 30 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_31  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 31 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshrnd_n_u64__n_32  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %6 (*  e0  64))
 (define %8 (*  e0  64))
 (define %11 (+  %8  63))
 (define %13 (extract  %11 %6 %3))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (bvashr  %15  (bv 32 192)))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vrshrn_n_s16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_s64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_n_u64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
result)
(define (vrshrn_high_n_s16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_s64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  7 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  15 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vrshrn_high_n_u64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %24 (extract  31 0 %18))
 %24
)
)
)
(define %25 (concat result r))
%25)
(define (vqrshrn_n_s16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_s64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_high_n_s16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_s64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_n_u16__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u16__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u16__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u16__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u16__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u16__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u16__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u16__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u32__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_1  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_2  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_3  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_4  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_5  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_6  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_7  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_8  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_9  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_10  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_11  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_12  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_13  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_14  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_15  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_17  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_18  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_19  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_20  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_21  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_22  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_23  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_24  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_25  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_26  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_27  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_28  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_29  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_30  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_31  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_n_u64__n_32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrn_high_n_u16__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u16__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u16__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u16__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u16__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u16__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u16__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u16__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u32__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_1  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_2  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_3  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_4  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_5  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_6  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_7  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_8  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_9  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_10  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_11  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_12  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_13  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_14  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_15  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_17  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_18  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_19  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_20  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_21  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_22  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_23  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_24  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_25  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_26  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_27  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_28  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_29  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_30  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_31  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrn_high_n_u64__n_32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
(define %24 (concat result r))
%24)
(define (vqrshrnh_n_s16__n_1  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_s16__n_2  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_s16__n_3  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_s16__n_4  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_s16__n_5  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_s16__n_6  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_s16__n_7  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_s16__n_8  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_1  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_2  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_3  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_4  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_5  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_6  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_7  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_8  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_9  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_10  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_11  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_12  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_13  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_14  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_15  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_s32__n_16  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_1  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_2  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_3  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_4  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_5  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_6  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_7  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_8  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_9  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_10  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_11  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_12  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_13  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_14  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_15  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_16  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_17  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_18  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_19  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_20  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_21  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_22  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_23  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_24  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_25  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_26  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_27  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_28  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_29  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_30  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_31  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_s64__n_32  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_1  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_2  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_3  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_4  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_5  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_6  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_7  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrnh_n_u16__n_8  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  16))
 (define %10 (*  e0  16))
 (define %13 (+  %10  15))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 8 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_1  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_2  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_3  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_4  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_5  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_6  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_7  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_8  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_9  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_10  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_11  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_12  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_13  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_14  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_15  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrns_n_u32__n_16  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  32))
 (define %10 (*  e0  32))
 (define %13 (+  %10  31))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 16 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_1  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1 192)))
 (define %18 (bvashr  %17  (bv 1 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_2  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2 192)))
 (define %18 (bvashr  %17  (bv 2 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_3  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4 192)))
 (define %18 (bvashr  %17  (bv 3 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_4  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8 192)))
 (define %18 (bvashr  %17  (bv 4 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_5  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16 192)))
 (define %18 (bvashr  %17  (bv 5 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_6  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32 192)))
 (define %18 (bvashr  %17  (bv 6 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_7  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 64 192)))
 (define %18 (bvashr  %17  (bv 7 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_8  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 128 192)))
 (define %18 (bvashr  %17  (bv 8 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_9  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 256 192)))
 (define %18 (bvashr  %17  (bv 9 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_10  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 512 192)))
 (define %18 (bvashr  %17  (bv 10 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_11  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1024 192)))
 (define %18 (bvashr  %17  (bv 11 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_12  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2048 192)))
 (define %18 (bvashr  %17  (bv 12 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_13  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4096 192)))
 (define %18 (bvashr  %17  (bv 13 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_14  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8192 192)))
 (define %18 (bvashr  %17  (bv 14 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_15  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16384 192)))
 (define %18 (bvashr  %17  (bv 15 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_16  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %18 (bvashr  %17  (bv 16 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_17  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 65536 192)))
 (define %18 (bvashr  %17  (bv 17 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_18  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 131072 192)))
 (define %18 (bvashr  %17  (bv 18 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_19  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 262144 192)))
 (define %18 (bvashr  %17  (bv 19 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_20  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 524288 192)))
 (define %18 (bvashr  %17  (bv 20 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_21  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1048576 192)))
 (define %18 (bvashr  %17  (bv 21 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_22  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2097152 192)))
 (define %18 (bvashr  %17  (bv 22 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_23  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 4194304 192)))
 (define %18 (bvashr  %17  (bv 23 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_24  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 8388608 192)))
 (define %18 (bvashr  %17  (bv 24 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_25  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 16777216 192)))
 (define %18 (bvashr  %17  (bv 25 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_26  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 33554432 192)))
 (define %18 (bvashr  %17  (bv 26 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_27  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 67108864 192)))
 (define %18 (bvashr  %17  (bv 27 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_28  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 134217728 192)))
 (define %18 (bvashr  %17  (bv 28 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_29  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 268435456 192)))
 (define %18 (bvashr  %17  (bv 29 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_30  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 536870912 192)))
 (define %18 (bvashr  %17  (bv 30 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_31  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 1073741824 192)))
 (define %18 (bvashr  %17  (bv 31 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vqrshrnd_n_u64__n_32  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %8 (*  e0  64))
 (define %10 (*  e0  64))
 (define %13 (+  %10  63))
 (define %15 (extract  %13 %8 %3))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %18 (bvashr  %17  (bv 32 192)))
 (define %23 (bvusat %18 192 32 ))
 %23
)
)
)
result)
(define (vshll_n_s8__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s8__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s8__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s8__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s8__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s8__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s8__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s8__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s16__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 16 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 17 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 18 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 19 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 20 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 21 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 22 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 23 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 24 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 25 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 26 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 27 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 28 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 29 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 30 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_s32__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 31 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_0  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_1  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_2  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_3  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_4  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_5  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_6  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s8__n_7  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_0  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_1  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_2  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_3  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_4  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_5  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_6  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_7  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_9  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_10  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_11  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_12  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_13  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_14  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s16__n_15  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_0  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_1  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_2  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_3  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_4  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_5  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_6  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_7  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_9  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_10  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_11  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_12  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_13  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_14  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_15  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_16  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 16 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_17  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 17 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_18  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 18 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_19  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 19 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_20  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 20 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_21  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 21 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_22  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 22 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_23  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 23 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_24  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 24 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_25  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 25 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_26  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 26 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_27  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 27 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_28  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 28 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_29  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 29 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_30  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 30 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_s32__n_31  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 31 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vmovl_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vmovl_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vmovl_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vmovl_high_s8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vmovl_high_s16  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vmovl_high_s32  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u8__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u16__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_0  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_1  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_2  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_3  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_4  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_5  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_6  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_7  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_9  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_10  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_11  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_12  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_13  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_14  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_15  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 16 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_17  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 17 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_18  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 18 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_19  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 19 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_20  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 20 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_21  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 21 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_22  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 22 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_23  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 23 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_24  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 24 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_25  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 25 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_26  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 26 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_27  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 27 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_28  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 28 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_29  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 29 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_30  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 30 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_n_u32__n_31  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 31 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_0  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_1  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_2  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_3  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_4  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_5  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_6  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u8__n_7  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_0  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_1  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_2  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_3  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_4  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_5  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_6  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_7  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_9  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_10  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_11  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_12  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_13  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_14  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u16__n_15  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_0  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_1  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 1 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_2  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 2 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_3  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 3 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_4  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 4 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_5  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 5 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_6  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 6 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_7  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 7 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 8 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_9  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 9 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_10  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 10 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_11  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 11 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_12  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 12 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_13  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 13 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_14  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 14 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_15  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 15 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_16  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 16 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_17  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 17 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_18  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 18 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_19  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 19 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_20  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 20 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_21  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 21 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_22  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 22 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_23  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 23 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_24  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 24 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_25  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 25 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_26  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 26 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_27  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 27 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_28  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 28 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_29  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 29 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_30  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 30 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vshll_high_n_u32__n_31  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 31 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vmovl_u8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vmovl_u16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vmovl_u32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vmovl_high_u8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  15 0 %11))
 %22
)
)
)
result)
(define (vmovl_high_u16  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  31 0 %11))
 %22
)
)
)
result)
(define (vmovl_high_u32  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (armshl  %10  (bv 0 192)))
 (define %22 (extract  63 0 %11))
 %22
)
)
)
result)
(define (vmovn_s16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
result)
(define (vmovn_s32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
result)
(define (vmovn_s64  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
result)
(define (vmovn_u16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
result)
(define (vmovn_u32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
result)
(define (vmovn_u64  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
result)
(define (vmovn_high_s16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vmovn_high_s32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vmovn_high_s64  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vmovn_high_u16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vmovn_high_u32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vmovn_high_u64  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovn_s16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 8 ))
 %20
)
)
)
result)
(define (vqmovn_s32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 16 ))
 %20
)
)
)
result)
(define (vqmovn_s64  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 32 ))
 %20
)
)
)
result)
(define (vqmovn_high_s16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 8 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovn_high_s32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 16 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovn_high_s64  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 32 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovn_u16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 8 ))
 %20
)
)
)
result)
(define (vqmovn_u32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 16 ))
 %20
)
)
)
result)
(define (vqmovn_u64  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 32 ))
 %20
)
)
)
result)
(define (vqmovn_high_u16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 8 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovn_high_u32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 16 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovn_high_u64  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 32 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovnh_s16  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 8 ))
 %20
)
)
)
result)
(define (vqmovns_s32  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 16 ))
 %20
)
)
)
result)
(define (vqmovnd_s64  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvssat %19 192 32 ))
 %20
)
)
)
result)
(define (vqmovnh_u16  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 8 ))
 %20
)
)
)
result)
(define (vqmovns_u32  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 16 ))
 %20
)
)
)
result)
(define (vqmovnd_u64  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (zero-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 32 ))
 %20
)
)
)
result)
(define (vqmovun_s16  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 8 ))
 %20
)
)
)
result)
(define (vqmovun_s32  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 16 ))
 %20
)
)
)
result)
(define (vqmovun_s64  a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 32 ))
 %20
)
)
)
result)
(define (vqmovun_high_s16  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 8 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovun_high_s32  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 16 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovun_high_s64  r a )
(define %3 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 32 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqmovunh_s16  a )
(define %3 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 8 ))
 %20
)
)
)
result)
(define (vqmovuns_s32  a )
(define %3 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 16 ))
 %20
)
)
)
result)
(define (vqmovund_s64  a )
(define %3 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 %3))
 (define %19 (sign-extend  %14 (bitvector 192)))
 (define %20 (bvusat %19 192 32 ))
 %20
)
)
)
result)
(define (vmla_lane_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_s16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_s16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_s16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_s16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_s32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_s32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_u16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_u16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_u16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_u16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_lane_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_u32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_lane_u32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_4  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_5  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_6  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s16__lane_7  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_s32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s32__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_s32__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_4  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_5  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_6  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u16__lane_7  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_laneq_u32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u32__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_laneq_u32__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_n_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_n_s16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_n_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_n_s32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_n_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_n_u16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmla_n_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlaq_n_u32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvadd  %33  %24))
 %34
)
)
)
result)
(define (vmlal_lane_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_s32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_4  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_5  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_6  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s16__lane_7  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s32__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_s32__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_n_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_n_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_lane_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_u16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_u16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_u16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_u16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_u32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_lane_u32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_laneq_u32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_4  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_5  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_6  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u16__lane_7  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u32__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_laneq_u32__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_n_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_n_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_n_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vmlal_high_n_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvadd  %45  %28))
 %46
)
)
)
result)
(define (vqdmlal_lane_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_lane_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_lane_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_lane_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_lane_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_lane_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_lane_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_lane_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_lane_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_lane_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_lane_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_lane_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_laneq_s32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_4  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_5  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_6  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s16__lane_7  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s32__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_laneq_s32__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_n_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_n_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlal_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlal_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlalh_lane_s16__lane_0  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_lane_s16__lane_1  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_lane_s16__lane_2  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_lane_s16__lane_3  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlals_lane_s32__lane_0  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlals_lane_s32__lane_1  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_0  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_1  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_2  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_3  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_4  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_5  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_6  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlalh_laneq_s16__lane_7  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlals_laneq_s32__lane_0  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlals_laneq_s32__lane_1  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlals_laneq_s32__lane_2  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlals_laneq_s32__lane_3  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvadd  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vmls_lane_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_s16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_s16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_s16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_s16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_s32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_s32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_u16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_u16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_u16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_u16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_lane_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_u32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_lane_u32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  63 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_4  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_5  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_6  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s16__lane_7  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_s32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s32__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_s32__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 16 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  47 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 48 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_4  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  79 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_5  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 80 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_6  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  111 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u16__lane_7  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 112 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_laneq_u32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  63 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u32__lane_0  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u32__lane_1  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  63 32 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u32__lane_2  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  95 64 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_laneq_u32__lane_3  a b v )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 v))
(define %8 (extract  127 0 a))
(define %13 (extract  127 96 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_n_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_n_s16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_n_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_n_s32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_n_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_n_u16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  15 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  15 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  15 0 %23))
 (define %29 (*  e0  16))
 (define %30 (*  e0  16))
 (define %32 (+  %30  15))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmls_n_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  63 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsq_n_u32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  31 0 c))
(define %8 (extract  127 0 a))
(define %13 (extract  31 0 %5))
(define %14 (zero-extend  %13 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %2))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %23 (bvmul  %21  %14))
 (define %24 (extract  31 0 %23))
 (define %29 (*  e0  32))
 (define %30 (*  e0  32))
 (define %32 (+  %30  31))
 (define %33 (extract  %32 %29 %8))
 (define %34 (bvsub  %33  %24))
 %34
)
)
)
result)
(define (vmlsl_lane_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_s32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_4  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_5  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_6  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s16__lane_7  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s32__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_s32__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_n_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_n_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_lane_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_u16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_u16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_u16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_u16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_u32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_lane_u32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_laneq_u32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_4  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_5  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_6  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u16__lane_7  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u32__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_laneq_u32__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_n_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_n_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_n_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  31 0 %27))
 (define %38 (*  e0  32))
 (define %40 (*  e0  32))
 (define %43 (+  %40  31))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vmlsl_high_n_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (zero-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (zero-extend  %23 (bitvector 192)))
 (define %27 (bvmul  %24  %17))
 (define %28 (extract  63 0 %27))
 (define %38 (*  e0  64))
 (define %40 (*  e0  64))
 (define %43 (+  %40  63))
 (define %45 (extract  %43 %38 %9))
 (define %46 (bvsub  %45  %28))
 %46
)
)
)
result)
(define (vqdmlsl_lane_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_lane_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_lane_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_lane_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_lane_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_lane_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_lane_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_lane_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_lane_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_lane_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_lane_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_lane_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  63 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_4  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_5  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_6  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s16__lane_7  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s32__lane_0  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s32__lane_1  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s32__lane_2  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_laneq_s32__lane_3  a b v )
(define %2 (extract  63 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_4  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_5  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_6  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s16__lane_7  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s32__lane_0  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s32__lane_1  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s32__lane_2  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_laneq_s32__lane_3  a b v )
(define %2 (extract  127 64 b))
(define %5 (extract  127 0 v))
(define %9 (extract  127 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_n_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_n_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  15 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsl_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  31 0 c))
(define %9 (extract  127 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlslh_lane_s16__lane_0  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_lane_s16__lane_1  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_lane_s16__lane_2  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_lane_s16__lane_3  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsls_lane_s32__lane_0  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsls_lane_s32__lane_1  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  63 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_0  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  15 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_1  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  31 16 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_2  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  47 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_3  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  63 48 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_4  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  79 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_5  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  95 80 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_6  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  111 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlslh_laneq_s16__lane_7  a b v )
(define %2 (extract  15 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  31 0 a))
(define %16 (extract  127 112 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  16))
 (define %20 (*  e0  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 32 ))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 32 ))
 %50
)
)
)
result)
(define (vqdmlsls_laneq_s32__lane_0  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  31 0 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsls_laneq_s32__lane_1  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  63 32 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsls_laneq_s32__lane_2  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  95 64 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vqdmlsls_laneq_s32__lane_3  a b v )
(define %2 (extract  31 0 b))
(define %5 (extract  127 0 v))
(define %9 (extract  63 0 a))
(define %16 (extract  127 96 %5))
(define %17 (sign-extend  %16 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %19 (*  e0  32))
 (define %20 (*  e0  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %19 %2))
 (define %24 (sign-extend  %23 (bitvector 192)))
 (define %25 (bvmul  (bv 2 192)  %24))
 (define %26 (bvmul  %25  %17))
 (define %28 (bvssat %26 192 64 ))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 %9))
 (define %38 (sign-extend  %37 (bitvector 192)))
 (define %39 (sign-extend  %28 (bitvector 192)))
 (define %40 (bvsub  %38  %39))
 (define %50 (bvssat %40 192 64 ))
 %50
)
)
)
result)
(define (vmul_n_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  15 0 b))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_n_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  15 0 b))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_n_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  31 0 b))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_n_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  31 0 b))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_n_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  15 0 b))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_n_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  15 0 b))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_n_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  31 0 b))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_n_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  31 0 b))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_s16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_s16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_s16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_s16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_s32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_s32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_u16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_u16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_u16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_u16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_u16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_u16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_u16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_u16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_u32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_lane_u32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_u32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_lane_u32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_4  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  79 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_5  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 80 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_6  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  111 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s16__lane_7  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 112 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_4  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  79 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_5  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 80 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_6  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  111 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s16__lane_7  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 112 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s32__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_s32__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s32__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_s32__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_4  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  79 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_5  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 80 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_6  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  111 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u16__lane_7  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 112 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  15 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 16 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  47 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 48 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_4  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  79 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_5  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 80 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_6  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  111 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u16__lane_7  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 112 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  15 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u32__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmul_laneq_u32__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 0 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 32 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u32__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 64 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmulq_laneq_u32__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 96 %5))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %20 (bvmul  %18  %11))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmull_n_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_n_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_n_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_n_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_s16__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_s16__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_s16__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_s16__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_s32__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_s32__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_4  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_5  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_6  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s16__lane_7  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s32__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_s32__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_4  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_5  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_6  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s16__lane_7  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s32__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s32__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s32__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_s32__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_n_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_n_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_n_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_n_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_u16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_u16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_u16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_u16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_u32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_lane_u32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_u16__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_u16__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_u16__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_u16__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_u32__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_lane_u32__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_4  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_5  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_6  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u16__lane_7  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u32__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_laneq_u32__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_4  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_5  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_6  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u16__lane_7  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u32__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u32__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u32__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_laneq_u32__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (zero-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %23 (bvmul  %20  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vqdmull_n_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_n_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_n_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_n_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_lane_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_lane_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_lane_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_lane_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_lane_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_lane_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_lane_s16__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_lane_s16__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_lane_s16__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_lane_s16__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_lane_s32__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_lane_s32__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_4  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_5  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_6  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s16__lane_7  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s32__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_laneq_s32__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_4  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_5  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_6  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s16__lane_7  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s32__lane_0  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s32__lane_1  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s32__lane_2  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_high_laneq_s32__lane_3  a v )
(define %2 (extract  127 64 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmullh_lane_s16__lane_0  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_lane_s16__lane_1  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_lane_s16__lane_2  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_lane_s16__lane_3  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmulls_lane_s32__lane_0  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmulls_lane_s32__lane_1  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_0  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_1  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_2  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_3  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_4  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_5  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_6  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmullh_laneq_s16__lane_7  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmulls_laneq_s32__lane_0  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmulls_laneq_s32__lane_1  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmulls_laneq_s32__lane_2  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmulls_laneq_s32__lane_3  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmulh_n_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  15 0 b))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_n_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  15 0 b))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_n_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  31 0 b))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_n_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  31 0 b))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulh_lane_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_lane_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 16 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_lane_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  47 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_lane_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 48 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_lane_s16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_lane_s16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 16 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_lane_s16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  47 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_lane_s16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 48 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_lane_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulh_lane_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_lane_s32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_lane_s32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 16 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  47 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 48 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_4  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  79 64 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_5  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 80 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_6  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  111 96 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s16__lane_7  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 112 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 16 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  47 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 48 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_4  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  79 64 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_5  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 80 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_6  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  111 96 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s16__lane_7  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 112 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s32__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 64 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulh_laneq_s32__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 96 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s32__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 64 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhq_laneq_s32__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 96 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhh_lane_s16__lane_0  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_lane_s16__lane_1  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 16 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_lane_s16__lane_2  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  47 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_lane_s16__lane_3  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 48 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhs_lane_s32__lane_0  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhs_lane_s32__lane_1  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  63 0 v))
(define %10 (extract  63 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_0  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  15 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_1  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 16 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_2  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  47 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_3  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 48 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_4  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  79 64 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_5  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 80 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_6  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  111 96 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhh_laneq_s16__lane_7  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 112 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 16 192)))
 (define %27 (bvssat %26 192 16 ))
 %27
)
)
)
result)
(define (vqdmulhs_laneq_s32__lane_0  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  31 0 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhs_laneq_s32__lane_1  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  63 32 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhs_laneq_s32__lane_2  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  95 64 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqdmulhs_laneq_s32__lane_3  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %10 (extract  127 96 %5))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %21 (bvadd  %20  (bv 0 192)))
 (define %26 (bvashr  %21  (bv 32 192)))
 (define %27 (bvssat %26 192 32 ))
 %27
)
)
)
result)
(define (vqrdmulh_n_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_n_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  15 0 b))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_n_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_n_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  31 0 b))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulh_lane_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_lane_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_lane_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_lane_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_lane_s16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_lane_s16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_lane_s16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_lane_s16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_lane_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulh_lane_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_lane_s32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_lane_s32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_4  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_5  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_6  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s16__lane_7  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_4  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_5  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_6  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s16__lane_7  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s32__lane_0  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s32__lane_1  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s32__lane_2  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulh_laneq_s32__lane_3  a v )
(define %2 (extract  63 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s32__lane_0  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s32__lane_1  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s32__lane_2  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhq_laneq_s32__lane_3  a v )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhh_lane_s16__lane_0  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_lane_s16__lane_1  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_lane_s16__lane_2  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_lane_s16__lane_3  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhs_lane_s32__lane_0  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhs_lane_s32__lane_1  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  63 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_0  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  15 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_1  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 16 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_2  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  47 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_3  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 48 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_4  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  79 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_5  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 80 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_6  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  111 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhh_laneq_s16__lane_7  a v )
(define %2 (extract  15 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 112 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 32768 192)))
 (define %28 (bvashr  %23  (bv 16 192)))
 (define %29 (bvssat %28 192 16 ))
 %29
)
)
)
result)
(define (vqrdmulhs_laneq_s32__lane_0  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  31 0 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhs_laneq_s32__lane_1  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  63 32 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhs_laneq_s32__lane_2  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  95 64 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vqrdmulhs_laneq_s32__lane_3  a v )
(define %2 (extract  31 0 a))
(define %5 (extract  127 0 v))
(define %12 (extract  127 96 %5))
(define %13 (sign-extend  %12 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %2))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %20))
 (define %22 (bvmul  %21  %13))
 (define %23 (bvadd  %22  (bv 2147483648 192)))
 (define %28 (bvashr  %23  (bv 32 192)))
 (define %29 (bvssat %28 192 32 ))
 %29
)
)
)
result)
(define (vabs_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
result)
(define (vabsq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
result)
(define (vabs_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
result)
(define (vabsq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
result)
(define (vabs_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
result)
(define (vabsq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
result)
(define (vabsq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  63 0 %10))
 %16
)
)
)
result)
(define (vabs_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  63 0 %10))
 %16
)
)
)
result)
(define (vabsd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %16 (extract  63 0 %10))
 %16
)
)
)
result)
(define (vqabs_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqabsq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqabs_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqabsq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqabs_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqabsq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqabsq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 64 ))
 %15
)
)
)
result)
(define (vqabs_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 64 ))
 %15
)
)
)
result)
(define (vqabsb_s8  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqabsh_s16  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqabss_s32  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqabsd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (integer->bitvector (abs (bitvector->integer %9)) (bitvector 192)))
 (define %15 (bvssat %10 192 64 ))
 %15
)
)
)
result)
(define (vneg_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
result)
(define (vnegq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
result)
(define (vneg_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
result)
(define (vnegq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
result)
(define (vneg_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
result)
(define (vnegq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
result)
(define (vnegq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  63 0 %10))
 %16
)
)
)
result)
(define (vneg_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  63 0 %10))
 %16
)
)
)
result)
(define (vnegd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %16 (extract  63 0 %10))
 %16
)
)
)
result)
(define (vqneg_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqnegq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqneg_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqnegq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqneg_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqnegq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqnegq_s64  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 64 ))
 %15
)
)
)
result)
(define (vqneg_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 64 ))
 %15
)
)
)
result)
(define (vqnegb_s8  a )
(define %2 (extract  7 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 8 ))
 %15
)
)
)
result)
(define (vqnegh_s16  a )
(define %2 (extract  15 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 16 ))
 %15
)
)
)
result)
(define (vqnegs_s32  a )
(define %2 (extract  31 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 32 ))
 %15
)
)
)
result)
(define (vqnegd_s64  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 %2))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (bvneg  %9))
 (define %15 (bvssat %10 192 64 ))
 %15
)
)
)
result)
(define (vmvn_s8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvnq_s8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvn_s16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvnq_s16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvn_s32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvnq_s32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvn_u8  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvnq_u8  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvn_u16  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvnq_u16  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvn_u32  a )
(define %2 (extract  63 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vmvnq_u32  a )
(define %2 (extract  127 0 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 %2))
 (define %13 (bvnot  %8))
 %13
)
)
)
result)
(define (vand_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vand_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vand_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vand_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vand_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vand_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vand_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vand_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vandq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvand  %2  %5))
%6)
(define (vorr_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorr_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorr_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorr_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorr_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorr_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorr_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorr_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (vorrq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvor  %2  %5))
%6)
(define (veor_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (veor_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (veor_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (veor_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (veor_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (veor_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (veor_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (veor_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %8 (bvxor  (bv 0 64)  %2))
(define %9 (bvand  %8  (bv 18446744073709551615 64)))
(define %10 (bvxor  %5  %9))
%10)
(define (veorq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %8 (bvxor  (bv 0 128)  %2))
(define %9 (bvand  %8  (bv 340282366920938463463374607431768211455 128)))
(define %10 (bvxor  %5  %9))
%10)
(define (vbic_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbic_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbic_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbic_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbic_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbic_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbic_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbic_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vbicq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvand  %2  %6))
%7)
(define (vorn_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vorn_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vorn_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vorn_s64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vorn_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vorn_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vorn_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vorn_u64  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vornq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %6 (bvnot  %5))
(define %7 (bvor  %2  %6))
%7)
(define (vbsl_s8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_s8  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbsl_s16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_s16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbsl_s32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_s32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbsl_s64  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_s64  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbsl_u8  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_u8  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbsl_u16  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_u16  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbsl_u32  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_u32  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbsl_u64  a b c )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 c))
(define %8 (extract  63 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vbslq_u64  a b c )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 c))
(define %8 (extract  127 0 a))
(define %9 (bvxor  %5  %2))
(define %10 (bvand  %9  %8))
(define %11 (bvxor  %5  %10))
%11)
(define (vdup_lane_s64__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdup_lane_u64__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s64__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s64__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u64__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u64__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdupd_lane_s64__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdupd_lane_u64__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdupd_laneq_s64__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdupd_laneq_s64__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdupd_laneq_u64__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdupd_laneq_u64__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 %7
)
)
)
result)
(define (vdup_n_s8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vdupq_n_s8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %2
)
)
)
result)
(define (vdup_n_s16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vdupq_n_s16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vdup_n_s32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vdupq_n_s32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vdupq_n_s64  value )
(define %2 (extract  63 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vdup_n_u8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vdupq_n_u8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %2
)
)
)
result)
(define (vdup_n_u16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vdupq_n_u16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vdup_n_u32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vdupq_n_u32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vdupq_n_u64  value )
(define %2 (extract  63 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vmov_n_s8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vmovq_n_s8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %2
)
)
)
result)
(define (vmov_n_s16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vmovq_n_s16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vmov_n_s32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vmovq_n_s32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vmovq_n_s64  value )
(define %2 (extract  63 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vmov_n_u8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vmovq_n_u8  value )
(define %2 (extract  7 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %2
)
)
)
result)
(define (vmov_n_u16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vmovq_n_u16  value )
(define %2 (extract  15 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %2
)
)
)
result)
(define (vmov_n_u32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vmovq_n_u32  value )
(define %2 (extract  31 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %2
)
)
)
result)
(define (vmovq_n_u64  value )
(define %2 (extract  63 0 value))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %2
)
)
)
result)
(define (vdup_lane_s8__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s8__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s8__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s8__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s8__lane_4  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s8__lane_5  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s8__lane_6  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s8__lane_7  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_4  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_5  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_6  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s8__lane_7  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdup_lane_s16__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_lane_s16__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_lane_s16__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_lane_s16__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s16__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s16__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s16__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s16__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_s32__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_lane_s32__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s32__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s32__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_lane_s64__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_4  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_5  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_6  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u8__lane_7  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_4  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_5  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_6  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u8__lane_7  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdup_lane_u16__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_lane_u16__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_lane_u16__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_lane_u16__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u16__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u16__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u16__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u16__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_lane_u32__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_lane_u32__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u32__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u32__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_lane_u64__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_8  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  71 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_9  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 72 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_10  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  87 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_11  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 88 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_12  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  103 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_13  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 104 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_14  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  119 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s8__lane_15  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 120 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_8  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  71 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_9  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 72 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_10  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  87 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_11  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 88 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_12  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  103 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_13  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 104 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_14  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  119 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s8__lane_15  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 120 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s16__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s16__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s32__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s32__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s32__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_s32__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s32__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s32__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s32__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s32__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s64__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_s64__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_8  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  71 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_9  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 72 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_10  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  87 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_11  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 88 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_12  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  103 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_13  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 104 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_14  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  119 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u8__lane_15  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 120 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_8  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  71 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_9  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 72 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_10  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  87 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_11  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 88 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_12  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  103 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_13  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 104 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_14  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  119 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u8__lane_15  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 120 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u16__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u16__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u32__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u32__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u32__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdup_laneq_u32__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u32__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u32__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u32__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u32__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u64__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupq_laneq_u64__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_4  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_5  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_6  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_s8__lane_7  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vduph_lane_s16__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_lane_s16__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_lane_s16__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_lane_s16__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdups_lane_s32__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_lane_s32__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_4  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_5  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_6  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_lane_u8__lane_7  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vduph_lane_u16__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_lane_u16__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_lane_u16__lane_2  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_lane_u16__lane_3  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdups_lane_u32__lane_0  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_lane_u32__lane_1  vec )
(define %2 (extract  63 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_8  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  71 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_9  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 72 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_10  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  87 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_11  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 88 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_12  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  103 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_13  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 104 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_14  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  119 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_s8__lane_15  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 120 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_s16__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdups_laneq_s32__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_laneq_s32__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_laneq_s32__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_laneq_s32__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  7 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 8 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  23 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 24 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  39 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 40 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  55 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 56 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_8  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  71 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_9  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 72 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_10  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  87 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_11  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 88 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_12  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  103 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_13  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 104 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_14  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  119 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vdupb_laneq_u8__lane_15  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 120 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  15 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 16 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  47 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 48 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_4  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  79 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_5  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 80 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_6  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  111 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vduph_laneq_u16__lane_7  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 112 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 %7
)
)
)
result)
(define (vdups_laneq_u32__lane_0  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  31 0 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_laneq_u32__lane_1  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  63 32 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_laneq_u32__lane_2  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  95 64 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vdups_laneq_u32__lane_3  vec )
(define %2 (extract  127 0 vec))
(define %7 (extract  127 96 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 %7
)
)
)
result)
(define (vpadd_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpadd_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpadd_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpadd_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpadd_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpadd_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  64))
 (define %11 (*  2  e0))
 (define %12 (*  %11  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  64))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  64))
 (define %23 (+  %21  63))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpaddq_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  64))
 (define %11 (*  2  e0))
 (define %12 (*  %11  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %10 %7))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  64))
 (define %19 (*  2  e0))
 (define %20 (+  %19  1))
 (define %21 (*  %20  64))
 (define %23 (+  %21  63))
 (define %24 (extract  %23 %18 %7))
 (define %29 (bvadd  %15  %24))
 %29
)
)
)
result)
(define (vpmax_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmax  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpmax_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmax  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpmax_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmax  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vpmaxq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmax  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpmaxq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmax  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpmaxq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmax  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vpmax_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumax  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpmax_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumax  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpmax_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumax  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vpmaxq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumax  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpmaxq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumax  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpmaxq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumax  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vpmin_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmin  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpmin_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmin  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpmin_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmin  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vpminq_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmin  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpminq_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmin  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpminq_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (sign-extend  %25 (bitvector 192)))
 (define %27 (bvsmin  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vpmin_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumin  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpmin_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumin  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpmin_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumin  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vpminq_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  8))
 (define %11 (*  2  e0))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  8))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumin  %16  %26))
 (define %33 (extract  7 0 %27))
 %33
)
)
)
result)
(define (vpminq_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  16))
 (define %11 (*  2  e0))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  16))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumin  %16  %26))
 (define %33 (extract  15 0 %27))
 %33
)
)
)
result)
(define (vpminq_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  2  e0))
 (define %10 (*  %9  32))
 (define %11 (*  2  e0))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %10 %7))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  2  e0))
 (define %18 (+  %17  1))
 (define %19 (*  %18  32))
 (define %20 (*  2  e0))
 (define %21 (+  %20  1))
 (define %22 (*  %21  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %19 %7))
 (define %26 (zero-extend  %25 (bitvector 192)))
 (define %27 (bvumin  %16  %26))
 (define %33 (extract  31 0 %27))
 %33
)
)
)
result)
(define (vext_s8__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vext_s8__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  71 8 %7))
%10)
(define (vext_s8__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  79 16 %7))
%10)
(define (vext_s8__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  87 24 %7))
%10)
(define (vext_s8__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  95 32 %7))
%10)
(define (vext_s8__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  103 40 %7))
%10)
(define (vext_s8__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  111 48 %7))
%10)
(define (vext_s8__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  119 56 %7))
%10)
(define (vextq_s8__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_s8__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  135 8 %7))
%10)
(define (vextq_s8__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  143 16 %7))
%10)
(define (vextq_s8__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  151 24 %7))
%10)
(define (vextq_s8__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  159 32 %7))
%10)
(define (vextq_s8__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  167 40 %7))
%10)
(define (vextq_s8__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  175 48 %7))
%10)
(define (vextq_s8__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  183 56 %7))
%10)
(define (vextq_s8__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vextq_s8__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  199 72 %7))
%10)
(define (vextq_s8__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  207 80 %7))
%10)
(define (vextq_s8__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  215 88 %7))
%10)
(define (vextq_s8__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  223 96 %7))
%10)
(define (vextq_s8__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  231 104 %7))
%10)
(define (vextq_s8__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  239 112 %7))
%10)
(define (vextq_s8__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  247 120 %7))
%10)
(define (vext_s16__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vext_s16__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  79 16 %7))
%10)
(define (vext_s16__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  95 32 %7))
%10)
(define (vext_s16__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  111 48 %7))
%10)
(define (vextq_s16__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_s16__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  143 16 %7))
%10)
(define (vextq_s16__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  159 32 %7))
%10)
(define (vextq_s16__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  175 48 %7))
%10)
(define (vextq_s16__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vextq_s16__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  207 80 %7))
%10)
(define (vextq_s16__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  223 96 %7))
%10)
(define (vextq_s16__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  239 112 %7))
%10)
(define (vext_s32__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vext_s32__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  95 32 %7))
%10)
(define (vextq_s32__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_s32__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  159 32 %7))
%10)
(define (vextq_s32__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vextq_s32__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  223 96 %7))
%10)
(define (vext_s64__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vextq_s64__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_s64__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vext_u8__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vext_u8__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  71 8 %7))
%10)
(define (vext_u8__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  79 16 %7))
%10)
(define (vext_u8__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  87 24 %7))
%10)
(define (vext_u8__n_4  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  95 32 %7))
%10)
(define (vext_u8__n_5  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  103 40 %7))
%10)
(define (vext_u8__n_6  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  111 48 %7))
%10)
(define (vext_u8__n_7  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  119 56 %7))
%10)
(define (vextq_u8__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_u8__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  135 8 %7))
%10)
(define (vextq_u8__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  143 16 %7))
%10)
(define (vextq_u8__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  151 24 %7))
%10)
(define (vextq_u8__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  159 32 %7))
%10)
(define (vextq_u8__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  167 40 %7))
%10)
(define (vextq_u8__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  175 48 %7))
%10)
(define (vextq_u8__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  183 56 %7))
%10)
(define (vextq_u8__n_8  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vextq_u8__n_9  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  199 72 %7))
%10)
(define (vextq_u8__n_10  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  207 80 %7))
%10)
(define (vextq_u8__n_11  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  215 88 %7))
%10)
(define (vextq_u8__n_12  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  223 96 %7))
%10)
(define (vextq_u8__n_13  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  231 104 %7))
%10)
(define (vextq_u8__n_14  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  239 112 %7))
%10)
(define (vextq_u8__n_15  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  247 120 %7))
%10)
(define (vext_u16__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vext_u16__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  79 16 %7))
%10)
(define (vext_u16__n_2  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  95 32 %7))
%10)
(define (vext_u16__n_3  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  111 48 %7))
%10)
(define (vextq_u16__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_u16__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  143 16 %7))
%10)
(define (vextq_u16__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  159 32 %7))
%10)
(define (vextq_u16__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  175 48 %7))
%10)
(define (vextq_u16__n_4  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vextq_u16__n_5  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  207 80 %7))
%10)
(define (vextq_u16__n_6  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  223 96 %7))
%10)
(define (vextq_u16__n_7  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  239 112 %7))
%10)
(define (vext_u32__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vext_u32__n_1  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  95 32 %7))
%10)
(define (vextq_u32__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_u32__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  159 32 %7))
%10)
(define (vextq_u32__n_2  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vextq_u32__n_3  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  223 96 %7))
%10)
(define (vext_u64__n_0  a b )
(define %2 (extract  63 0 b))
(define %5 (extract  63 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  63 0 %7))
%10)
(define (vextq_u64__n_0  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  127 0 %7))
%10)
(define (vextq_u64__n_1  a b )
(define %2 (extract  127 0 b))
(define %5 (extract  127 0 a))
(define %7 (concat %2 %5))
(define %10 (extract  191 64 %7))
%10)
(define (vzip1_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  8))
 (define %18 (+  0  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  8))
 (define %33 (+  0  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  8))
 (define %18 (+  0  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  8))
 (define %33 (+  0  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  16))
 (define %18 (+  0  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  16))
 (define %33 (+  0  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  16))
 (define %18 (+  0  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  16))
 (define %33 (+  0  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  32))
 (define %18 (+  0  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  32))
 (define %33 (+  0  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  32))
 (define %18 (+  0  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  32))
 (define %33 (+  0  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  64))
 (define %18 (+  0  p0))
 (define %19 (*  %18  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  64))
 (define %33 (+  0  p0))
 (define %34 (*  %33  64))
 (define %36 (+  %34  63))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  8))
 (define %18 (+  0  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  8))
 (define %33 (+  0  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  8))
 (define %18 (+  0  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  8))
 (define %33 (+  0  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  16))
 (define %18 (+  0  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  16))
 (define %33 (+  0  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  16))
 (define %18 (+  0  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  16))
 (define %33 (+  0  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  32))
 (define %18 (+  0  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  32))
 (define %33 (+  0  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  32))
 (define %18 (+  0  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  32))
 (define %33 (+  0  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip1q_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  0  p0))
 (define %17 (*  %16  64))
 (define %18 (+  0  p0))
 (define %19 (*  %18  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  0  p0))
 (define %32 (*  %31  64))
 (define %33 (+  0  p0))
 (define %34 (*  %33  64))
 (define %36 (+  %34  63))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  4  p0))
 (define %17 (*  %16  8))
 (define %18 (+  4  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  4  p0))
 (define %32 (*  %31  8))
 (define %33 (+  4  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %16 (+  8  p0))
 (define %17 (*  %16  8))
 (define %18 (+  8  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  8  p0))
 (define %32 (*  %31  8))
 (define %33 (+  8  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  2  p0))
 (define %17 (*  %16  16))
 (define %18 (+  2  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  2  p0))
 (define %32 (*  %31  16))
 (define %33 (+  2  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  4  p0))
 (define %17 (*  %16  16))
 (define %18 (+  4  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  4  p0))
 (define %32 (*  %31  16))
 (define %33 (+  4  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  1  p0))
 (define %17 (*  %16  32))
 (define %18 (+  1  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  1  p0))
 (define %32 (*  %31  32))
 (define %33 (+  1  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  2  p0))
 (define %17 (*  %16  32))
 (define %18 (+  2  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  2  p0))
 (define %32 (*  %31  32))
 (define %33 (+  2  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  1  p0))
 (define %17 (*  %16  64))
 (define %18 (+  1  p0))
 (define %19 (*  %18  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  1  p0))
 (define %32 (*  %31  64))
 (define %33 (+  1  p0))
 (define %34 (*  %33  64))
 (define %36 (+  %34  63))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  4  p0))
 (define %17 (*  %16  8))
 (define %18 (+  4  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  4  p0))
 (define %32 (*  %31  8))
 (define %33 (+  4  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %16 (+  8  p0))
 (define %17 (*  %16  8))
 (define %18 (+  8  p0))
 (define %19 (*  %18  8))
 (define %21 (+  %19  7))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  8  p0))
 (define %32 (*  %31  8))
 (define %33 (+  8  p0))
 (define %34 (*  %33  8))
 (define %36 (+  %34  7))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  2  p0))
 (define %17 (*  %16  16))
 (define %18 (+  2  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  2  p0))
 (define %32 (*  %31  16))
 (define %33 (+  2  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %16 (+  4  p0))
 (define %17 (*  %16  16))
 (define %18 (+  4  p0))
 (define %19 (*  %18  16))
 (define %21 (+  %19  15))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  4  p0))
 (define %32 (*  %31  16))
 (define %33 (+  4  p0))
 (define %34 (*  %33  16))
 (define %36 (+  %34  15))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  1  p0))
 (define %17 (*  %16  32))
 (define %18 (+  1  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  1  p0))
 (define %32 (*  %31  32))
 (define %33 (+  1  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %16 (+  2  p0))
 (define %17 (*  %16  32))
 (define %18 (+  2  p0))
 (define %19 (*  %18  32))
 (define %21 (+  %19  31))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  2  p0))
 (define %32 (*  %31  32))
 (define %33 (+  2  p0))
 (define %34 (*  %33  32))
 (define %36 (+  %34  31))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vzip2q_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %16 (+  1  p0))
 (define %17 (*  %16  64))
 (define %18 (+  1  p0))
 (define %19 (*  %18  64))
 (define %21 (+  %19  63))
 (define %22 (extract  %21 %17 %2))
 (define %31 (+  1  p0))
 (define %32 (*  %31  64))
 (define %33 (+  1  p0))
 (define %34 (*  %33  64))
 (define %36 (+  %34  63))
 (define %37 (extract  %36 %32 %5))
(concat %37 %22)
)
)
)
result)
(define (vuzp1_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  64))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp1q_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  0))
 (define %15 (*  %14  64))
 (define %16 (*  2  e0))
 (define %17 (+  %16  0))
 (define %18 (*  %17  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vuzp2q_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define %7 (concat %5 %2))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %16 (*  2  e0))
 (define %17 (+  %16  1))
 (define %18 (*  %17  64))
 (define %20 (+  %18  63))
 (define %21 (extract  %20 %15 %7))
 %21
)
)
)
result)
(define (vtrn1_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  64))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  64))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  64))
 (define %39 (+  %37  63))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn1q_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  0))
 (define %17 (*  %16  64))
 (define %18 (*  2  p0))
 (define %19 (+  %18  0))
 (define %20 (*  %19  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  0))
 (define %34 (*  %33  64))
 (define %35 (*  2  p0))
 (define %36 (+  %35  0))
 (define %37 (*  %36  64))
 (define %39 (+  %37  63))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2_s8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_s8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2_s16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_s16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2_s32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_s32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_s64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  64))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  64))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  64))
 (define %39 (+  %37  63))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2_u8  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_u8  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  8))
 (define %22 (+  %20  7))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  8))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  8))
 (define %39 (+  %37  7))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2_u16  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_u16  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  16))
 (define %22 (+  %20  15))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  16))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  16))
 (define %39 (+  %37  15))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2_u32  a b )
(define %2 (extract  63 0 a))
(define %5 (extract  63 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_u32  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  32))
 (define %22 (+  %20  31))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  32))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  32))
 (define %39 (+  %37  31))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(define (vtrn2q_u64  a b )
(define %2 (extract  127 0 a))
(define %5 (extract  127 0 b))
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %15 (*  2  p0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  64))
 (define %18 (*  2  p0))
 (define %19 (+  %18  1))
 (define %20 (*  %19  64))
 (define %22 (+  %20  63))
 (define %23 (extract  %22 %17 %2))
 (define %32 (*  2  p0))
 (define %33 (+  %32  1))
 (define %34 (*  %33  64))
 (define %35 (*  2  p0))
 (define %36 (+  %35  1))
 (define %37 (*  %36  64))
 (define %39 (+  %37  63))
 (define %40 (extract  %39 %34 %5))
(concat %40 %23)
)
)
)
result)
(provide (all-defined-out))