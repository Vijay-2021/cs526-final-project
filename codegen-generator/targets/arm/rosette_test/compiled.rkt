#lang rosette
(require "bvops.rkt")
(define (vadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %24 (extract  15 0 %14))
 %24
)
)
)
result)
(define (vaddl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %24 (extract  31 0 %14))
 %24
)
)
)
result)
(define (vaddl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %24 (extract  63 0 %14))
 %24
)
)
)
result)
(define (vaddl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %24 (extract  15 0 %14))
 %24
)
)
)
result)
(define (vaddl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %24 (extract  31 0 %14))
 %24
)
)
)
result)
(define (vaddl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %24 (extract  63 0 %14))
 %24
)
)
)
result)
(define (vaddl_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (+  e0  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %30 (extract  15 0 %20))
 %30
)
)
)
result)
(define (vaddl_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (+  e0  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %30 (extract  31 0 %20))
 %30
)
)
)
result)
(define (vaddl_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (+  e0  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %30 (extract  63 0 %20))
 %30
)
)
)
result)
(define (vaddl_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (+  e0  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %30 (extract  15 0 %20))
 %30
)
)
)
result)
(define (vaddl_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (+  e0  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %30 (extract  31 0 %20))
 %30
)
)
)
result)
(define (vaddl_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (+  e0  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %30 (extract  63 0 %20))
 %30
)
)
)
result)
(define (vaddw_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %11  %17))
 (define %28 (extract  15 0 %18))
 %28
)
)
)
result)
(define (vaddw_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %11  %17))
 (define %28 (extract  31 0 %18))
 %28
)
)
)
result)
(define (vaddw_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %11  %17))
 (define %28 (extract  63 0 %18))
 %28
)
)
)
result)
(define (vaddw_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %11  %17))
 (define %28 (extract  15 0 %18))
 %28
)
)
)
result)
(define (vaddw_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %11  %17))
 (define %28 (extract  31 0 %18))
 %28
)
)
)
result)
(define (vaddw_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %11  %17))
 (define %28 (extract  63 0 %18))
 %28
)
)
)
result)
(define (vaddw_high_s8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %10 (*  %8  16))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (+  e0  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %14  %20))
 (define %31 (extract  15 0 %21))
 %31
)
)
)
result)
(define (vaddw_high_s16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %10 (*  %8  32))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %14  %20))
 (define %31 (extract  31 0 %21))
 %31
)
)
)
result)
(define (vaddw_high_s32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %10 (*  %8  64))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %14  %20))
 (define %31 (extract  63 0 %21))
 %31
)
)
)
result)
(define (vaddw_high_u8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %10 (*  %8  16))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (+  e0  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %14  %20))
 (define %31 (extract  15 0 %21))
 %31
)
)
)
result)
(define (vaddw_high_u16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %10 (*  %8  32))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %14  %20))
 (define %31 (extract  31 0 %21))
 %31
)
)
)
result)
(define (vaddw_high_u32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %10 (*  %8  64))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %14  %20))
 (define %31 (extract  63 0 %21))
 %31
)
)
)
result)
(define (vhadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vrhadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrhadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vrhadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrhadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vqadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqadd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqadd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqadds_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqaddd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqadds_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqaddd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vuqadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 8 ))
 %19
)
)
)
result)
(define (vuqaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 8 ))
 %19
)
)
)
result)
(define (vuqadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 16 ))
 %19
)
)
)
result)
(define (vuqaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 16 ))
 %19
)
)
)
result)
(define (vuqadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 32 ))
 %19
)
)
)
result)
(define (vuqaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 32 ))
 %19
)
)
)
result)
(define (vuqadd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (+  e0  1))
 (define %10 (*  %9  64))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 64 ))
 %19
)
)
)
result)
(define (vuqaddq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (+  e0  1))
 (define %10 (*  %9  64))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 64 ))
 %19
)
)
)
result)
(define (vuqaddb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 8 ))
 %19
)
)
)
result)
(define (vuqaddh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 16 ))
 %19
)
)
)
result)
(define (vuqadds_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 32 ))
 %19
)
)
)
result)
(define (vuqaddd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (+  e0  1))
 (define %10 (*  %9  64))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 64 ))
 %19
)
)
)
result)
(define (vsqadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 8 ))
 %19
)
)
)
result)
(define (vsqaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 8 ))
 %19
)
)
)
result)
(define (vsqadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 16 ))
 %19
)
)
)
result)
(define (vsqaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 16 ))
 %19
)
)
)
result)
(define (vsqadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 32 ))
 %19
)
)
)
result)
(define (vsqaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 32 ))
 %19
)
)
)
result)
(define (vsqadd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (+  e0  1))
 (define %10 (*  %9  64))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 64 ))
 %19
)
)
)
result)
(define (vsqaddq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (+  e0  1))
 (define %10 (*  %9  64))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 64 ))
 %19
)
)
)
result)
(define (vsqaddb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 8 ))
 %19
)
)
)
result)
(define (vsqaddh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 16 ))
 %19
)
)
)
result)
(define (vsqadds_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 32 ))
 %19
)
)
)
result)
(define (vsqaddd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (+  e0  1))
 (define %10 (*  %9  64))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 64 ))
 %19
)
)
)
result)
(define (vaddhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vaddhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vaddhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vaddhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vaddhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vaddhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vaddhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vraddhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vraddhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vraddhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vraddhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vraddhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vraddhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vraddhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vraddhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vraddhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vraddhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vraddhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vraddhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvadd  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vmul_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmulq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmul_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmulq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmul_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmulq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmul_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmulq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmul_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmulq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmul_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmulq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmla_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlal_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (+  e0  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %23 (+  e0  1))
 (define %25 (*  %23  16))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvadd  %28  %20))
 %29
)
)
)
result)
(define (vmlal_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (+  e0  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %23 (+  e0  1))
 (define %25 (*  %23  32))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvadd  %28  %20))
 %29
)
)
)
result)
(define (vmlal_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (+  e0  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %23 (+  e0  1))
 (define %25 (*  %23  64))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvadd  %28  %20))
 %29
)
)
)
result)
(define (vmlal_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (+  e0  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %23 (+  e0  1))
 (define %25 (*  %23  16))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvadd  %28  %20))
 %29
)
)
)
result)
(define (vmlal_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (+  e0  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %23 (+  e0  1))
 (define %25 (*  %23  32))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvadd  %28  %20))
 %29
)
)
)
result)
(define (vmlal_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (+  e0  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %23 (+  e0  1))
 (define %25 (*  %23  64))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvadd  %28  %20))
 %29
)
)
)
result)
(define (vmlal_high_s8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (+  e0  1))
 (define %19 (*  %18  8))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %29 (+  e0  1))
 (define %31 (*  %29  16))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvadd  %34  %26))
 %35
)
)
)
result)
(define (vmlal_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %19 (*  %18  16))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %29 (+  e0  1))
 (define %31 (*  %29  32))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvadd  %34  %26))
 %35
)
)
)
result)
(define (vmlal_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %19 (*  %18  32))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %29 (+  e0  1))
 (define %31 (*  %29  64))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvadd  %34  %26))
 %35
)
)
)
result)
(define (vmlal_high_u8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (+  e0  1))
 (define %19 (*  %18  8))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %29 (+  e0  1))
 (define %31 (*  %29  16))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvadd  %34  %26))
 %35
)
)
)
result)
(define (vmlal_high_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %19 (*  %18  16))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %29 (+  e0  1))
 (define %31 (*  %29  32))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvadd  %34  %26))
 %35
)
)
)
result)
(define (vmlal_high_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %19 (*  %18  32))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %29 (+  e0  1))
 (define %31 (*  %29  64))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvadd  %34  %26))
 %35
)
)
)
result)
(define (vmls_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (+  e0  1))
 (define %22 (*  %21  8))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (+  e0  1))
 (define %22 (*  %21  16))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (+  e0  1))
 (define %22 (*  %21  32))
 (define %23 (-  %22  1))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsl_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (+  e0  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %23 (+  e0  1))
 (define %25 (*  %23  16))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvsub  %28  %20))
 %29
)
)
)
result)
(define (vmlsl_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (+  e0  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %23 (+  e0  1))
 (define %25 (*  %23  32))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvsub  %28  %20))
 %29
)
)
)
result)
(define (vmlsl_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (+  e0  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %23 (+  e0  1))
 (define %25 (*  %23  64))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvsub  %28  %20))
 %29
)
)
)
result)
(define (vmlsl_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (+  e0  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %23 (+  e0  1))
 (define %25 (*  %23  16))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvsub  %28  %20))
 %29
)
)
)
result)
(define (vmlsl_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (+  e0  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %23 (+  e0  1))
 (define %25 (*  %23  32))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvsub  %28  %20))
 %29
)
)
)
result)
(define (vmlsl_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (+  e0  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %23 (+  e0  1))
 (define %25 (*  %23  64))
 (define %26 (-  %25  1))
 (define %28 (extract  %26 %22 a))
 (define %29 (bvsub  %28  %20))
 %29
)
)
)
result)
(define (vmlsl_high_s8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (+  e0  1))
 (define %19 (*  %18  8))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %29 (+  e0  1))
 (define %31 (*  %29  16))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvsub  %34  %26))
 %35
)
)
)
result)
(define (vmlsl_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %19 (*  %18  16))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %29 (+  e0  1))
 (define %31 (*  %29  32))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvsub  %34  %26))
 %35
)
)
)
result)
(define (vmlsl_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %19 (*  %18  32))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %29 (+  e0  1))
 (define %31 (*  %29  64))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvsub  %34  %26))
 %35
)
)
)
result)
(define (vmlsl_high_u8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (+  e0  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (+  e0  1))
 (define %19 (*  %18  8))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %29 (+  e0  1))
 (define %31 (*  %29  16))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvsub  %34  %26))
 %35
)
)
)
result)
(define (vmlsl_high_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (+  e0  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %19 (*  %18  16))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %29 (+  e0  1))
 (define %31 (*  %29  32))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvsub  %34  %26))
 %35
)
)
)
result)
(define (vmlsl_high_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (+  e0  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %19 (*  %18  32))
 (define %20 (-  %19  1))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %29 (+  e0  1))
 (define %31 (*  %29  64))
 (define %32 (-  %31  1))
 (define %34 (extract  %32 %28 a))
 (define %35 (bvsub  %34  %26))
 %35
)
)
)
result)
(define (vqdmulh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 0 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqdmulhq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 0 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqdmulh_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 0 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqdmulhq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 0 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqdmulhh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 0 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqdmulhs_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 0 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrdmulh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulhq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulh_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrdmulhq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrdmulhh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulhs_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqdmlal_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %6 (*  %5  16))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (+  e0  1))
 (define %12 (*  %11  16))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %22 (+  e0  1))
 (define %24 (*  %22  32))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvadd  %28  %29))
 (define %39 (bvssat %30 192 32 ))
 %39
)
)
)
result)
(define (vqdmlal_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %6 (*  %5  32))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (+  e0  1))
 (define %12 (*  %11  32))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %22 (+  e0  1))
 (define %24 (*  %22  64))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvadd  %28  %29))
 (define %39 (bvssat %30 192 64 ))
 %39
)
)
)
result)
(define (vqdmlalh_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %6 (*  %5  16))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (+  e0  1))
 (define %12 (*  %11  16))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %22 (+  e0  1))
 (define %24 (*  %22  32))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvadd  %28  %29))
 (define %39 (bvssat %30 192 32 ))
 %39
)
)
)
result)
(define (vqdmlals_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %6 (*  %5  32))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (+  e0  1))
 (define %12 (*  %11  32))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %22 (+  e0  1))
 (define %24 (*  %22  64))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvadd  %28  %29))
 (define %39 (bvssat %30 192 64 ))
 %39
)
)
)
result)
(define (vqdmlal_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (+  e0  1))
 (define %12 (*  %11  16))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (+  e0  1))
 (define %18 (*  %17  16))
 (define %19 (-  %18  1))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 32 ))
 (define %27 (*  e0  32))
 (define %28 (+  e0  1))
 (define %30 (*  %28  32))
 (define %31 (-  %30  1))
 (define %33 (extract  %31 %27 a))
 (define %34 (sign-extend  %33 (bitvector 192)))
 (define %35 (sign-extend  %25 (bitvector 192)))
 (define %36 (bvadd  %34  %35))
 (define %45 (bvssat %36 192 32 ))
 %45
)
)
)
result)
(define (vqdmlal_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (+  e0  1))
 (define %12 (*  %11  32))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (+  e0  1))
 (define %18 (*  %17  32))
 (define %19 (-  %18  1))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 64 ))
 (define %27 (*  e0  64))
 (define %28 (+  e0  1))
 (define %30 (*  %28  64))
 (define %31 (-  %30  1))
 (define %33 (extract  %31 %27 a))
 (define %34 (sign-extend  %33 (bitvector 192)))
 (define %35 (sign-extend  %25 (bitvector 192)))
 (define %36 (bvadd  %34  %35))
 (define %45 (bvssat %36 192 64 ))
 %45
)
)
)
result)
(define (vqdmlsl_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %6 (*  %5  16))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (+  e0  1))
 (define %12 (*  %11  16))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %22 (+  e0  1))
 (define %24 (*  %22  32))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvsub  %28  %29))
 (define %39 (bvssat %30 192 32 ))
 %39
)
)
)
result)
(define (vqdmlsl_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %6 (*  %5  32))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (+  e0  1))
 (define %12 (*  %11  32))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %22 (+  e0  1))
 (define %24 (*  %22  64))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvsub  %28  %29))
 (define %39 (bvssat %30 192 64 ))
 %39
)
)
)
result)
(define (vqdmlslh_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %6 (*  %5  16))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (+  e0  1))
 (define %12 (*  %11  16))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %22 (+  e0  1))
 (define %24 (*  %22  32))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvsub  %28  %29))
 (define %39 (bvssat %30 192 32 ))
 %39
)
)
)
result)
(define (vqdmlsls_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %6 (*  %5  32))
 (define %7 (-  %6  1))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (+  e0  1))
 (define %12 (*  %11  32))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %22 (+  e0  1))
 (define %24 (*  %22  64))
 (define %25 (-  %24  1))
 (define %27 (extract  %25 %21 a))
 (define %28 (sign-extend  %27 (bitvector 192)))
 (define %29 (sign-extend  %19 (bitvector 192)))
 (define %30 (bvsub  %28  %29))
 (define %39 (bvssat %30 192 64 ))
 %39
)
)
)
result)
(define (vqdmlsl_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (+  e0  1))
 (define %12 (*  %11  16))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (+  e0  1))
 (define %18 (*  %17  16))
 (define %19 (-  %18  1))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 32 ))
 (define %27 (*  e0  32))
 (define %28 (+  e0  1))
 (define %30 (*  %28  32))
 (define %31 (-  %30  1))
 (define %33 (extract  %31 %27 a))
 (define %34 (sign-extend  %33 (bitvector 192)))
 (define %35 (sign-extend  %25 (bitvector 192)))
 (define %36 (bvsub  %34  %35))
 (define %45 (bvssat %36 192 32 ))
 %45
)
)
)
result)
(define (vqdmlsl_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (+  e0  1))
 (define %12 (*  %11  32))
 (define %13 (-  %12  1))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (+  e0  1))
 (define %18 (*  %17  32))
 (define %19 (-  %18  1))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 64 ))
 (define %27 (*  e0  64))
 (define %28 (+  e0  1))
 (define %30 (*  %28  64))
 (define %31 (-  %30  1))
 (define %33 (extract  %31 %27 a))
 (define %34 (sign-extend  %33 (bitvector 192)))
 (define %35 (sign-extend  %25 (bitvector 192)))
 (define %36 (bvsub  %34  %35))
 (define %45 (bvssat %36 192 64 ))
 %45
)
)
)
result)
(define (vmull_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %23 (bvmul  %7  %13))
 (define %24 (extract  15 0 %23))
 %24
)
)
)
result)
(define (vmull_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %23 (bvmul  %7  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %23 (bvmul  %7  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %23 (bvmul  %7  %13))
 (define %24 (extract  15 0 %23))
 %24
)
)
)
result)
(define (vmull_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %23 (bvmul  %7  %13))
 (define %24 (extract  31 0 %23))
 %24
)
)
)
result)
(define (vmull_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %23 (bvmul  %7  %13))
 (define %24 (extract  63 0 %23))
 %24
)
)
)
result)
(define (vmull_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (+  e0  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %29 (bvmul  %13  %19))
 (define %30 (extract  15 0 %29))
 %30
)
)
)
result)
(define (vmull_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (+  e0  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %29 (bvmul  %13  %19))
 (define %30 (extract  31 0 %29))
 %30
)
)
)
result)
(define (vmull_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (+  e0  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %29 (bvmul  %13  %19))
 (define %30 (extract  63 0 %29))
 %30
)
)
)
result)
(define (vmull_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (+  e0  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %29 (bvmul  %13  %19))
 (define %30 (extract  15 0 %29))
 %30
)
)
)
result)
(define (vmull_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (+  e0  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %29 (bvmul  %13  %19))
 (define %30 (extract  31 0 %29))
 %30
)
)
)
result)
(define (vmull_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (+  e0  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %29 (bvmul  %13  %19))
 (define %30 (extract  63 0 %29))
 %30
)
)
)
result)
(define (vqdmull_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 32 ))
 %18
)
)
)
result)
(define (vqdmull_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 64 ))
 %18
)
)
)
result)
(define (vqdmullh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 32 ))
 %18
)
)
)
result)
(define (vqdmulls_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 64 ))
 %18
)
)
)
result)
(define (vqdmull_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vsub_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %24 (extract  15 0 %14))
 %24
)
)
)
result)
(define (vsubl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %24 (extract  31 0 %14))
 %24
)
)
)
result)
(define (vsubl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %24 (extract  63 0 %14))
 %24
)
)
)
result)
(define (vsubl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %24 (extract  15 0 %14))
 %24
)
)
)
result)
(define (vsubl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %24 (extract  31 0 %14))
 %24
)
)
)
result)
(define (vsubl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %24 (extract  63 0 %14))
 %24
)
)
)
result)
(define (vsubl_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (+  e0  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %30 (extract  15 0 %20))
 %30
)
)
)
result)
(define (vsubl_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (+  e0  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %30 (extract  31 0 %20))
 %30
)
)
)
result)
(define (vsubl_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (+  e0  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %30 (extract  63 0 %20))
 %30
)
)
)
result)
(define (vsubl_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (+  e0  1))
 (define %10 (*  %9  8))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (+  e0  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %30 (extract  15 0 %20))
 %30
)
)
)
result)
(define (vsubl_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (+  e0  1))
 (define %10 (*  %9  16))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (+  e0  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %30 (extract  31 0 %20))
 %30
)
)
)
result)
(define (vsubl_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (+  e0  1))
 (define %10 (*  %9  32))
 (define %11 (-  %10  1))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (+  e0  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %30 (extract  63 0 %20))
 %30
)
)
)
result)
(define (vsubw_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvsub  %11  %17))
 (define %28 (extract  15 0 %18))
 %28
)
)
)
result)
(define (vsubw_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvsub  %11  %17))
 (define %28 (extract  31 0 %18))
 %28
)
)
)
result)
(define (vsubw_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvsub  %11  %17))
 (define %28 (extract  63 0 %18))
 %28
)
)
)
result)
(define (vsubw_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvsub  %11  %17))
 (define %28 (extract  15 0 %18))
 %28
)
)
)
result)
(define (vsubw_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvsub  %11  %17))
 (define %28 (extract  31 0 %18))
 %28
)
)
)
result)
(define (vsubw_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 b))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvsub  %11  %17))
 (define %28 (extract  63 0 %18))
 %28
)
)
)
result)
(define (vsubw_high_s8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %10 (*  %8  16))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (+  e0  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsub  %14  %20))
 (define %31 (extract  15 0 %21))
 %31
)
)
)
result)
(define (vsubw_high_s16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %10 (*  %8  32))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsub  %14  %20))
 (define %31 (extract  31 0 %21))
 %31
)
)
)
result)
(define (vsubw_high_s32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %10 (*  %8  64))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsub  %14  %20))
 (define %31 (extract  63 0 %21))
 %31
)
)
)
result)
(define (vsubw_high_u8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %10 (*  %8  16))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (*  e0  8))
 (define %16 (+  e0  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsub  %14  %20))
 (define %31 (extract  15 0 %21))
 %31
)
)
)
result)
(define (vsubw_high_u16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %10 (*  %8  32))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsub  %14  %20))
 (define %31 (extract  31 0 %21))
 %31
)
)
)
result)
(define (vsubw_high_u32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %10 (*  %8  64))
 (define %11 (-  %10  1))
 (define %13 (extract  %11 %7 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 %3))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsub  %14  %20))
 (define %31 (extract  63 0 %21))
 %31
)
)
)
result)
(define (vhsub_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsubq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsub_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsubq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsub_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhsubq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhsub_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsubq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsub_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsubq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsub_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhsubq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vqsub_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsub_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsub_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsubq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsub_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsub_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsub_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsub_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsubq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsub_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubs_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsubd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubs_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsubd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vsubhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vsubhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vsubhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vsubhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vsubhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vsubhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vsubhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 0 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vrsubhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vrsubhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vrsubhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vrsubhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
result)
(define (vrsubhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
result)
(define (vrsubhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
result)
(define (vrsubhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vrsubhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vrsubhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vrsubhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %12 (*  %10  16))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  16))
 (define %18 (+  e0  1))
 (define %20 (*  %18  16))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 128 16)))
 (define %32 (extract  15 8 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vrsubhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %12 (*  %10  32))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  32))
 (define %18 (+  e0  1))
 (define %20 (*  %18  32))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 32768 32)))
 (define %32 (extract  31 16 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vrsubhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %12 (*  %10  64))
 (define %13 (-  %12  1))
 (define %15 (extract  %13 %9 a))
 (define %17 (*  e0  64))
 (define %18 (+  e0  1))
 (define %20 (*  %18  64))
 (define %21 (-  %20  1))
 (define %23 (extract  %21 %17 b))
 (define %24 (bvsub  %15  %23))
 (define %25 (bvadd  %24  (bv 2147483648 64)))
 (define %32 (extract  63 32 %25))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vceq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceqq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceqq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceqq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceqq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceqq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceqq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqz_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vceqzq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vceqz_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqzq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqz_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqzq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqz_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vceqzq_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vceqz_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqzq_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqz_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqzq_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqz_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqz_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzq_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzd_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcge_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcgeq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcge_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcgeq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcge_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcgeq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcge_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcgeq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcge_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcgeq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcge_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcgeq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcge_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgeq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcge_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgeq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcged_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcged_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgez_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcgezq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcgez_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgezq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgez_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgezq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgez_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgezq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgezd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcle_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcleq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcle_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcleq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcle_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcleq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcle_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcleq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcle_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcleq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcle_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcleq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcle_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcleq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcle_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcleq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcled_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcled_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vclez_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vclezq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vclez_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vclezq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vclez_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vclezq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vclez_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vclezq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vclezd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgt_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcgtq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcgt_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcgtq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcgt_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcgtq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcgt_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcgtq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcgt_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcgtq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcgt_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcgtq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcgt_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgtq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgt_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgtq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgtd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgtd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcgtz_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcgtzq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcgtz_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgtzq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgtz_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgtzq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgtz_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgtzq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgtzd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vclt_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcltq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vclt_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcltq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vclt_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcltq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vclt_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vcltq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 255 8) (bv 0 8)))
 %21
)
)
)
result)
(define (vclt_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vcltq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 65535 16) (bv 0 16)))
 %21
)
)
)
result)
(define (vclt_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vcltq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 4294967295 32) (bv 0 32)))
 %21
)
)
)
result)
(define (vclt_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcltq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vclt_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcltq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcltd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcltd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (+  e0  1))
 (define %9 (*  %8  64))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %14 (bvsgt  %6  %12))
 (define %21 (if (equal? %14 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %21
)
)
)
result)
(define (vcltz_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcltzq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcltz_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcltzq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcltz_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcltzq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcltz_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcltzq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcltzd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vtst_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vtstq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vtst_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtstq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtst_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtstq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtst_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vtstq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vtst_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtstq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (+  e0  1))
 (define %8 (*  %7  16))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtst_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtstq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtst_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtst_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vmax_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
result)
(define (vmaxq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
result)
(define (vmax_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
result)
(define (vmaxq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
result)
(define (vmax_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
result)
(define (vmaxq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
result)
(define (vmax_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
result)
(define (vmaxq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %14))
 %20
)
)
)
result)
(define (vmax_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
result)
(define (vmaxq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %14))
 %20
)
)
)
result)
(define (vmax_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
result)
(define (vmaxq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %14))
 %20
)
)
)
result)
(define (vmin_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %13))
 %20
)
)
)
result)
(define (vminq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %13))
 %20
)
)
)
result)
(define (vmin_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %13))
 %20
)
)
)
result)
(define (vminq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %13))
 %20
)
)
)
result)
(define (vmin_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %13))
 %20
)
)
)
result)
(define (vminq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %13))
 %20
)
)
)
result)
(define (vmin_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %13))
 %20
)
)
)
result)
(define (vminq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (+  e0  1))
 (define %9 (*  %8  8))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  7 0 %13))
 %20
)
)
)
result)
(define (vmin_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %13))
 %20
)
)
)
result)
(define (vminq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (+  e0  1))
 (define %9 (*  %8  16))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  15 0 %13))
 %20
)
)
)
result)
(define (vmin_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %13))
 %20
)
)
)
result)
(define (vminq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (+  e0  1))
 (define %9 (*  %8  32))
 (define %10 (-  %9  1))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %14 (bvsmax  %6  %12))
 (define %20 (extract  31 0 %13))
 %20
)
)
)
result)
(define (vshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  63 0 %16))
 %22
)
)
)
result)
(define (vshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  63 0 %16))
 %22
)
)
)
result)
(define (vshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  7 0 %16))
 %22
)
)
)
result)
(define (vshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  15 0 %16))
 %22
)
)
)
result)
(define (vshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  31 0 %16))
 %22
)
)
)
result)
(define (vshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  63 0 %16))
 %22
)
)
)
result)
(define (vshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  63 0 %16))
 %22
)
)
)
result)
(define (vshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  63 0 %16))
 %22
)
)
)
result)
(define (vshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %22 (extract  63 0 %16))
 %22
)
)
)
result)
(define (vqshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 64 ))
 %21
)
)
)
result)
(define (vqshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 64 ))
 %21
)
)
)
result)
(define (vqshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 64 ))
 %21
)
)
)
result)
(define (vqshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 64 ))
 %21
)
)
)
result)
(define (vqshlb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshlh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshls_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvssat %16 192 64 ))
 %21
)
)
)
result)
(define (vqshlb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  8))
 (define %10 (+  e0  1))
 (define %11 (*  %10  8))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 8 ))
 %21
)
)
)
result)
(define (vqshlh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 16 ))
 %21
)
)
)
result)
(define (vqshls_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 32 ))
 %21
)
)
)
result)
(define (vqshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  64))
 (define %10 (+  e0  1))
 (define %11 (*  %10  64))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %15 (bvadd  %14  (bv 0 192)))
 (define %16 (armshl  %15  %8))
 (define %21 (bvusat %16 192 64 ))
 %21
)
)
)
result)
(define (vrshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vrshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vrshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vrshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vrshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vrshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vrshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  63 0 %19))
 %25
)
)
)
result)
(define (vrshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  63 0 %19))
 %25
)
)
)
result)
(define (vrshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vrshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  7 0 %19))
 %25
)
)
)
result)
(define (vrshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vrshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  15 0 %19))
 %25
)
)
)
result)
(define (vrshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vrshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  31 0 %19))
 %25
)
)
)
result)
(define (vrshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  63 0 %19))
 %25
)
)
)
result)
(define (vrshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  63 0 %19))
 %25
)
)
)
result)
(define (vrshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  63 0 %19))
 %25
)
)
)
result)
(define (vrshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %25 (extract  63 0 %19))
 %25
)
)
)
result)
(define (vqrshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqrshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqrshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqrshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqrshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqrshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqrshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqrshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqrshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqrshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqrshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqrshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqrshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqrshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqrshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vqrshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vqrshlb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 8 ))
 %24
)
)
)
result)
(define (vqrshlh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 16 ))
 %24
)
)
)
result)
(define (vqrshls_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 32 ))
 %24
)
)
)
result)
(define (vqrshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvssat %19 192 64 ))
 %24
)
)
)
result)
(define (vqrshlb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (+  e0  1))
 (define %4 (*  %3  8))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  8))
 (define %13 (+  e0  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 8 ))
 %24
)
)
)
result)
(define (vqrshlh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (+  e0  1))
 (define %4 (*  %3  16))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  16))
 (define %13 (+  e0  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 16 ))
 %24
)
)
)
result)
(define (vqrshls_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (+  e0  1))
 (define %4 (*  %3  32))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  32))
 (define %13 (+  e0  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 32 ))
 %24
)
)
)
result)
(define (vqrshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (+  e0  1))
 (define %4 (*  %3  64))
 (define %5 (-  %4  1))
 (define %6 (extract  %5 %2 b))
 (define %7 (extract  7 0 %6))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (bvneg  %8))
 (define %10 (bvsub  %9  (bv 1 192)))
 (define %11 (armshl  (bv 1 192)  %10))
 (define %12 (*  e0  64))
 (define %13 (+  e0  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %12 a))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %18 (bvadd  %17  %11))
 (define %19 (armshl  %18  %8))
 (define %24 (bvusat %19 192 64 ))
 %24
)
)
)
result)
(define (vmovn_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
result)
(define (vmovn_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
result)
(define (vmovn_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
result)
(define (vmovn_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
result)
(define (vmovn_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
result)
(define (vmovn_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
result)
(define (vmovn_high_s16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vmovn_high_s32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vmovn_high_s64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vmovn_high_u16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  7 0 %10))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vmovn_high_u32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  15 0 %10))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vmovn_high_u64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %16 (extract  31 0 %10))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovn_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 8 ))
 %16
)
)
)
result)
(define (vqmovn_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 16 ))
 %16
)
)
)
result)
(define (vqmovn_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 32 ))
 %16
)
)
)
result)
(define (vqmovn_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 8 ))
 %16
)
)
)
result)
(define (vqmovn_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 16 ))
 %16
)
)
)
result)
(define (vqmovn_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 32 ))
 %16
)
)
)
result)
(define (vqmovnh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 8 ))
 %16
)
)
)
result)
(define (vqmovns_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 16 ))
 %16
)
)
)
result)
(define (vqmovnd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 32 ))
 %16
)
)
)
result)
(define (vqmovnh_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 8 ))
 %16
)
)
)
result)
(define (vqmovns_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 16 ))
 %16
)
)
)
result)
(define (vqmovnd_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 32 ))
 %16
)
)
)
result)
(define (vqmovn_high_s16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 8 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovn_high_s32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 16 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovn_high_s64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvssat %15 192 32 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovn_high_u16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 8 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovn_high_u32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 16 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovn_high_u64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (zero-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 32 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovun_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 8 ))
 %16
)
)
)
result)
(define (vqmovun_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 16 ))
 %16
)
)
)
result)
(define (vqmovun_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 32 ))
 %16
)
)
)
result)
(define (vqmovunh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 8 ))
 %16
)
)
)
result)
(define (vqmovuns_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 16 ))
 %16
)
)
)
result)
(define (vqmovund_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 32 ))
 %16
)
)
)
result)
(define (vqmovun_high_s16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (+  e0  1))
 (define %7 (*  %5  16))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 8 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovun_high_s32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (+  e0  1))
 (define %7 (*  %5  32))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 16 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vqmovun_high_s64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (+  e0  1))
 (define %7 (*  %5  64))
 (define %8 (-  %7  1))
 (define %10 (extract  %8 %4 a))
 (define %15 (sign-extend  %10 (bitvector 192)))
 (define %16 (bvusat %15 192 32 ))
 %16
)
)
)
(define %17 (concat result r))
%17)
(define (vabs_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vabsq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vabs_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vabsq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vabs_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vabsq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vabs_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vabsd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vabsq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vqabs_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqabsq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqabs_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqabsq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqabs_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqabsq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqabs_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqabsq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqabsb_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqabsh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqabss_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqabsd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vneg_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vnegq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vneg_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vnegq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vneg_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vnegq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vneg_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vnegd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vnegq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vqneg_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqnegq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqneg_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqnegq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqneg_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqnegq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqneg_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqnegq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqnegb_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqnegh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (+  e0  1))
 (define %3 (*  %2  16))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqnegs_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqnegd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vmvn_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vand_s8  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_s8  a b )
(define %0 (bvand  a  b))
%0)
(define (vand_s16  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_s16  a b )
(define %0 (bvand  a  b))
%0)
(define (vand_s32  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_s32  a b )
(define %0 (bvand  a  b))
%0)
(define (vand_s64  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_s64  a b )
(define %0 (bvand  a  b))
%0)
(define (vand_u8  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_u8  a b )
(define %0 (bvand  a  b))
%0)
(define (vand_u16  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_u16  a b )
(define %0 (bvand  a  b))
%0)
(define (vand_u32  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_u32  a b )
(define %0 (bvand  a  b))
%0)
(define (vand_u64  a b )
(define %0 (bvand  a  b))
%0)
(define (vandq_u64  a b )
(define %0 (bvand  a  b))
%0)
(define (vorr_s8  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_s8  a b )
(define %0 (bvor  a  b))
%0)
(define (vorr_s16  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_s16  a b )
(define %0 (bvor  a  b))
%0)
(define (vorr_s32  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_s32  a b )
(define %0 (bvor  a  b))
%0)
(define (vorr_s64  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_s64  a b )
(define %0 (bvor  a  b))
%0)
(define (vorr_u8  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_u8  a b )
(define %0 (bvor  a  b))
%0)
(define (vorr_u16  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_u16  a b )
(define %0 (bvor  a  b))
%0)
(define (vorr_u32  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_u32  a b )
(define %0 (bvor  a  b))
%0)
(define (vorr_u64  a b )
(define %0 (bvor  a  b))
%0)
(define (vorrq_u64  a b )
(define %0 (bvor  a  b))
%0)
(define (veor_s8  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_s8  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (veor_s16  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_s16  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (veor_s32  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_s32  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (veor_s64  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_s64  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (veor_u8  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_u8  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (veor_u16  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_u16  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (veor_u32  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_u32  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (veor_u64  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
%4)
(define (veorq_u64  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
%4)
(define (vbic_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbic_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbic_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbic_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbic_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbic_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbic_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbic_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vbicq_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
%1)
(define (vorn_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vorn_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vorn_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vorn_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vorn_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vorn_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vorn_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vorn_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vornq_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
%1)
(define (vbsl_s8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_s8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbsl_s16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_s16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbsl_s32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_s32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbsl_s64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_s64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbsl_u8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_u8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbsl_u16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_u16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbsl_u32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_u32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbsl_u64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vbslq_u64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
%2)
(define (vpadd_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_s64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  64))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  64))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  64))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  64))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  64))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  64))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  64))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (+  %14  1))
 (define %16 (*  %15  64))
 (define %17 (-  %16  1))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpmax_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vpmax_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vpmax_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vpmax_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vpmax_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vpmax_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vpmaxq_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vpmaxq_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vpmaxq_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vpmaxq_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vpmaxq_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vpmaxq_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vpmin_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %21))
 %28
)
)
)
result)
(define (vpmin_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %21))
 %28
)
)
)
result)
(define (vpmin_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %21))
 %28
)
)
)
result)
(define (vpmin_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %21))
 %28
)
)
)
result)
(define (vpmin_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %21))
 %28
)
)
)
result)
(define (vpmin_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %21))
 %28
)
)
)
result)
(define (vpminq_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %21))
 %28
)
)
)
result)
(define (vpminq_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %21))
 %28
)
)
)
result)
(define (vpminq_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %21))
 %28
)
)
)
result)
(define (vpminq_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  8))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  7 0 %21))
 %28
)
)
)
result)
(define (vpminq_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  16))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  15 0 %21))
 %28
)
)
)
result)
(define (vpminq_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (+  %5  1))
 (define %7 (*  %6  32))
 (define %8 (-  %7  1))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %22 (bvsmax  %10  %20))
 (define %28 (extract  31 0 %21))
 %28
)
)
)
result)
(define (vzip1_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  64))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  64))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  64))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  64))
 (define %12 (+  0  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  64))
 (define %27 (+  0  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  64))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  8))
 (define %12 (+  4  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  8))
 (define %27 (+  4  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  8  p0))
 (define %11 (*  %10  8))
 (define %12 (+  8  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  8  p0))
 (define %26 (*  %25  8))
 (define %27 (+  8  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  16))
 (define %12 (+  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  16))
 (define %27 (+  2  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  16))
 (define %12 (+  4  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  16))
 (define %27 (+  4  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  32))
 (define %12 (+  1  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  32))
 (define %27 (+  1  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  32))
 (define %12 (+  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  32))
 (define %27 (+  2  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  64))
 (define %12 (+  1  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  64))
 (define %27 (+  1  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  64))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  8))
 (define %12 (+  4  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  8))
 (define %27 (+  4  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  8  p0))
 (define %11 (*  %10  8))
 (define %12 (+  8  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  8  p0))
 (define %26 (*  %25  8))
 (define %27 (+  8  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  8))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  16))
 (define %12 (+  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  16))
 (define %27 (+  2  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  16))
 (define %12 (+  4  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  16))
 (define %27 (+  4  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  16))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  32))
 (define %12 (+  1  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  32))
 (define %27 (+  1  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  32))
 (define %12 (+  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  32))
 (define %27 (+  2  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  32))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  64))
 (define %12 (+  1  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  64))
 (define %15 (-  %14  1))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  64))
 (define %27 (+  1  p0))
 (define %28 (+  %27  1))
 (define %29 (*  %28  64))
 (define %30 (-  %29  1))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vuzp1_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  64))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  64))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  0))
 (define %9 (*  %8  64))
 (define %10 (*  2  e0))
 (define %11 (+  %10  0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  64))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  64))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  64))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  64))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (+  %11  1))
 (define %13 (*  %12  64))
 (define %14 (-  %13  1))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vtrn1_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  64))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  64))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  64))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  0))
 (define %11 (*  %10  64))
 (define %12 (*  2  p0))
 (define %13 (+  %12  0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  0))
 (define %28 (*  %27  64))
 (define %29 (*  2  p0))
 (define %30 (+  %29  0))
 (define %31 (+  %30  1))
 (define %32 (*  %31  64))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  64))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  64))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  64))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  8))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  16))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  32))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  64))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %16 (-  %15  1))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  64))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (+  %30  1))
 (define %32 (*  %31  64))
 (define %33 (-  %32  1))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vqrdmlah_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 16 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvadd  %21  %23))
 (define %25 (bvadd  %24  (bv 32768 192)))
 (define %30 (bvashr  %25  (bv 16 192)))
 (define %31 (bvssat %30 192 16 ))
 %31
)
)
)
result)
(define (vqrdmlah_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 32 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvadd  %21  %23))
 (define %25 (bvadd  %24  (bv 2147483648 192)))
 (define %30 (bvashr  %25  (bv 32 192)))
 (define %31 (bvssat %30 192 32 ))
 %31
)
)
)
result)
(define (vqrdmlahq_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 16 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvadd  %21  %23))
 (define %25 (bvadd  %24  (bv 32768 192)))
 (define %30 (bvashr  %25  (bv 16 192)))
 (define %31 (bvssat %30 192 16 ))
 %31
)
)
)
result)
(define (vqrdmlahq_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 32 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvadd  %21  %23))
 (define %25 (bvadd  %24  (bv 2147483648 192)))
 (define %30 (bvashr  %25  (bv 32 192)))
 (define %31 (bvssat %30 192 32 ))
 %31
)
)
)
result)
(define (vqrdmlsh_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 16 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 32768 192)))
 (define %30 (bvashr  %25  (bv 16 192)))
 (define %31 (bvssat %30 192 16 ))
 %31
)
)
)
result)
(define (vqrdmlsh_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 32 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 2147483648 192)))
 (define %30 (bvashr  %25  (bv 32 192)))
 (define %31 (bvssat %30 192 32 ))
 %31
)
)
)
result)
(define (vqrdmlshq_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 16 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 32768 192)))
 (define %30 (bvashr  %25  (bv 16 192)))
 (define %31 (bvssat %30 192 16 ))
 %31
)
)
)
result)
(define (vqrdmlshq_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 32 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 2147483648 192)))
 (define %30 (bvashr  %25  (bv 32 192)))
 (define %31 (bvssat %30 192 32 ))
 %31
)
)
)
result)
(define (vqrdmlahh_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 16 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 32768 192)))
 (define %30 (bvashr  %25  (bv 16 192)))
 (define %31 (bvssat %30 192 16 ))
 %31
)
)
)
result)
(define (vqrdmlahs_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 32 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 2147483648 192)))
 (define %30 (bvashr  %25  (bv 32 192)))
 (define %31 (bvssat %30 192 32 ))
 %31
)
)
)
result)
(define (vqrdmlshh_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (+  e0  1))
 (define %5 (*  %4  16))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (+  e0  1))
 (define %11 (*  %10  16))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (+  e0  1))
 (define %17 (*  %16  16))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 16 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 32768 192)))
 (define %30 (bvashr  %25  (bv 16 192)))
 (define %31 (bvssat %30 192 16 ))
 %31
)
)
)
result)
(define (vqrdmlshs_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (+  e0  1))
 (define %5 (*  %4  32))
 (define %6 (-  %5  1))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (+  e0  1))
 (define %11 (*  %10  32))
 (define %12 (-  %11  1))
 (define %13 (extract  %12 %9 c))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (+  e0  1))
 (define %17 (*  %16  32))
 (define %18 (-  %17  1))
 (define %19 (extract  %18 %15 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (armshl  %20  (bv 32 192)))
 (define %22 (bvmul  %8  %14))
 (define %23 (bvmul  (bv 2 192)  %22))
 (define %24 (bvsub  %21  %23))
 (define %25 (bvadd  %24  (bv 2147483648 192)))
 (define %30 (bvashr  %25  (bv 32 192)))
 (define %31 (bvssat %30 192 32 ))
 %31
)
)
)
result)
(define (veor3q_u8  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (veor3q_u16  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (veor3q_u32  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (veor3q_u64  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (veor3q_s8  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (veor3q_s16  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (veor3q_s32  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (veor3q_s64  a b c )
(define %0 (bvxor  a  b))
(define %1 (bvxor  %0  c))
%1)
(define (vrax1q_u64  a b )
(define %0 (extract  127 64 b))
(define %1 (bvrol  %0  (bv 1 64)))
(define %2 (extract  63 0 b))
(define %3 (bvrol  %2  (bv 1 64)))
(define %4 (concat %1 %3))
(define %5 (bvxor  a  %4))
%5)
(define (vbcaxq_u8  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(define (vbcaxq_u16  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(define (vbcaxq_u32  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(define (vbcaxq_u64  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(define (vbcaxq_s8  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(define (vbcaxq_s16  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(define (vbcaxq_s32  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(define (vbcaxq_s64  a b c )
(define %0 (bvnot  c))
(define %1 (bvand  b  %0))
(define %2 (bvxor  a  %1))
%2)
(provide (all-defined-out))