#lang rosette
(require "bvops.rkt")
(define (vaba_s16  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 c))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  15 0 %15))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vaba_s32  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 c))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  31 0 %15))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vaba_s8  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 c))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  7 0 %15))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vaba_u16  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 c))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  15 0 %15))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vaba_u32  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 c))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  31 0 %15))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vaba_u8  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 c))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  7 0 %15))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vabal_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvsub  %15  %21))
 (define %25 (integer->bitvector (abs (bitvector->integer %24)) (bitvector 192)))
 (define %26 (extract  31 0 %25))
 (define %36 (*  e0  32))
 (define %38 (*  e0  32))
 (define %41 (+  %38  31))
 (define %43 (extract  %41 %36 a))
 (define %44 (bvadd  %43  %26))
 %44
)
)
)
result2)
(define (vabal_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvsub  %15  %21))
 (define %25 (integer->bitvector (abs (bitvector->integer %24)) (bitvector 192)))
 (define %26 (extract  63 0 %25))
 (define %36 (*  e0  64))
 (define %38 (*  e0  64))
 (define %41 (+  %38  63))
 (define %43 (extract  %41 %36 a))
 (define %44 (bvadd  %43  %26))
 %44
)
)
)
result2)
(define (vabal_high_s8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvsub  %15  %21))
 (define %25 (integer->bitvector (abs (bitvector->integer %24)) (bitvector 192)))
 (define %26 (extract  15 0 %25))
 (define %36 (*  e0  16))
 (define %38 (*  e0  16))
 (define %41 (+  %38  15))
 (define %43 (extract  %41 %36 a))
 (define %44 (bvadd  %43  %26))
 %44
)
)
)
result2)
(define (vabal_high_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %5))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvsub  %15  %21))
 (define %25 (integer->bitvector (abs (bitvector->integer %24)) (bitvector 192)))
 (define %26 (extract  31 0 %25))
 (define %36 (*  e0  32))
 (define %38 (*  e0  32))
 (define %41 (+  %38  31))
 (define %43 (extract  %41 %36 a))
 (define %44 (bvadd  %43  %26))
 %44
)
)
)
result2)
(define (vabal_high_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %5))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvsub  %15  %21))
 (define %25 (integer->bitvector (abs (bitvector->integer %24)) (bitvector 192)))
 (define %26 (extract  63 0 %25))
 (define %36 (*  e0  64))
 (define %38 (*  e0  64))
 (define %41 (+  %38  63))
 (define %43 (extract  %41 %36 a))
 (define %44 (bvadd  %43  %26))
 %44
)
)
)
result2)
(define (vabal_high_u8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 %2))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 %5))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvsub  %15  %21))
 (define %25 (integer->bitvector (abs (bitvector->integer %24)) (bitvector 192)))
 (define %26 (extract  15 0 %25))
 (define %36 (*  e0  16))
 (define %38 (*  e0  16))
 (define %41 (+  %38  15))
 (define %43 (extract  %41 %36 a))
 (define %44 (bvadd  %43  %26))
 %44
)
)
)
result2)
(define (vabal_s16  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %18 (bvsub  %9  %15))
 (define %19 (integer->bitvector (abs (bitvector->integer %18)) (bitvector 192)))
 (define %20 (extract  31 0 %19))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 a))
 (define %38 (bvadd  %37  %20))
 %38
)
)
)
result2)
(define (vabal_s32  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %18 (bvsub  %9  %15))
 (define %19 (integer->bitvector (abs (bitvector->integer %18)) (bitvector 192)))
 (define %20 (extract  63 0 %19))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 a))
 (define %38 (bvadd  %37  %20))
 %38
)
)
)
result2)
(define (vabal_s8  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %18 (bvsub  %9  %15))
 (define %19 (integer->bitvector (abs (bitvector->integer %18)) (bitvector 192)))
 (define %20 (extract  15 0 %19))
 (define %30 (*  e0  16))
 (define %32 (*  e0  16))
 (define %35 (+  %32  15))
 (define %37 (extract  %35 %30 a))
 (define %38 (bvadd  %37  %20))
 %38
)
)
)
result2)
(define (vabal_u16  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 b))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 c))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %18 (bvsub  %9  %15))
 (define %19 (integer->bitvector (abs (bitvector->integer %18)) (bitvector 192)))
 (define %20 (extract  31 0 %19))
 (define %30 (*  e0  32))
 (define %32 (*  e0  32))
 (define %35 (+  %32  31))
 (define %37 (extract  %35 %30 a))
 (define %38 (bvadd  %37  %20))
 %38
)
)
)
result2)
(define (vabal_u32  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 b))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 c))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %18 (bvsub  %9  %15))
 (define %19 (integer->bitvector (abs (bitvector->integer %18)) (bitvector 192)))
 (define %20 (extract  63 0 %19))
 (define %30 (*  e0  64))
 (define %32 (*  e0  64))
 (define %35 (+  %32  63))
 (define %37 (extract  %35 %30 a))
 (define %38 (bvadd  %37  %20))
 %38
)
)
)
result2)
(define (vabal_u8  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 b))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 c))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %18 (bvsub  %9  %15))
 (define %19 (integer->bitvector (abs (bitvector->integer %18)) (bitvector 192)))
 (define %20 (extract  15 0 %19))
 (define %30 (*  e0  16))
 (define %32 (*  e0  16))
 (define %35 (+  %32  15))
 (define %37 (extract  %35 %30 a))
 (define %38 (bvadd  %37  %20))
 %38
)
)
)
result2)
(define (vabaq_s16  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 c))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  15 0 %15))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vabaq_s32  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 c))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  31 0 %15))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vabaq_s8  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 c))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  7 0 %15))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vabaq_u16  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 c))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  15 0 %15))
 (define %21 (*  e0  16))
 (define %22 (*  e0  16))
 (define %24 (+  %22  15))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vabaq_u32  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 c))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  31 0 %15))
 (define %21 (*  e0  32))
 (define %22 (*  e0  32))
 (define %24 (+  %22  31))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vabaq_u8  a b c )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 c))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsub  %6  %12))
 (define %15 (integer->bitvector (abs (bitvector->integer %14)) (bitvector 192)))
 (define %16 (extract  7 0 %15))
 (define %21 (*  e0  8))
 (define %22 (*  e0  8))
 (define %24 (+  %22  7))
 (define %25 (extract  %24 %21 a))
 (define %26 (bvadd  %25  %16))
 %26
)
)
)
result2)
(define (vabd_s16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  15 0 %16))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 (bv 0 64)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabd_s32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  31 0 %16))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 (bv 0 64)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabd_s8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  7 0 %16))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 (bv 0 64)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabd_u16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  15 0 %16))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 (bv 0 64)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabd_u32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  31 0 %16))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 (bv 0 64)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabd_u8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  7 0 %16))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 (bv 0 64)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabdl_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvsub  %16  %22))
 (define %26 (integer->bitvector (abs (bitvector->integer %25)) (bitvector 192)))
 (define %27 (extract  31 0 %26))
 (define %37 (*  e0  32))
 (define %39 (*  e0  32))
 (define %42 (+  %39  31))
 (define %44 (extract  %42 %37 (bv 0 128)))
 (define %45 (bvadd  %44  %27))
 %45
)
)
)
result2)
(define (vabdl_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvsub  %16  %22))
 (define %26 (integer->bitvector (abs (bitvector->integer %25)) (bitvector 192)))
 (define %27 (extract  63 0 %26))
 (define %37 (*  e0  64))
 (define %39 (*  e0  64))
 (define %42 (+  %39  63))
 (define %44 (extract  %42 %37 (bv 0 128)))
 (define %45 (bvadd  %44  %27))
 %45
)
)
)
result2)
(define (vabdl_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvsub  %16  %22))
 (define %26 (integer->bitvector (abs (bitvector->integer %25)) (bitvector 192)))
 (define %27 (extract  15 0 %26))
 (define %37 (*  e0  16))
 (define %39 (*  e0  16))
 (define %42 (+  %39  15))
 (define %44 (extract  %42 %37 (bv 0 128)))
 (define %45 (bvadd  %44  %27))
 %45
)
)
)
result2)
(define (vabdl_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvsub  %16  %22))
 (define %26 (integer->bitvector (abs (bitvector->integer %25)) (bitvector 192)))
 (define %27 (extract  31 0 %26))
 (define %37 (*  e0  32))
 (define %39 (*  e0  32))
 (define %42 (+  %39  31))
 (define %44 (extract  %42 %37 (bv 0 128)))
 (define %45 (bvadd  %44  %27))
 %45
)
)
)
result2)
(define (vabdl_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvsub  %16  %22))
 (define %26 (integer->bitvector (abs (bitvector->integer %25)) (bitvector 192)))
 (define %27 (extract  63 0 %26))
 (define %37 (*  e0  64))
 (define %39 (*  e0  64))
 (define %42 (+  %39  63))
 (define %44 (extract  %42 %37 (bv 0 128)))
 (define %45 (bvadd  %44  %27))
 %45
)
)
)
result2)
(define (vabdl_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvsub  %16  %22))
 (define %26 (integer->bitvector (abs (bitvector->integer %25)) (bitvector 192)))
 (define %27 (extract  15 0 %26))
 (define %37 (*  e0  16))
 (define %39 (*  e0  16))
 (define %42 (+  %39  15))
 (define %44 (extract  %42 %37 (bv 0 128)))
 (define %45 (bvadd  %44  %27))
 %45
)
)
)
result2)
(define (vabdl_s16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 a))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 b))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvsub  %10  %16))
 (define %20 (integer->bitvector (abs (bitvector->integer %19)) (bitvector 192)))
 (define %21 (extract  31 0 %20))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 (bv 0 128)))
 (define %39 (bvadd  %38  %21))
 %39
)
)
)
result2)
(define (vabdl_s32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 a))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 b))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvsub  %10  %16))
 (define %20 (integer->bitvector (abs (bitvector->integer %19)) (bitvector 192)))
 (define %21 (extract  63 0 %20))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 (bv 0 128)))
 (define %39 (bvadd  %38  %21))
 %39
)
)
)
result2)
(define (vabdl_s8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 a))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 b))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvsub  %10  %16))
 (define %20 (integer->bitvector (abs (bitvector->integer %19)) (bitvector 192)))
 (define %21 (extract  15 0 %20))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 (bv 0 128)))
 (define %39 (bvadd  %38  %21))
 %39
)
)
)
result2)
(define (vabdl_u16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 a))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 b))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvsub  %10  %16))
 (define %20 (integer->bitvector (abs (bitvector->integer %19)) (bitvector 192)))
 (define %21 (extract  31 0 %20))
 (define %31 (*  e0  32))
 (define %33 (*  e0  32))
 (define %36 (+  %33  31))
 (define %38 (extract  %36 %31 (bv 0 128)))
 (define %39 (bvadd  %38  %21))
 %39
)
)
)
result2)
(define (vabdl_u32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 a))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 b))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvsub  %10  %16))
 (define %20 (integer->bitvector (abs (bitvector->integer %19)) (bitvector 192)))
 (define %21 (extract  63 0 %20))
 (define %31 (*  e0  64))
 (define %33 (*  e0  64))
 (define %36 (+  %33  63))
 (define %38 (extract  %36 %31 (bv 0 128)))
 (define %39 (bvadd  %38  %21))
 %39
)
)
)
result2)
(define (vabdl_u8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 a))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 b))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvsub  %10  %16))
 (define %20 (integer->bitvector (abs (bitvector->integer %19)) (bitvector 192)))
 (define %21 (extract  15 0 %20))
 (define %31 (*  e0  16))
 (define %33 (*  e0  16))
 (define %36 (+  %33  15))
 (define %38 (extract  %36 %31 (bv 0 128)))
 (define %39 (bvadd  %38  %21))
 %39
)
)
)
result2)
(define (vabdq_s16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  15 0 %16))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 (bv 0 128)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabdq_s32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  31 0 %16))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 (bv 0 128)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabdq_s8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  7 0 %16))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 (bv 0 128)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabdq_u16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  15 0 %16))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 (bv 0 128)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabdq_u32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  31 0 %16))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 (bv 0 128)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabdq_u8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvsub  %7  %13))
 (define %16 (integer->bitvector (abs (bitvector->integer %15)) (bitvector 192)))
 (define %17 (extract  7 0 %16))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 (bv 0 128)))
 (define %27 (bvadd  %26  %17))
 %27
)
)
)
result2)
(define (vabs_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vabs_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vabs_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vabs_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vabsd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vabsq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vabsq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vabsq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vabsq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vaddhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
result)
(define (vaddhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
result)
(define (vaddhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
result)
(define (vaddhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
result)
(define (vaddhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
result)
(define (vaddhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvadd  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
result)
(define (vaddl_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vaddl_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvadd  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vaddl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %25 (extract  31 0 %14))
 %25
)
)
)
result)
(define (vaddl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %25 (extract  63 0 %14))
 %25
)
)
)
result)
(define (vaddl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %25 (extract  15 0 %14))
 %25
)
)
)
result)
(define (vaddl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %25 (extract  31 0 %14))
 %25
)
)
)
result)
(define (vaddl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %25 (extract  63 0 %14))
 %25
)
)
)
result)
(define (vaddl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvadd  %7  %13))
 (define %25 (extract  15 0 %14))
 %25
)
)
)
result)
(define (vaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvadd  %5  %10))
 %15
)
)
)
result)
(define (vaddv_s16  a )
(define %25 (extract  15 0 a))
(define %26 (bvadd  (bv 0 16)  %25))
(define %31 (extract  31 16 a))
(define %32 (bvadd  %26  %31))
(define %37 (extract  47 32 a))
(define %38 (bvadd  %32  %37))
(define %43 (extract  63 48 a))
(define %44 (bvadd  %38  %43))
(define %0.reduce4 %44)
%0.reduce4)
(define (vaddv_s32  a )
(define %17 (extract  31 0 a))
(define %18 (bvadd  (bv 0 32)  %17))
(define %23 (extract  63 32 a))
(define %24 (bvadd  %18  %23))
(define %0.reduce2 %24)
%0.reduce2)
(define (vaddv_s8  a )
(define %41 (extract  7 0 a))
(define %42 (bvadd  (bv 0 8)  %41))
(define %47 (extract  15 8 a))
(define %48 (bvadd  %42  %47))
(define %53 (extract  23 16 a))
(define %54 (bvadd  %48  %53))
(define %59 (extract  31 24 a))
(define %60 (bvadd  %54  %59))
(define %65 (extract  39 32 a))
(define %66 (bvadd  %60  %65))
(define %71 (extract  47 40 a))
(define %72 (bvadd  %66  %71))
(define %77 (extract  55 48 a))
(define %78 (bvadd  %72  %77))
(define %83 (extract  63 56 a))
(define %84 (bvadd  %78  %83))
(define %0.reduce8 %84)
%0.reduce8)
(define (vaddv_u16  a )
(define %25 (extract  15 0 a))
(define %26 (bvadd  (bv 0 16)  %25))
(define %31 (extract  31 16 a))
(define %32 (bvadd  %26  %31))
(define %37 (extract  47 32 a))
(define %38 (bvadd  %32  %37))
(define %43 (extract  63 48 a))
(define %44 (bvadd  %38  %43))
(define %0.reduce4 %44)
%0.reduce4)
(define (vaddv_u32  a )
(define %17 (extract  31 0 a))
(define %18 (bvadd  (bv 0 32)  %17))
(define %23 (extract  63 32 a))
(define %24 (bvadd  %18  %23))
(define %0.reduce2 %24)
%0.reduce2)
(define (vaddv_u8  a )
(define %41 (extract  7 0 a))
(define %42 (bvadd  (bv 0 8)  %41))
(define %47 (extract  15 8 a))
(define %48 (bvadd  %42  %47))
(define %53 (extract  23 16 a))
(define %54 (bvadd  %48  %53))
(define %59 (extract  31 24 a))
(define %60 (bvadd  %54  %59))
(define %65 (extract  39 32 a))
(define %66 (bvadd  %60  %65))
(define %71 (extract  47 40 a))
(define %72 (bvadd  %66  %71))
(define %77 (extract  55 48 a))
(define %78 (bvadd  %72  %77))
(define %83 (extract  63 56 a))
(define %84 (bvadd  %78  %83))
(define %0.reduce8 %84)
%0.reduce8)
(define (vaddvq_s16  a )
(define %41 (extract  15 0 a))
(define %42 (bvadd  (bv 0 16)  %41))
(define %47 (extract  31 16 a))
(define %48 (bvadd  %42  %47))
(define %53 (extract  47 32 a))
(define %54 (bvadd  %48  %53))
(define %59 (extract  63 48 a))
(define %60 (bvadd  %54  %59))
(define %65 (extract  79 64 a))
(define %66 (bvadd  %60  %65))
(define %71 (extract  95 80 a))
(define %72 (bvadd  %66  %71))
(define %77 (extract  111 96 a))
(define %78 (bvadd  %72  %77))
(define %83 (extract  127 112 a))
(define %84 (bvadd  %78  %83))
(define %0.reduce8 %84)
%0.reduce8)
(define (vaddvq_s32  a )
(define %25 (extract  31 0 a))
(define %26 (bvadd  (bv 0 32)  %25))
(define %31 (extract  63 32 a))
(define %32 (bvadd  %26  %31))
(define %37 (extract  95 64 a))
(define %38 (bvadd  %32  %37))
(define %43 (extract  127 96 a))
(define %44 (bvadd  %38  %43))
(define %0.reduce4 %44)
%0.reduce4)
(define (vaddvq_s64  a )
(define %17 (extract  63 0 a))
(define %18 (bvadd  (bv 0 64)  %17))
(define %23 (extract  127 64 a))
(define %24 (bvadd  %18  %23))
(define %0.reduce2 %24)
%0.reduce2)
(define (vaddvq_s8  a )
(define %73 (extract  7 0 a))
(define %74 (bvadd  (bv 0 8)  %73))
(define %79 (extract  15 8 a))
(define %80 (bvadd  %74  %79))
(define %85 (extract  23 16 a))
(define %86 (bvadd  %80  %85))
(define %91 (extract  31 24 a))
(define %92 (bvadd  %86  %91))
(define %97 (extract  39 32 a))
(define %98 (bvadd  %92  %97))
(define %103 (extract  47 40 a))
(define %104 (bvadd  %98  %103))
(define %109 (extract  55 48 a))
(define %110 (bvadd  %104  %109))
(define %115 (extract  63 56 a))
(define %116 (bvadd  %110  %115))
(define %121 (extract  71 64 a))
(define %122 (bvadd  %116  %121))
(define %127 (extract  79 72 a))
(define %128 (bvadd  %122  %127))
(define %133 (extract  87 80 a))
(define %134 (bvadd  %128  %133))
(define %139 (extract  95 88 a))
(define %140 (bvadd  %134  %139))
(define %145 (extract  103 96 a))
(define %146 (bvadd  %140  %145))
(define %151 (extract  111 104 a))
(define %152 (bvadd  %146  %151))
(define %157 (extract  119 112 a))
(define %158 (bvadd  %152  %157))
(define %163 (extract  127 120 a))
(define %164 (bvadd  %158  %163))
(define %0.reduce16 %164)
%0.reduce16)
(define (vaddvq_u16  a )
(define %41 (extract  15 0 a))
(define %42 (bvadd  (bv 0 16)  %41))
(define %47 (extract  31 16 a))
(define %48 (bvadd  %42  %47))
(define %53 (extract  47 32 a))
(define %54 (bvadd  %48  %53))
(define %59 (extract  63 48 a))
(define %60 (bvadd  %54  %59))
(define %65 (extract  79 64 a))
(define %66 (bvadd  %60  %65))
(define %71 (extract  95 80 a))
(define %72 (bvadd  %66  %71))
(define %77 (extract  111 96 a))
(define %78 (bvadd  %72  %77))
(define %83 (extract  127 112 a))
(define %84 (bvadd  %78  %83))
(define %0.reduce8 %84)
%0.reduce8)
(define (vaddvq_u32  a )
(define %25 (extract  31 0 a))
(define %26 (bvadd  (bv 0 32)  %25))
(define %31 (extract  63 32 a))
(define %32 (bvadd  %26  %31))
(define %37 (extract  95 64 a))
(define %38 (bvadd  %32  %37))
(define %43 (extract  127 96 a))
(define %44 (bvadd  %38  %43))
(define %0.reduce4 %44)
%0.reduce4)
(define (vaddvq_u64  a )
(define %17 (extract  63 0 a))
(define %18 (bvadd  (bv 0 64)  %17))
(define %23 (extract  127 64 a))
(define %24 (bvadd  %18  %23))
(define %0.reduce2 %24)
%0.reduce2)
(define (vaddvq_u8  a )
(define %73 (extract  7 0 a))
(define %74 (bvadd  (bv 0 8)  %73))
(define %79 (extract  15 8 a))
(define %80 (bvadd  %74  %79))
(define %85 (extract  23 16 a))
(define %86 (bvadd  %80  %85))
(define %91 (extract  31 24 a))
(define %92 (bvadd  %86  %91))
(define %97 (extract  39 32 a))
(define %98 (bvadd  %92  %97))
(define %103 (extract  47 40 a))
(define %104 (bvadd  %98  %103))
(define %109 (extract  55 48 a))
(define %110 (bvadd  %104  %109))
(define %115 (extract  63 56 a))
(define %116 (bvadd  %110  %115))
(define %121 (extract  71 64 a))
(define %122 (bvadd  %116  %121))
(define %127 (extract  79 72 a))
(define %128 (bvadd  %122  %127))
(define %133 (extract  87 80 a))
(define %134 (bvadd  %128  %133))
(define %139 (extract  95 88 a))
(define %140 (bvadd  %134  %139))
(define %145 (extract  103 96 a))
(define %146 (bvadd  %140  %145))
(define %151 (extract  111 104 a))
(define %152 (bvadd  %146  %151))
(define %157 (extract  119 112 a))
(define %158 (bvadd  %152  %157))
(define %163 (extract  127 120 a))
(define %164 (bvadd  %158  %163))
(define %0.reduce16 %164)
%0.reduce16)
(define (vaddw_high_s16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %3))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %15  %21))
 (define %33 (extract  31 0 %22))
 %33
)
)
)
result)
(define (vaddw_high_s32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %3))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %15  %21))
 (define %33 (extract  63 0 %22))
 %33
)
)
)
result)
(define (vaddw_high_s8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 %3))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %15  %21))
 (define %33 (extract  15 0 %22))
 %33
)
)
)
result)
(define (vaddw_high_u16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %3))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %15  %21))
 (define %33 (extract  31 0 %22))
 %33
)
)
)
result)
(define (vaddw_high_u32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %3))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %15  %21))
 (define %33 (extract  63 0 %22))
 %33
)
)
)
result)
(define (vaddw_high_u8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 %3))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %15  %21))
 (define %33 (extract  15 0 %22))
 %33
)
)
)
result)
(define (vaddw_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 b))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %30 (extract  31 0 %19))
 %30
)
)
)
result)
(define (vaddw_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 b))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %30 (extract  63 0 %19))
 %30
)
)
)
result)
(define (vaddw_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 b))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %30 (extract  15 0 %19))
 %30
)
)
)
result)
(define (vaddw_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 b))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %30 (extract  31 0 %19))
 %30
)
)
)
result)
(define (vaddw_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 b))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %30 (extract  63 0 %19))
 %30
)
)
)
result)
(define (vaddw_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 b))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvadd  %12  %18))
 (define %30 (extract  15 0 %19))
 %30
)
)
)
result)
(define (vand_s16  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vand_s32  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vand_s64  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vand_s8  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vand_u16  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vand_u32  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vand_u64  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vand_u8  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_s16  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_s32  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_s64  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_s8  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_u16  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_u32  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_u64  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vandq_u8  a b )
(define %0 (bvand  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vbic_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbic_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbic_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbic_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbic_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbic_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbic_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbic_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbicq_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvand  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vbsl_s16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbsl_s32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbsl_s64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbsl_s8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbsl_u16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbsl_u32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbsl_u64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbsl_u8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_s16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_s32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_s64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_s8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_u16  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_u32  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_u64  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vbslq_u8  a b c )
(define %0 (bvxor  c  b))
(define %1 (bvand  %0  a))
(define %2 (bvxor  c  %1))
(define %12 (bvxor  c  b))
(define %13 (bvand  %12  a))
(define %14 (bvxor  c  %13))
(define %3fakeReturn %14)
%3fakeReturn)
(define (vceq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceqd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceqq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceqq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceqq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 65535 16) (bv 0 16)))
 %18
)
)
)
result)
(define (vceqq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 4294967295 32) (bv 0 32)))
 %18
)
)
)
result)
(define (vceqq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %18
)
)
)
result)
(define (vceqq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bveq  %5  %10))
 (define %18 (if (equal? %11 #t) (bv 255 8) (bv 0 8)))
 %18
)
)
)
result)
(define (vceqz_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqz_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqz_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqz_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vceqz_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqz_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqz_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqz_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vceqzd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzd_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqzq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqzq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vceqzq_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vceqzq_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vceqzq_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vceqzq_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bveq  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcge_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcge_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcge_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcge_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcge_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcge_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcge_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcge_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcged_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcged_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgeq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcgeq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcgeq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgeq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcgeq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcgeq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcgeq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgeq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcgez_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgez_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgez_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgez_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcgezd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgezq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgezq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgezq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgezq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsge  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcgt_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcgt_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcgt_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgt_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcgt_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcgt_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcgt_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgt_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcgtd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgtd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgtq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcgtq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcgtq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgtq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcgtq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcgtq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcgtq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcgtq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcgtz_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgtz_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgtz_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgtz_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcgtzd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgtzq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcgtzq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcgtzq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcgtzq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsgt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcle_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcle_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcle_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcle_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcle_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcle_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcle_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcle_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcled_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcled_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcleq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcleq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcleq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcleq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcleq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcleq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcleq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcleq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsge  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vclez_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vclez_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vclez_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vclez_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vclezd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vclezq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vclezq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vclezq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vclezq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvsle  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vclt_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vclt_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vclt_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vclt_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vclt_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vclt_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vclt_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vclt_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcltd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcltd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcltq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcltq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcltq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcltq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcltq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vcltq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vcltq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vcltq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsgt  %6  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vcltz_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcltz_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcltz_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcltz_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vcltzd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcltzq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 65535 16) (bv 0 16)))
 %14
)
)
)
result)
(define (vcltzq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 4294967295 32) (bv 0 32)))
 %14
)
)
)
result)
(define (vcltzq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %14
)
)
)
result)
(define (vcltzq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvslt  %6  (bv 0 192)))
 (define %14 (if (equal? %7 #t) (bv 255 8) (bv 0 8)))
 %14
)
)
)
result)
(define (vdot_s32  r a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  4  e0))
 (define %4 (*  %1  8))
 (define %5 (*  4  e0))
 (define %8 (*  %5  8))
 (define %11 (+  %8  7))
 (define %13 (extract  %11 %4 a))
 (define %14 (sign-extend  %13 (bitvector 32)))
 (define %15 (*  4  e0))
 (define %18 (*  %15  8))
 (define %19 (*  4  e0))
 (define %22 (*  %19  8))
 (define %25 (+  %22  7))
 (define %27 (extract  %25 %18 b))
 (define %28 (sign-extend  %27 (bitvector 32)))
 (define %29 (bvmul  %14  %28))
 (define %30 (*  4  e0))
 (define %31 (+  %30  1))
 (define %33 (*  %31  8))
 (define %34 (*  4  e0))
 (define %35 (+  %34  1))
 (define %37 (*  %35  8))
 (define %40 (+  %37  7))
 (define %42 (extract  %40 %33 a))
 (define %43 (sign-extend  %42 (bitvector 32)))
 (define %44 (*  4  e0))
 (define %45 (+  %44  1))
 (define %47 (*  %45  8))
 (define %48 (*  4  e0))
 (define %49 (+  %48  1))
 (define %51 (*  %49  8))
 (define %54 (+  %51  7))
 (define %56 (extract  %54 %47 b))
 (define %57 (sign-extend  %56 (bitvector 32)))
 (define %58 (bvmul  %43  %57))
 (define %59 (*  4  e0))
 (define %60 (+  %59  2))
 (define %62 (*  %60  8))
 (define %63 (*  4  e0))
 (define %64 (+  %63  2))
 (define %66 (*  %64  8))
 (define %69 (+  %66  7))
 (define %71 (extract  %69 %62 a))
 (define %72 (sign-extend  %71 (bitvector 32)))
 (define %73 (*  4  e0))
 (define %74 (+  %73  2))
 (define %76 (*  %74  8))
 (define %77 (*  4  e0))
 (define %78 (+  %77  2))
 (define %80 (*  %78  8))
 (define %83 (+  %80  7))
 (define %85 (extract  %83 %76 b))
 (define %86 (sign-extend  %85 (bitvector 32)))
 (define %87 (bvmul  %72  %86))
 (define %88 (*  4  e0))
 (define %89 (+  %88  3))
 (define %91 (*  %89  8))
 (define %92 (*  4  e0))
 (define %93 (+  %92  3))
 (define %95 (*  %93  8))
 (define %98 (+  %95  7))
 (define %100 (extract  %98 %91 a))
 (define %101 (sign-extend  %100 (bitvector 32)))
 (define %102 (*  4  e0))
 (define %103 (+  %102  3))
 (define %105 (*  %103  8))
 (define %106 (*  4  e0))
 (define %107 (+  %106  3))
 (define %109 (*  %107  8))
 (define %112 (+  %109  7))
 (define %114 (extract  %112 %105 b))
 (define %115 (sign-extend  %114 (bitvector 32)))
 (define %116 (bvmul  %101  %115))
 (define %117 (*  e0  32))
 (define %118 (*  e0  32))
 (define %120 (+  %118  31))
 (define %121 (extract  %120 %117 r))
 (define %127 (bvadd  %121  %29))
 (define %128 (bvadd  %127  %58))
 (define %129 (bvadd  %128  %87))
 (define %130 (bvadd  %129  %116))
 %130
)
)
)
result2)
(define (vdot_u32  r a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  4  e0))
 (define %4 (*  %1  8))
 (define %5 (*  4  e0))
 (define %8 (*  %5  8))
 (define %11 (+  %8  7))
 (define %13 (extract  %11 %4 a))
 (define %14 (zero-extend  %13 (bitvector 32)))
 (define %15 (*  4  e0))
 (define %18 (*  %15  8))
 (define %19 (*  4  e0))
 (define %22 (*  %19  8))
 (define %25 (+  %22  7))
 (define %27 (extract  %25 %18 b))
 (define %28 (zero-extend  %27 (bitvector 32)))
 (define %29 (bvmul  %14  %28))
 (define %30 (*  4  e0))
 (define %31 (+  %30  1))
 (define %33 (*  %31  8))
 (define %34 (*  4  e0))
 (define %35 (+  %34  1))
 (define %37 (*  %35  8))
 (define %40 (+  %37  7))
 (define %42 (extract  %40 %33 a))
 (define %43 (zero-extend  %42 (bitvector 32)))
 (define %44 (*  4  e0))
 (define %45 (+  %44  1))
 (define %47 (*  %45  8))
 (define %48 (*  4  e0))
 (define %49 (+  %48  1))
 (define %51 (*  %49  8))
 (define %54 (+  %51  7))
 (define %56 (extract  %54 %47 b))
 (define %57 (zero-extend  %56 (bitvector 32)))
 (define %58 (bvmul  %43  %57))
 (define %59 (*  4  e0))
 (define %60 (+  %59  2))
 (define %62 (*  %60  8))
 (define %63 (*  4  e0))
 (define %64 (+  %63  2))
 (define %66 (*  %64  8))
 (define %69 (+  %66  7))
 (define %71 (extract  %69 %62 a))
 (define %72 (zero-extend  %71 (bitvector 32)))
 (define %73 (*  4  e0))
 (define %74 (+  %73  2))
 (define %76 (*  %74  8))
 (define %77 (*  4  e0))
 (define %78 (+  %77  2))
 (define %80 (*  %78  8))
 (define %83 (+  %80  7))
 (define %85 (extract  %83 %76 b))
 (define %86 (zero-extend  %85 (bitvector 32)))
 (define %87 (bvmul  %72  %86))
 (define %88 (*  4  e0))
 (define %89 (+  %88  3))
 (define %91 (*  %89  8))
 (define %92 (*  4  e0))
 (define %93 (+  %92  3))
 (define %95 (*  %93  8))
 (define %98 (+  %95  7))
 (define %100 (extract  %98 %91 a))
 (define %101 (zero-extend  %100 (bitvector 32)))
 (define %102 (*  4  e0))
 (define %103 (+  %102  3))
 (define %105 (*  %103  8))
 (define %106 (*  4  e0))
 (define %107 (+  %106  3))
 (define %109 (*  %107  8))
 (define %112 (+  %109  7))
 (define %114 (extract  %112 %105 b))
 (define %115 (zero-extend  %114 (bitvector 32)))
 (define %116 (bvmul  %101  %115))
 (define %117 (*  e0  32))
 (define %118 (*  e0  32))
 (define %120 (+  %118  31))
 (define %121 (extract  %120 %117 r))
 (define %127 (bvadd  %121  %29))
 (define %128 (bvadd  %127  %58))
 (define %129 (bvadd  %128  %87))
 (define %130 (bvadd  %129  %116))
 %130
)
)
)
result2)
(define (vdotq_s32  r a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  4  e0))
 (define %4 (*  %1  8))
 (define %5 (*  4  e0))
 (define %8 (*  %5  8))
 (define %11 (+  %8  7))
 (define %13 (extract  %11 %4 a))
 (define %14 (sign-extend  %13 (bitvector 32)))
 (define %15 (*  4  e0))
 (define %18 (*  %15  8))
 (define %19 (*  4  e0))
 (define %22 (*  %19  8))
 (define %25 (+  %22  7))
 (define %27 (extract  %25 %18 b))
 (define %28 (sign-extend  %27 (bitvector 32)))
 (define %29 (bvmul  %14  %28))
 (define %30 (*  4  e0))
 (define %31 (+  %30  1))
 (define %33 (*  %31  8))
 (define %34 (*  4  e0))
 (define %35 (+  %34  1))
 (define %37 (*  %35  8))
 (define %40 (+  %37  7))
 (define %42 (extract  %40 %33 a))
 (define %43 (sign-extend  %42 (bitvector 32)))
 (define %44 (*  4  e0))
 (define %45 (+  %44  1))
 (define %47 (*  %45  8))
 (define %48 (*  4  e0))
 (define %49 (+  %48  1))
 (define %51 (*  %49  8))
 (define %54 (+  %51  7))
 (define %56 (extract  %54 %47 b))
 (define %57 (sign-extend  %56 (bitvector 32)))
 (define %58 (bvmul  %43  %57))
 (define %59 (*  4  e0))
 (define %60 (+  %59  2))
 (define %62 (*  %60  8))
 (define %63 (*  4  e0))
 (define %64 (+  %63  2))
 (define %66 (*  %64  8))
 (define %69 (+  %66  7))
 (define %71 (extract  %69 %62 a))
 (define %72 (sign-extend  %71 (bitvector 32)))
 (define %73 (*  4  e0))
 (define %74 (+  %73  2))
 (define %76 (*  %74  8))
 (define %77 (*  4  e0))
 (define %78 (+  %77  2))
 (define %80 (*  %78  8))
 (define %83 (+  %80  7))
 (define %85 (extract  %83 %76 b))
 (define %86 (sign-extend  %85 (bitvector 32)))
 (define %87 (bvmul  %72  %86))
 (define %88 (*  4  e0))
 (define %89 (+  %88  3))
 (define %91 (*  %89  8))
 (define %92 (*  4  e0))
 (define %93 (+  %92  3))
 (define %95 (*  %93  8))
 (define %98 (+  %95  7))
 (define %100 (extract  %98 %91 a))
 (define %101 (sign-extend  %100 (bitvector 32)))
 (define %102 (*  4  e0))
 (define %103 (+  %102  3))
 (define %105 (*  %103  8))
 (define %106 (*  4  e0))
 (define %107 (+  %106  3))
 (define %109 (*  %107  8))
 (define %112 (+  %109  7))
 (define %114 (extract  %112 %105 b))
 (define %115 (sign-extend  %114 (bitvector 32)))
 (define %116 (bvmul  %101  %115))
 (define %117 (*  e0  32))
 (define %118 (*  e0  32))
 (define %120 (+  %118  31))
 (define %121 (extract  %120 %117 r))
 (define %127 (bvadd  %121  %29))
 (define %128 (bvadd  %127  %58))
 (define %129 (bvadd  %128  %87))
 (define %130 (bvadd  %129  %116))
 %130
)
)
)
result2)
(define (vdotq_u32  r a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  4  e0))
 (define %4 (*  %1  8))
 (define %5 (*  4  e0))
 (define %8 (*  %5  8))
 (define %11 (+  %8  7))
 (define %13 (extract  %11 %4 a))
 (define %14 (zero-extend  %13 (bitvector 32)))
 (define %15 (*  4  e0))
 (define %18 (*  %15  8))
 (define %19 (*  4  e0))
 (define %22 (*  %19  8))
 (define %25 (+  %22  7))
 (define %27 (extract  %25 %18 b))
 (define %28 (zero-extend  %27 (bitvector 32)))
 (define %29 (bvmul  %14  %28))
 (define %30 (*  4  e0))
 (define %31 (+  %30  1))
 (define %33 (*  %31  8))
 (define %34 (*  4  e0))
 (define %35 (+  %34  1))
 (define %37 (*  %35  8))
 (define %40 (+  %37  7))
 (define %42 (extract  %40 %33 a))
 (define %43 (zero-extend  %42 (bitvector 32)))
 (define %44 (*  4  e0))
 (define %45 (+  %44  1))
 (define %47 (*  %45  8))
 (define %48 (*  4  e0))
 (define %49 (+  %48  1))
 (define %51 (*  %49  8))
 (define %54 (+  %51  7))
 (define %56 (extract  %54 %47 b))
 (define %57 (zero-extend  %56 (bitvector 32)))
 (define %58 (bvmul  %43  %57))
 (define %59 (*  4  e0))
 (define %60 (+  %59  2))
 (define %62 (*  %60  8))
 (define %63 (*  4  e0))
 (define %64 (+  %63  2))
 (define %66 (*  %64  8))
 (define %69 (+  %66  7))
 (define %71 (extract  %69 %62 a))
 (define %72 (zero-extend  %71 (bitvector 32)))
 (define %73 (*  4  e0))
 (define %74 (+  %73  2))
 (define %76 (*  %74  8))
 (define %77 (*  4  e0))
 (define %78 (+  %77  2))
 (define %80 (*  %78  8))
 (define %83 (+  %80  7))
 (define %85 (extract  %83 %76 b))
 (define %86 (zero-extend  %85 (bitvector 32)))
 (define %87 (bvmul  %72  %86))
 (define %88 (*  4  e0))
 (define %89 (+  %88  3))
 (define %91 (*  %89  8))
 (define %92 (*  4  e0))
 (define %93 (+  %92  3))
 (define %95 (*  %93  8))
 (define %98 (+  %95  7))
 (define %100 (extract  %98 %91 a))
 (define %101 (zero-extend  %100 (bitvector 32)))
 (define %102 (*  4  e0))
 (define %103 (+  %102  3))
 (define %105 (*  %103  8))
 (define %106 (*  4  e0))
 (define %107 (+  %106  3))
 (define %109 (*  %107  8))
 (define %112 (+  %109  7))
 (define %114 (extract  %112 %105 b))
 (define %115 (zero-extend  %114 (bitvector 32)))
 (define %116 (bvmul  %101  %115))
 (define %117 (*  e0  32))
 (define %118 (*  e0  32))
 (define %120 (+  %118  31))
 (define %121 (extract  %120 %117 r))
 (define %127 (bvadd  %121  %29))
 (define %128 (bvadd  %127  %58))
 (define %129 (bvadd  %128  %87))
 (define %130 (bvadd  %129  %116))
 %130
)
)
)
result2)
(define (vdup_n_s16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vdup_n_s32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vdup_n_s8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vdup_n_u16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vdup_n_u32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vdup_n_u8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vdupq_n_s16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vdupq_n_s32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vdupq_n_s64  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vdupq_n_s8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 value
)
)
)
result)
(define (vdupq_n_u16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vdupq_n_u32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vdupq_n_u64  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vdupq_n_u8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 value
)
)
)
result)
(define (veor_s16  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veor_s32  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veor_s64  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veor_s8  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veor_u16  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veor_u32  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veor_u64  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veor_u8  a b )
(define %2 (bvxor  (bv 0 64)  a))
(define %3 (bvand  %2  (bv 18446744073709551615 64)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 64)  a))
(define %15 (bvand  %14  (bv 18446744073709551615 64)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_s16  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_s32  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_s64  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_s8  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_u16  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_u32  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_u64  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (veorq_u8  a b )
(define %2 (bvxor  (bv 0 128)  a))
(define %3 (bvand  %2  (bv 340282366920938463463374607431768211455 128)))
(define %4 (bvxor  b  %3))
(define %14 (bvxor  (bv 0 128)  a))
(define %15 (bvand  %14  (bv 340282366920938463463374607431768211455 128)))
(define %16 (bvxor  b  %15))
(define %5fakeReturn %16)
%5fakeReturn)
(define (vhadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsub_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsub_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhsub_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsub_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsub_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhsub_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsubq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsubq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhsubq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vhsubq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  16 1 %13))
 %18
)
)
)
result)
(define (vhsubq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  32 1 %13))
 %18
)
)
)
result)
(define (vhsubq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (extract  8 1 %13))
 %18
)
)
)
result)
(define (vmax_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmax  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vmax_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmax  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vmax_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmax  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vmax_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumax  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vmax_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumax  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vmax_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumax  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vmaxq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmax  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vmaxq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmax  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vmaxq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmax  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vmaxq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumax  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vmaxq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumax  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vmaxq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumax  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vmin_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vmin_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vmin_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vmin_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumin  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vmin_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumin  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vmin_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumin  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vminq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vminq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vminq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsmin  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vminq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumin  %6  %12))
 (define %19 (extract  15 0 %13))
 %19
)
)
)
result)
(define (vminq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumin  %6  %12))
 (define %19 (extract  31 0 %13))
 %19
)
)
)
result)
(define (vminq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvumin  %6  %12))
 (define %19 (extract  7 0 %13))
 %19
)
)
)
result)
(define (vmla_n_s16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_n_s32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_n_u16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_n_u32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmla_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlal_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  15 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  31 0 %21))
 (define %32 (*  e0  32))
 (define %34 (*  e0  32))
 (define %37 (+  %34  31))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvadd  %39  %22))
 %40
)
)
)
result)
(define (vmlal_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  31 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  63 0 %21))
 (define %32 (*  e0  64))
 (define %34 (*  e0  64))
 (define %37 (+  %34  63))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvadd  %39  %22))
 %40
)
)
)
result)
(define (vmlal_high_n_u16  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  15 0 c))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  31 0 %21))
 (define %32 (*  e0  32))
 (define %34 (*  e0  32))
 (define %37 (+  %34  31))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvadd  %39  %22))
 %40
)
)
)
result)
(define (vmlal_high_n_u32  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  31 0 c))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  63 0 %21))
 (define %32 (*  e0  64))
 (define %34 (*  e0  64))
 (define %37 (+  %34  63))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvadd  %39  %22))
 %40
)
)
)
result)
(define (vmlal_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %30 (*  e0  32))
 (define %33 (+  %30  31))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvadd  %35  %26))
 %36
)
)
)
result)
(define (vmlal_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %30 (*  e0  64))
 (define %33 (+  %30  63))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvadd  %35  %26))
 %36
)
)
)
result)
(define (vmlal_high_s8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %30 (*  e0  16))
 (define %33 (+  %30  15))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvadd  %35  %26))
 %36
)
)
)
result)
(define (vmlal_high_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %30 (*  e0  32))
 (define %33 (+  %30  31))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvadd  %35  %26))
 %36
)
)
)
result)
(define (vmlal_high_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %30 (*  e0  64))
 (define %33 (+  %30  63))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvadd  %35  %26))
 %36
)
)
)
result)
(define (vmlal_high_u8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %30 (*  e0  16))
 (define %33 (+  %30  15))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvadd  %35  %26))
 %36
)
)
)
result)
(define (vmlal_n_s16  a b c )
(define %7 (extract  15 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  31 0 %18))
 (define %29 (*  e0  32))
 (define %31 (*  e0  32))
 (define %34 (+  %31  31))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvadd  %36  %19))
 %37
)
)
)
result)
(define (vmlal_n_s32  a b c )
(define %7 (extract  31 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  63 0 %18))
 (define %29 (*  e0  64))
 (define %31 (*  e0  64))
 (define %34 (+  %31  63))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvadd  %36  %19))
 %37
)
)
)
result)
(define (vmlal_n_u16  a b c )
(define %7 (extract  15 0 c))
(define %8 (zero-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  31 0 %18))
 (define %29 (*  e0  32))
 (define %31 (*  e0  32))
 (define %34 (+  %31  31))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvadd  %36  %19))
 %37
)
)
)
result)
(define (vmlal_n_u32  a b c )
(define %7 (extract  31 0 c))
(define %8 (zero-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  63 0 %18))
 (define %29 (*  e0  64))
 (define %31 (*  e0  64))
 (define %34 (+  %31  63))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvadd  %36  %19))
 %37
)
)
)
result)
(define (vmlal_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvadd  %29  %20))
 %30
)
)
)
result)
(define (vmlal_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvadd  %29  %20))
 %30
)
)
)
result)
(define (vmlal_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvadd  %29  %20))
 %30
)
)
)
result)
(define (vmlal_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvadd  %29  %20))
 %30
)
)
)
result)
(define (vmlal_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvadd  %29  %20))
 %30
)
)
)
result)
(define (vmlal_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvadd  %29  %20))
 %30
)
)
)
result)
(define (vmlaq_n_s16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_n_s32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_n_u16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_n_u32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmlaq_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvadd  %24  %15))
 %25
)
)
)
result)
(define (vmls_n_s16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_n_s32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_n_u16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_n_u32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmls_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsl_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  15 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  31 0 %21))
 (define %32 (*  e0  32))
 (define %34 (*  e0  32))
 (define %37 (+  %34  31))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvsub  %39  %22))
 %40
)
)
)
result)
(define (vmlsl_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  31 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  63 0 %21))
 (define %32 (*  e0  64))
 (define %34 (*  e0  64))
 (define %37 (+  %34  63))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvsub  %39  %22))
 %40
)
)
)
result)
(define (vmlsl_high_n_u16  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  15 0 c))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  31 0 %21))
 (define %32 (*  e0  32))
 (define %34 (*  e0  32))
 (define %37 (+  %34  31))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvsub  %39  %22))
 %40
)
)
)
result)
(define (vmlsl_high_n_u32  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  31 0 c))
(define %11 (zero-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %21 (bvmul  %18  %11))
 (define %22 (extract  63 0 %21))
 (define %32 (*  e0  64))
 (define %34 (*  e0  64))
 (define %37 (+  %34  63))
 (define %39 (extract  %37 %32 a))
 (define %40 (bvsub  %39  %22))
 %40
)
)
)
result)
(define (vmlsl_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %30 (*  e0  32))
 (define %33 (+  %30  31))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvsub  %35  %26))
 %36
)
)
)
result)
(define (vmlsl_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %30 (*  e0  64))
 (define %33 (+  %30  63))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvsub  %35  %26))
 %36
)
)
)
result)
(define (vmlsl_high_s8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 %2))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 %5))
 (define %22 (sign-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %30 (*  e0  16))
 (define %33 (+  %30  15))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvsub  %35  %26))
 %36
)
)
)
result)
(define (vmlsl_high_u16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  16))
 (define %18 (*  e0  16))
 (define %20 (+  %18  15))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  31 0 %25))
 (define %28 (*  e0  32))
 (define %30 (*  e0  32))
 (define %33 (+  %30  31))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvsub  %35  %26))
 %36
)
)
)
result)
(define (vmlsl_high_u32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  32))
 (define %18 (*  e0  32))
 (define %20 (+  %18  31))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  63 0 %25))
 (define %28 (*  e0  64))
 (define %30 (*  e0  64))
 (define %33 (+  %30  63))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvsub  %35  %26))
 %36
)
)
)
result)
(define (vmlsl_high_u8  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 %2))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (*  e0  8))
 (define %18 (*  e0  8))
 (define %20 (+  %18  7))
 (define %21 (extract  %20 %17 %5))
 (define %22 (zero-extend  %21 (bitvector 192)))
 (define %25 (bvmul  %16  %22))
 (define %26 (extract  15 0 %25))
 (define %28 (*  e0  16))
 (define %30 (*  e0  16))
 (define %33 (+  %30  15))
 (define %35 (extract  %33 %28 a))
 (define %36 (bvsub  %35  %26))
 %36
)
)
)
result)
(define (vmlsl_n_s16  a b c )
(define %7 (extract  15 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  31 0 %18))
 (define %29 (*  e0  32))
 (define %31 (*  e0  32))
 (define %34 (+  %31  31))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvsub  %36  %19))
 %37
)
)
)
result)
(define (vmlsl_n_s32  a b c )
(define %7 (extract  31 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  63 0 %18))
 (define %29 (*  e0  64))
 (define %31 (*  e0  64))
 (define %34 (+  %31  63))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvsub  %36  %19))
 %37
)
)
)
result)
(define (vmlsl_n_u16  a b c )
(define %7 (extract  15 0 c))
(define %8 (zero-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  31 0 %18))
 (define %29 (*  e0  32))
 (define %31 (*  e0  32))
 (define %34 (+  %31  31))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvsub  %36  %19))
 %37
)
)
)
result)
(define (vmlsl_n_u32  a b c )
(define %7 (extract  31 0 c))
(define %8 (zero-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %18 (bvmul  %15  %8))
 (define %19 (extract  63 0 %18))
 (define %29 (*  e0  64))
 (define %31 (*  e0  64))
 (define %34 (+  %31  63))
 (define %36 (extract  %34 %29 a))
 (define %37 (bvsub  %36  %19))
 %37
)
)
)
result)
(define (vmlsl_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvsub  %29  %20))
 %30
)
)
)
result)
(define (vmlsl_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvsub  %29  %20))
 %30
)
)
)
result)
(define (vmlsl_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 b))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 c))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvsub  %29  %20))
 %30
)
)
)
result)
(define (vmlsl_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  31 0 %19))
 (define %22 (*  e0  32))
 (define %24 (*  e0  32))
 (define %27 (+  %24  31))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvsub  %29  %20))
 %30
)
)
)
result)
(define (vmlsl_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  63 0 %19))
 (define %22 (*  e0  64))
 (define %24 (*  e0  64))
 (define %27 (+  %24  63))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvsub  %29  %20))
 %30
)
)
)
result)
(define (vmlsl_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 b))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 c))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %19 (bvmul  %10  %16))
 (define %20 (extract  15 0 %19))
 (define %22 (*  e0  16))
 (define %24 (*  e0  16))
 (define %27 (+  %24  15))
 (define %29 (extract  %27 %22 a))
 (define %30 (bvsub  %29  %20))
 %30
)
)
)
result)
(define (vmlsq_n_s16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_n_s32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_n_u16  a b c )
(define %4 (extract  15 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_n_u32  a b c )
(define %4 (extract  31 0 c))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_s8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_u16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 (define %20 (*  e0  16))
 (define %21 (*  e0  16))
 (define %23 (+  %21  15))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_u32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 (define %20 (*  e0  32))
 (define %21 (*  e0  32))
 (define %23 (+  %21  31))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmlsq_u8  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 c))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 (define %20 (*  e0  8))
 (define %21 (*  e0  8))
 (define %23 (+  %21  7))
 (define %24 (extract  %23 %20 a))
 (define %25 (bvsub  %24  %15))
 %25
)
)
)
result)
(define (vmov_n_s16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vmov_n_s32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vmov_n_s8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vmov_n_u16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vmov_n_u32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vmov_n_u8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vmovl_high_s16  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %22 (extract  31 0 %10))
 %22
)
)
)
result)
(define (vmovl_high_s32  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %22 (extract  63 0 %10))
 %22
)
)
)
result)
(define (vmovl_high_s8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %22 (extract  15 0 %10))
 %22
)
)
)
result)
(define (vmovl_high_u16  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  16))
 (define %6 (*  e0  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %22 (extract  31 0 %10))
 %22
)
)
)
result)
(define (vmovl_high_u32  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  32))
 (define %6 (*  e0  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %22 (extract  63 0 %10))
 %22
)
)
)
result)
(define (vmovl_high_u8  a )
(define %2 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  8))
 (define %6 (*  e0  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %5 %2))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %22 (extract  15 0 %10))
 %22
)
)
)
result)
(define (vmovl_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %19 (extract  31 0 %7))
 %19
)
)
)
result)
(define (vmovl_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %19 (extract  63 0 %7))
 %19
)
)
)
result)
(define (vmovl_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %19 (extract  15 0 %7))
 %19
)
)
)
result)
(define (vmovl_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %19 (extract  31 0 %7))
 %19
)
)
)
result)
(define (vmovl_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %19 (extract  63 0 %7))
 %19
)
)
)
result)
(define (vmovl_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %19 (extract  15 0 %7))
 %19
)
)
)
result)
(define (vmovn_high_s16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  7 0 %11))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vmovn_high_s32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  15 0 %11))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vmovn_high_s64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  31 0 %11))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vmovn_high_u16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  7 0 %11))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vmovn_high_u32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  15 0 %11))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vmovn_high_u64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  31 0 %11))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vmovn_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  7 0 %11))
 %17
)
)
)
result)
(define (vmovn_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  15 0 %11))
 %17
)
)
)
result)
(define (vmovn_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  31 0 %11))
 %17
)
)
)
result)
(define (vmovn_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  7 0 %11))
 %17
)
)
)
result)
(define (vmovn_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  15 0 %11))
 %17
)
)
)
result)
(define (vmovn_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %17 (extract  31 0 %11))
 %17
)
)
)
result)
(define (vmovq_n_s16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vmovq_n_s32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vmovq_n_s64  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vmovq_n_s8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 value
)
)
)
result)
(define (vmovq_n_u16  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 value
)
)
)
result)
(define (vmovq_n_u32  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 value
)
)
)
result)
(define (vmovq_n_u64  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 value
)
)
)
result)
(define (vmovq_n_u8  value )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 value
)
)
)
result)
(define (vmul_n_s16  a b )
(define %4 (extract  15 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmul_n_s32  a b )
(define %4 (extract  31 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmul_n_u16  a b )
(define %4 (extract  15 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmul_n_u32  a b )
(define %4 (extract  31 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmul_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmul_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmul_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmul_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmul_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmul_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmull_high_n_s16  a b )
(define %2 (extract  127 64 a))
(define %9 (extract  15 0 b))
(define %10 (sign-extend  %9 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %2))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %17  %10))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmull_high_n_s32  a b )
(define %2 (extract  127 64 a))
(define %9 (extract  31 0 b))
(define %10 (sign-extend  %9 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %2))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %17  %10))
 (define %21 (extract  63 0 %20))
 %21
)
)
)
result)
(define (vmull_high_n_u16  a b )
(define %2 (extract  127 64 a))
(define %9 (extract  15 0 b))
(define %10 (zero-extend  %9 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %2))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %17  %10))
 (define %21 (extract  31 0 %20))
 %21
)
)
)
result)
(define (vmull_high_n_u32  a b )
(define %2 (extract  127 64 a))
(define %9 (extract  31 0 b))
(define %10 (zero-extend  %9 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %2))
 (define %17 (zero-extend  %16 (bitvector 192)))
 (define %20 (bvmul  %17  %10))
 (define %21 (extract  63 0 %20))
 %21
)
)
)
result)
(define (vmull_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  31 0 %30))
 %31
)
)
)
result)
(define (vmull_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  63 0 %30))
 %31
)
)
)
result)
(define (vmull_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  15 0 %30))
 %31
)
)
)
result)
(define (vmull_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  31 0 %30))
 %31
)
)
)
result)
(define (vmull_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  63 0 %30))
 %31
)
)
)
result)
(define (vmull_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %30 (bvmul  %13  %19))
 (define %31 (extract  15 0 %30))
 %31
)
)
)
result)
(define (vmull_n_s16  a b )
(define %6 (extract  15 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %17 (bvmul  %14  %7))
 (define %18 (extract  31 0 %17))
 %18
)
)
)
result)
(define (vmull_n_s32  a b )
(define %6 (extract  31 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %17 (bvmul  %14  %7))
 (define %18 (extract  63 0 %17))
 %18
)
)
)
result)
(define (vmull_n_u16  a b )
(define %6 (extract  15 0 b))
(define %7 (zero-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %17 (bvmul  %14  %7))
 (define %18 (extract  31 0 %17))
 %18
)
)
)
result)
(define (vmull_n_u32  a b )
(define %6 (extract  31 0 b))
(define %7 (zero-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 a))
 (define %14 (zero-extend  %13 (bitvector 192)))
 (define %17 (bvmul  %14  %7))
 (define %18 (extract  63 0 %17))
 %18
)
)
)
result)
(define (vmull_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %24 (bvmul  %7  %13))
 (define %25 (extract  31 0 %24))
 %25
)
)
)
result)
(define (vmull_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %24 (bvmul  %7  %13))
 (define %25 (extract  63 0 %24))
 %25
)
)
)
result)
(define (vmull_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %24 (bvmul  %7  %13))
 (define %25 (extract  15 0 %24))
 %25
)
)
)
result)
(define (vmull_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %24 (bvmul  %7  %13))
 (define %25 (extract  31 0 %24))
 %25
)
)
)
result)
(define (vmull_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %24 (bvmul  %7  %13))
 (define %25 (extract  63 0 %24))
 %25
)
)
)
result)
(define (vmull_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %24 (bvmul  %7  %13))
 (define %25 (extract  15 0 %24))
 %25
)
)
)
result)
(define (vmulq_n_s16  a b )
(define %4 (extract  15 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmulq_n_s32  a b )
(define %4 (extract  31 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmulq_n_u16  a b )
(define %4 (extract  15 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmulq_n_u32  a b )
(define %4 (extract  31 0 b))
(define %5 (zero-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvmul  %12  %5))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmulq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmulq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmulq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmulq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  15 0 %14))
 %15
)
)
)
result)
(define (vmulq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  31 0 %14))
 %15
)
)
)
result)
(define (vmulq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %12 (zero-extend  %5 (bitvector 192)))
 (define %13 (zero-extend  %10 (bitvector 192)))
 (define %14 (bvmul  %12  %13))
 (define %15 (extract  7 0 %14))
 %15
)
)
)
result)
(define (vmvn_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvn_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vmvnq_u8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %10 (bvnot  %5))
 %10
)
)
)
result)
(define (vneg_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vneg_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vneg_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vneg_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vnegd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vnegq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  15 0 %7))
 %13
)
)
)
result)
(define (vnegq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  31 0 %7))
 %13
)
)
)
result)
(define (vnegq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  63 0 %7))
 %13
)
)
)
result)
(define (vnegq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %13 (extract  7 0 %7))
 %13
)
)
)
result)
(define (vorn_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorn_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorn_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorn_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorn_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorn_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorn_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorn_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_s16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_s32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_s64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_s8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_u16  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_u32  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_u64  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vornq_u8  a b )
(define %0 (bvnot  b))
(define %1 (bvor  a  %0))
(define %2fakeReturn %1)
%2fakeReturn)
(define (vorr_s16  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorr_s32  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorr_s64  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorr_s8  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorr_u16  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorr_u32  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorr_u64  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorr_u8  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_s16  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_s32  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_s64  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_s8  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_u16  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_u32  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_u64  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vorrq_u8  a b )
(define %0 (bvor  a  b))
(define %1fakeReturn %0)
%1fakeReturn)
(define (vpadal_s16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  16))
 (define %5 (*  2  e0))
 (define %7 (*  %5  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %4 b))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %14 b))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  31 0 %24))
 (define %35 (*  e0  32))
 (define %37 (*  e0  32))
 (define %40 (+  %37  31))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadal_s32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  32))
 (define %5 (*  2  e0))
 (define %7 (*  %5  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %4 b))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %14 b))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  63 0 %24))
 (define %35 (*  e0  64))
 (define %37 (*  e0  64))
 (define %40 (+  %37  63))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadal_s8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  8))
 (define %5 (*  2  e0))
 (define %7 (*  %5  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %4 b))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %14 b))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  15 0 %24))
 (define %35 (*  e0  16))
 (define %37 (*  e0  16))
 (define %40 (+  %37  15))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadal_u16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  16))
 (define %5 (*  2  e0))
 (define %7 (*  %5  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %4 b))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %14 b))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  31 0 %24))
 (define %35 (*  e0  32))
 (define %37 (*  e0  32))
 (define %40 (+  %37  31))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadal_u32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  32))
 (define %5 (*  2  e0))
 (define %7 (*  %5  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %4 b))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %14 b))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  63 0 %24))
 (define %35 (*  e0  64))
 (define %37 (*  e0  64))
 (define %40 (+  %37  63))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadal_u8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  8))
 (define %5 (*  2  e0))
 (define %7 (*  %5  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %4 b))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %14 b))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  15 0 %24))
 (define %35 (*  e0  16))
 (define %37 (*  e0  16))
 (define %40 (+  %37  15))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadalq_s16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  16))
 (define %5 (*  2  e0))
 (define %7 (*  %5  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %4 b))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %14 b))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  31 0 %24))
 (define %35 (*  e0  32))
 (define %37 (*  e0  32))
 (define %40 (+  %37  31))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadalq_s32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  32))
 (define %5 (*  2  e0))
 (define %7 (*  %5  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %4 b))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %14 b))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  63 0 %24))
 (define %35 (*  e0  64))
 (define %37 (*  e0  64))
 (define %40 (+  %37  63))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadalq_s8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  8))
 (define %5 (*  2  e0))
 (define %7 (*  %5  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %4 b))
 (define %11 (sign-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %14 b))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  15 0 %24))
 (define %35 (*  e0  16))
 (define %37 (*  e0  16))
 (define %40 (+  %37  15))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadalq_u16  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  16))
 (define %5 (*  2  e0))
 (define %7 (*  %5  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %4 b))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %14 b))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  31 0 %24))
 (define %35 (*  e0  32))
 (define %37 (*  e0  32))
 (define %40 (+  %37  31))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadalq_u32  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  32))
 (define %5 (*  2  e0))
 (define %7 (*  %5  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %4 b))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %14 b))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  63 0 %24))
 (define %35 (*  e0  64))
 (define %37 (*  e0  64))
 (define %40 (+  %37  63))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadalq_u8  a b )
(define result2
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  2  e0))
 (define %4 (*  %2  8))
 (define %5 (*  2  e0))
 (define %7 (*  %5  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %4 b))
 (define %11 (zero-extend  %10 (bitvector 192)))
 (define %12 (*  2  e0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %15 (*  2  e0))
 (define %16 (+  %15  1))
 (define %17 (*  %16  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %14 b))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %24 (bvadd  %11  %21))
 (define %25 (extract  15 0 %24))
 (define %35 (*  e0  16))
 (define %37 (*  e0  16))
 (define %40 (+  %37  15))
 (define %42 (extract  %40 %35 a))
 (define %43 (bvadd  %42  %25))
 %43
)
)
)
result2)
(define (vpadd_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpadd_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddd_s64  a )
(define %17 (extract  63 0 a))
(define %18 (bvadd  (bv 0 64)  %17))
(define %23 (extract  127 64 a))
(define %24 (bvadd  %18  %23))
(define %0.reduce2 %24)
%0.reduce2)
(define (vpaddd_u64  a )
(define %17 (extract  63 0 a))
(define %18 (bvadd  (bv 0 64)  %17))
(define %23 (extract  127 64 a))
(define %24 (bvadd  %18  %23))
(define %0.reduce2 %24)
%0.reduce2)
(define (vpaddq_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_s64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  64))
 (define %5 (*  2  e0))
 (define %6 (*  %5  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  64))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  64))
 (define %5 (*  2  e0))
 (define %6 (*  %5  64))
 (define %8 (+  %6  63))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  64))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  64))
 (define %17 (+  %15  63))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpaddq_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %13 (*  2  e0))
 (define %14 (+  %13  1))
 (define %15 (*  %14  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %12 %1))
 (define %23 (bvadd  %9  %18))
 %23
)
)
)
result)
(define (vpmax_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmax  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpmax_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmax  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpmax_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmax  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vpmax_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumax  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpmax_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumax  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpmax_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumax  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vpmaxq_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmax  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpmaxq_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmax  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpmaxq_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmax  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vpmaxq_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumax  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpmaxq_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumax  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpmaxq_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumax  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vpmin_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpmin_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpmin_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vpmin_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumin  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpmin_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumin  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpmin_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumin  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vpminq_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpminq_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpminq_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (sign-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvsmin  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vpminq_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  16))
 (define %5 (*  2  e0))
 (define %6 (*  %5  16))
 (define %8 (+  %6  15))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  16))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumin  %10  %20))
 (define %27 (extract  15 0 %21))
 %27
)
)
)
result)
(define (vpminq_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  32))
 (define %5 (*  2  e0))
 (define %6 (*  %5  32))
 (define %8 (+  %6  31))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  32))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumin  %10  %20))
 (define %27 (extract  31 0 %21))
 %27
)
)
)
result)
(define (vpminq_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  2  e0))
 (define %4 (*  %3  8))
 (define %5 (*  2  e0))
 (define %6 (*  %5  8))
 (define %8 (+  %6  7))
 (define %9 (extract  %8 %4 %1))
 (define %10 (zero-extend  %9 (bitvector 192)))
 (define %11 (*  2  e0))
 (define %12 (+  %11  1))
 (define %13 (*  %12  8))
 (define %14 (*  2  e0))
 (define %15 (+  %14  1))
 (define %16 (*  %15  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %13 %1))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvumin  %10  %20))
 (define %27 (extract  7 0 %21))
 %27
)
)
)
result)
(define (vqabs_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqabs_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqabs_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqabs_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqabsb_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqabsd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqabsh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqabsq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqabsq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqabsq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqabsq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqabss_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (integer->bitvector (abs (bitvector->integer %6)) (bitvector 192)))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqadd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqadd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqaddh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqaddq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqaddq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqadds_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqadds_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvadd  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqdmlal_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  15 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %22 (bvssat %20 192 32 ))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 a))
 (define %32 (sign-extend  %31 (bitvector 192)))
 (define %33 (sign-extend  %22 (bitvector 192)))
 (define %34 (bvadd  %32  %33))
 (define %44 (bvssat %34 192 32 ))
 %44
)
)
)
result)
(define (vqdmlal_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  31 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %22 (bvssat %20 192 64 ))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 a))
 (define %32 (sign-extend  %31 (bitvector 192)))
 (define %33 (sign-extend  %22 (bitvector 192)))
 (define %34 (bvadd  %32  %33))
 (define %44 (bvssat %34 192 64 ))
 %44
)
)
)
result)
(define (vqdmlal_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 32 ))
 (define %27 (*  e0  32))
 (define %29 (*  e0  32))
 (define %32 (+  %29  31))
 (define %34 (extract  %32 %27 a))
 (define %35 (sign-extend  %34 (bitvector 192)))
 (define %36 (sign-extend  %25 (bitvector 192)))
 (define %37 (bvadd  %35  %36))
 (define %47 (bvssat %37 192 32 ))
 %47
)
)
)
result)
(define (vqdmlal_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 64 ))
 (define %27 (*  e0  64))
 (define %29 (*  e0  64))
 (define %32 (+  %29  63))
 (define %34 (extract  %32 %27 a))
 (define %35 (sign-extend  %34 (bitvector 192)))
 (define %36 (sign-extend  %25 (bitvector 192)))
 (define %37 (bvadd  %35  %36))
 (define %47 (bvssat %37 192 64 ))
 %47
)
)
)
result)
(define (vqdmlal_n_s16  a b c )
(define %7 (extract  15 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %15))
 (define %17 (bvmul  %16  %8))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %23 (*  e0  32))
 (define %26 (+  %23  31))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvadd  %29  %30))
 (define %41 (bvssat %31 192 32 ))
 %41
)
)
)
result)
(define (vqdmlal_n_s32  a b c )
(define %7 (extract  31 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %15))
 (define %17 (bvmul  %16  %8))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %23 (*  e0  64))
 (define %26 (+  %23  63))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvadd  %29  %30))
 (define %41 (bvssat %31 192 64 ))
 %41
)
)
)
result)
(define (vqdmlal_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %23 (*  e0  32))
 (define %26 (+  %23  31))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvadd  %29  %30))
 (define %41 (bvssat %31 192 32 ))
 %41
)
)
)
result)
(define (vqdmlal_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %23 (*  e0  64))
 (define %26 (+  %23  63))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvadd  %29  %30))
 (define %41 (bvssat %31 192 64 ))
 %41
)
)
)
result)
(define (vqdmlalh_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %23 (*  e0  32))
 (define %26 (+  %23  31))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvadd  %29  %30))
 (define %41 (bvssat %31 192 32 ))
 %41
)
)
)
result)
(define (vqdmlals_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %23 (*  e0  64))
 (define %26 (+  %23  63))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvadd  %29  %30))
 (define %41 (bvssat %31 192 64 ))
 %41
)
)
)
result)
(define (vqdmlsl_high_n_s16  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  15 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %22 (bvssat %20 192 32 ))
 (define %24 (*  e0  32))
 (define %26 (*  e0  32))
 (define %29 (+  %26  31))
 (define %31 (extract  %29 %24 a))
 (define %32 (sign-extend  %31 (bitvector 192)))
 (define %33 (sign-extend  %22 (bitvector 192)))
 (define %34 (bvsub  %32  %33))
 (define %44 (bvssat %34 192 32 ))
 %44
)
)
)
result)
(define (vqdmlsl_high_n_s32  a b c )
(define %2 (extract  127 64 b))
(define %10 (extract  31 0 c))
(define %11 (sign-extend  %10 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 %2))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvmul  (bv 2 192)  %18))
 (define %20 (bvmul  %19  %11))
 (define %22 (bvssat %20 192 64 ))
 (define %24 (*  e0  64))
 (define %26 (*  e0  64))
 (define %29 (+  %26  63))
 (define %31 (extract  %29 %24 a))
 (define %32 (sign-extend  %31 (bitvector 192)))
 (define %33 (sign-extend  %22 (bitvector 192)))
 (define %34 (bvsub  %32  %33))
 (define %44 (bvssat %34 192 64 ))
 %44
)
)
)
result)
(define (vqdmlsl_high_s16  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 32 ))
 (define %27 (*  e0  32))
 (define %29 (*  e0  32))
 (define %32 (+  %29  31))
 (define %34 (extract  %32 %27 a))
 (define %35 (sign-extend  %34 (bitvector 192)))
 (define %36 (sign-extend  %25 (bitvector 192)))
 (define %37 (bvsub  %35  %36))
 (define %47 (bvssat %37 192 32 ))
 %47
)
)
)
result)
(define (vqdmlsl_high_s32  a b c )
(define %2 (extract  127 64 b))
(define %5 (extract  127 64 c))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 %2))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %5))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvmul  (bv 2 192)  %15))
 (define %23 (bvmul  %22  %21))
 (define %25 (bvssat %23 192 64 ))
 (define %27 (*  e0  64))
 (define %29 (*  e0  64))
 (define %32 (+  %29  63))
 (define %34 (extract  %32 %27 a))
 (define %35 (sign-extend  %34 (bitvector 192)))
 (define %36 (sign-extend  %25 (bitvector 192)))
 (define %37 (bvsub  %35  %36))
 (define %47 (bvssat %37 192 64 ))
 %47
)
)
)
result)
(define (vqdmlsl_n_s16  a b c )
(define %7 (extract  15 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %15))
 (define %17 (bvmul  %16  %8))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %23 (*  e0  32))
 (define %26 (+  %23  31))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvsub  %29  %30))
 (define %41 (bvssat %31 192 32 ))
 %41
)
)
)
result)
(define (vqdmlsl_n_s32  a b c )
(define %7 (extract  31 0 c))
(define %8 (sign-extend  %7 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %15))
 (define %17 (bvmul  %16  %8))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %23 (*  e0  64))
 (define %26 (+  %23  63))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvsub  %29  %30))
 (define %41 (bvssat %31 192 64 ))
 %41
)
)
)
result)
(define (vqdmlsl_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %23 (*  e0  32))
 (define %26 (+  %23  31))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvsub  %29  %30))
 (define %41 (bvssat %31 192 32 ))
 %41
)
)
)
result)
(define (vqdmlsl_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %23 (*  e0  64))
 (define %26 (+  %23  63))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvsub  %29  %30))
 (define %41 (bvssat %31 192 64 ))
 %41
)
)
)
result)
(define (vqdmlslh_s16  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 32 ))
 (define %21 (*  e0  32))
 (define %23 (*  e0  32))
 (define %26 (+  %23  31))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvsub  %29  %30))
 (define %41 (bvssat %31 192 32 ))
 %41
)
)
)
result)
(define (vqdmlsls_s32  a b c )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 b))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 c))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvmul  (bv 2 192)  %9))
 (define %17 (bvmul  %16  %15))
 (define %19 (bvssat %17 192 64 ))
 (define %21 (*  e0  64))
 (define %23 (*  e0  64))
 (define %26 (+  %23  63))
 (define %28 (extract  %26 %21 a))
 (define %29 (sign-extend  %28 (bitvector 192)))
 (define %30 (sign-extend  %19 (bitvector 192)))
 (define %31 (bvsub  %29  %30))
 (define %41 (bvssat %31 192 64 ))
 %41
)
)
)
result)
(define (vqdmulh_n_s16  a b )
(define %4 (extract  15 0 b))
(define %5 (sign-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %12))
 (define %14 (bvmul  %13  %5))
 (define %20 (bvashr  %14  (bv 16 192)))
 (define %21 (bvssat %20 192 16 ))
 %21
)
)
)
result)
(define (vqdmulh_n_s32  a b )
(define %4 (extract  31 0 b))
(define %5 (sign-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %12))
 (define %14 (bvmul  %13  %5))
 (define %20 (bvashr  %14  (bv 32 192)))
 (define %21 (bvssat %20 192 32 ))
 %21
)
)
)
result)
(define (vqdmulh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %6))
 (define %14 (bvmul  %13  %12))
 (define %20 (bvashr  %14  (bv 16 192)))
 (define %21 (bvssat %20 192 16 ))
 %21
)
)
)
result)
(define (vqdmulh_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %6))
 (define %14 (bvmul  %13  %12))
 (define %20 (bvashr  %14  (bv 32 192)))
 (define %21 (bvssat %20 192 32 ))
 %21
)
)
)
result)
(define (vqdmulhh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %6))
 (define %14 (bvmul  %13  %12))
 (define %20 (bvashr  %14  (bv 16 192)))
 (define %21 (bvssat %20 192 16 ))
 %21
)
)
)
result)
(define (vqdmulhq_n_s16  a b )
(define %4 (extract  15 0 b))
(define %5 (sign-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %12))
 (define %14 (bvmul  %13  %5))
 (define %20 (bvashr  %14  (bv 16 192)))
 (define %21 (bvssat %20 192 16 ))
 %21
)
)
)
result)
(define (vqdmulhq_n_s32  a b )
(define %4 (extract  31 0 b))
(define %5 (sign-extend  %4 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %12))
 (define %14 (bvmul  %13  %5))
 (define %20 (bvashr  %14  (bv 32 192)))
 (define %21 (bvssat %20 192 32 ))
 %21
)
)
)
result)
(define (vqdmulhq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %6))
 (define %14 (bvmul  %13  %12))
 (define %20 (bvashr  %14  (bv 16 192)))
 (define %21 (bvssat %20 192 16 ))
 %21
)
)
)
result)
(define (vqdmulhq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %6))
 (define %14 (bvmul  %13  %12))
 (define %20 (bvashr  %14  (bv 32 192)))
 (define %21 (bvssat %20 192 32 ))
 %21
)
)
)
result)
(define (vqdmulhs_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvmul  (bv 2 192)  %6))
 (define %14 (bvmul  %13  %12))
 (define %20 (bvashr  %14  (bv 32 192)))
 (define %21 (bvssat %20 192 32 ))
 %21
)
)
)
result)
(define (vqdmull_high_n_s16  a b )
(define %2 (extract  127 64 a))
(define %9 (extract  15 0 b))
(define %10 (sign-extend  %9 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  16))
 (define %13 (*  e0  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %12 %2))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvmul  (bv 2 192)  %17))
 (define %19 (bvmul  %18  %10))
 (define %21 (bvssat %19 192 32 ))
 %21
)
)
)
result)
(define (vqdmull_high_n_s32  a b )
(define %2 (extract  127 64 a))
(define %9 (extract  31 0 b))
(define %10 (sign-extend  %9 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  32))
 (define %13 (*  e0  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %12 %2))
 (define %17 (sign-extend  %16 (bitvector 192)))
 (define %18 (bvmul  (bv 2 192)  %17))
 (define %19 (bvmul  %18  %10))
 (define %21 (bvssat %19 192 64 ))
 %21
)
)
)
result)
(define (vqdmull_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 32 ))
 %24
)
)
)
result)
(define (vqdmull_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 %2))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 %5))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvmul  (bv 2 192)  %14))
 (define %22 (bvmul  %21  %20))
 (define %24 (bvssat %22 192 64 ))
 %24
)
)
)
result)
(define (vqdmull_n_s16  a b )
(define %6 (extract  15 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %14))
 (define %16 (bvmul  %15  %7))
 (define %18 (bvssat %16 192 32 ))
 %18
)
)
)
result)
(define (vqdmull_n_s32  a b )
(define %6 (extract  31 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %14))
 (define %16 (bvmul  %15  %7))
 (define %18 (bvssat %16 192 64 ))
 %18
)
)
)
result)
(define (vqdmull_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 32 ))
 %18
)
)
)
result)
(define (vqdmull_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 64 ))
 %18
)
)
)
result)
(define (vqdmullh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 32 ))
 %18
)
)
)
result)
(define (vqdmulls_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %18 (bvssat %16 192 64 ))
 %18
)
)
)
result)
(define (vqmovn_high_s16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 8 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovn_high_s32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 16 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovn_high_s64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 32 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovn_high_u16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 8 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovn_high_u32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 16 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovn_high_u64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 32 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovn_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 8 ))
 %17
)
)
)
result)
(define (vqmovn_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 16 ))
 %17
)
)
)
result)
(define (vqmovn_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 32 ))
 %17
)
)
)
result)
(define (vqmovn_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 8 ))
 %17
)
)
)
result)
(define (vqmovn_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 16 ))
 %17
)
)
)
result)
(define (vqmovn_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 32 ))
 %17
)
)
)
result)
(define (vqmovnd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 32 ))
 %17
)
)
)
result)
(define (vqmovnd_u64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 32 ))
 %17
)
)
)
result)
(define (vqmovnh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 8 ))
 %17
)
)
)
result)
(define (vqmovnh_u16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 8 ))
 %17
)
)
)
result)
(define (vqmovns_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvssat %16 192 16 ))
 %17
)
)
)
result)
(define (vqmovns_u32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 16 ))
 %17
)
)
)
result)
(define (vqmovun_high_s16  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 8 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovun_high_s32  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 16 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovun_high_s64  r a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 32 ))
 %17
)
)
)
(define %18 (concat result r))
%18)
(define (vqmovun_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 8 ))
 %17
)
)
)
result)
(define (vqmovun_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 16 ))
 %17
)
)
)
result)
(define (vqmovun_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 32 ))
 %17
)
)
)
result)
(define (vqmovund_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 32 ))
 %17
)
)
)
result)
(define (vqmovunh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 8 ))
 %17
)
)
)
result)
(define (vqmovuns_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %16 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvusat %16 192 16 ))
 %17
)
)
)
result)
(define (vqneg_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqneg_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqneg_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqneg_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqnegb_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqnegd_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqnegh_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqnegq_s16  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 16 ))
 %12
)
)
)
result)
(define (vqnegq_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqnegq_s64  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 64 ))
 %12
)
)
)
result)
(define (vqnegq_s8  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 8 ))
 %12
)
)
)
result)
(define (vqnegs_s32  a )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (bvneg  %6))
 (define %12 (bvssat %7 192 32 ))
 %12
)
)
)
result)
(define (vqrdmulh_n_s16  a b )
(define %6 (extract  15 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %14))
 (define %16 (bvmul  %15  %7))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulh_n_s32  a b )
(define %6 (extract  31 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %14))
 (define %16 (bvmul  %15  %7))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrdmulh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulh_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrdmulhh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulhq_n_s16  a b )
(define %6 (extract  15 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %14))
 (define %16 (bvmul  %15  %7))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulhq_n_s32  a b )
(define %6 (extract  31 0 b))
(define %7 (sign-extend  %6 (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 a))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %14))
 (define %16 (bvmul  %15  %7))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrdmulhq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  16))
 (define %10 (*  e0  16))
 (define %12 (+  %10  15))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 32768 192)))
 (define %22 (bvashr  %17  (bv 16 192)))
 (define %23 (bvssat %22 192 16 ))
 %23
)
)
)
result)
(define (vqrdmulhq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrdmulhs_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %9 (*  e0  32))
 (define %10 (*  e0  32))
 (define %12 (+  %10  31))
 (define %13 (extract  %12 %9 b))
 (define %14 (sign-extend  %13 (bitvector 192)))
 (define %15 (bvmul  (bv 2 192)  %8))
 (define %16 (bvmul  %15  %14))
 (define %17 (bvadd  %16  (bv 2147483648 192)))
 (define %22 (bvashr  %17  (bv 32 192)))
 (define %23 (bvssat %22 192 32 ))
 %23
)
)
)
result)
(define (vqrshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 16 ))
 %33
)
)
)
result)
(define (vqrshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 32 ))
 %33
)
)
)
result)
(define (vqrshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 64 ))
 %33
)
)
)
result)
(define (vqrshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 8 ))
 %33
)
)
)
result)
(define (vqrshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 16 ))
 %33
)
)
)
result)
(define (vqrshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 32 ))
 %33
)
)
)
result)
(define (vqrshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 64 ))
 %33
)
)
)
result)
(define (vqrshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 8 ))
 %33
)
)
)
result)
(define (vqrshlb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 8 ))
 %33
)
)
)
result)
(define (vqrshlb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 8 ))
 %33
)
)
)
result)
(define (vqrshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 64 ))
 %33
)
)
)
result)
(define (vqrshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 64 ))
 %33
)
)
)
result)
(define (vqrshlh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 16 ))
 %33
)
)
)
result)
(define (vqrshlh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 16 ))
 %33
)
)
)
result)
(define (vqrshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 16 ))
 %33
)
)
)
result)
(define (vqrshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 32 ))
 %33
)
)
)
result)
(define (vqrshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 64 ))
 %33
)
)
)
result)
(define (vqrshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 8 ))
 %33
)
)
)
result)
(define (vqrshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 16 ))
 %33
)
)
)
result)
(define (vqrshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 32 ))
 %33
)
)
)
result)
(define (vqrshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 64 ))
 %33
)
)
)
result)
(define (vqrshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 8 ))
 %33
)
)
)
result)
(define (vqrshls_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvssat %28 192 32 ))
 %33
)
)
)
result)
(define (vqrshls_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %33 (bvusat %28 192 32 ))
 %33
)
)
)
result)
(define (vqrshrn_high_n_s16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 8 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrn_high_n_s32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 16 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrn_high_n_s64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 32 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrn_high_n_u16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrn_high_n_u32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrn_high_n_u64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrn_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 8 ))
 %27
)
)
)
result)
(define (vqrshrn_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 16 ))
 %27
)
)
)
result)
(define (vqrshrn_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 32 ))
 %27
)
)
)
result)
(define (vqrshrn_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
result)
(define (vqrshrn_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
result)
(define (vqrshrn_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
result)
(define (vqrshrnd_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 32 ))
 %27
)
)
)
result)
(define (vqrshrnd_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
result)
(define (vqrshrnh_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 8 ))
 %27
)
)
)
result)
(define (vqrshrnh_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
result)
(define (vqrshrns_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvssat %22 192 16 ))
 %27
)
)
)
result)
(define (vqrshrns_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
result)
(define (vqrshrun_high_n_s16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrun_high_n_s32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrun_high_n_s64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
(define %28 (concat result r))
%28)
(define (vqrshrun_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
result)
(define (vqrshrun_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
result)
(define (vqrshrun_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
result)
(define (vqrshrund_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 32 ))
 %27
)
)
)
result)
(define (vqrshrunh_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 8 ))
 %27
)
)
)
result)
(define (vqrshruns_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (sign-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvashr  %21  %1))
 (define %27 (bvusat %22 192 16 ))
 %27
)
)
)
result)
(define (vqshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 16 ))
 %25
)
)
)
result)
(define (vqshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 32 ))
 %25
)
)
)
result)
(define (vqshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 64 ))
 %25
)
)
)
result)
(define (vqshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 8 ))
 %25
)
)
)
result)
(define (vqshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 16 ))
 %25
)
)
)
result)
(define (vqshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 32 ))
 %25
)
)
)
result)
(define (vqshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 64 ))
 %25
)
)
)
result)
(define (vqshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 8 ))
 %25
)
)
)
result)
(define (vqshlb_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvssat %14 192 8 ))
 %19
)
)
)
result)
(define (vqshlb_n_u8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 a))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvlshr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 8 ))
 %19
)
)
)
result)
(define (vqshlb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 8 ))
 %25
)
)
)
result)
(define (vqshlb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 8 ))
 %25
)
)
)
result)
(define (vqshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 64 ))
 %25
)
)
)
result)
(define (vqshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 64 ))
 %25
)
)
)
result)
(define (vqshlh_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvssat %14 192 16 ))
 %19
)
)
)
result)
(define (vqshlh_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvlshr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 16 ))
 %19
)
)
)
result)
(define (vqshlh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 16 ))
 %25
)
)
)
result)
(define (vqshlh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 16 ))
 %25
)
)
)
result)
(define (vqshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 16 ))
 %25
)
)
)
result)
(define (vqshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 32 ))
 %25
)
)
)
result)
(define (vqshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 64 ))
 %25
)
)
)
result)
(define (vqshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 8 ))
 %25
)
)
)
result)
(define (vqshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 16 ))
 %25
)
)
)
result)
(define (vqshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 32 ))
 %25
)
)
)
result)
(define (vqshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 64 ))
 %25
)
)
)
result)
(define (vqshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 8 ))
 %25
)
)
)
result)
(define (vqshls_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvssat %14 192 32 ))
 %19
)
)
)
result)
(define (vqshls_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvlshr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 32 ))
 %19
)
)
)
result)
(define (vqshls_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvssat %20 192 32 ))
 %25
)
)
)
result)
(define (vqshls_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %25 (bvusat %20 192 32 ))
 %25
)
)
)
result)
(define (vqshlu_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 16 ))
 %19
)
)
)
result)
(define (vqshlu_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 32 ))
 %19
)
)
)
result)
(define (vqshlu_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 64 ))
 %19
)
)
)
result)
(define (vqshlu_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 8 ))
 %19
)
)
)
result)
(define (vqshlub_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 8 ))
 %19
)
)
)
result)
(define (vqshlud_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 64 ))
 %19
)
)
)
result)
(define (vqshluh_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 16 ))
 %19
)
)
)
result)
(define (vqshluq_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 16 ))
 %19
)
)
)
result)
(define (vqshluq_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 32 ))
 %19
)
)
)
result)
(define (vqshluq_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 64 ))
 %19
)
)
)
result)
(define (vqshluq_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 8 ))
 %19
)
)
)
result)
(define (vqshlus_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 a))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvsgt  %1  (bv 0 192)))
 (define %11 (bvshl  %8  %1))
 (define %12 (bvsub  (bv 0 192)  %1))
 (define %13 (bvashr  %8  %12))
 (define %14 (if (equal? %10 #t) %11 %13))
 (define %19 (bvusat %14 192 32 ))
 %19
)
)
)
result)
(define (vqshrn_high_n_s16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 8 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrn_high_n_s32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 16 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrn_high_n_s64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 32 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrn_high_n_u16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 8 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrn_high_n_u32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 16 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrn_high_n_u64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 32 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrn_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 8 ))
 %20
)
)
)
result)
(define (vqshrn_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 16 ))
 %20
)
)
)
result)
(define (vqshrn_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 32 ))
 %20
)
)
)
result)
(define (vqshrn_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 8 ))
 %20
)
)
)
result)
(define (vqshrn_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 16 ))
 %20
)
)
)
result)
(define (vqshrn_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 32 ))
 %20
)
)
)
result)
(define (vqshrnd_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 32 ))
 %20
)
)
)
result)
(define (vqshrnd_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 32 ))
 %20
)
)
)
result)
(define (vqshrnh_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 8 ))
 %20
)
)
)
result)
(define (vqshrnh_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 8 ))
 %20
)
)
)
result)
(define (vqshrns_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvssat %15 192 16 ))
 %20
)
)
)
result)
(define (vqshrns_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %20 (bvusat %15 192 16 ))
 %20
)
)
)
result)
(define (vqshrun_high_n_s16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 8 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrun_high_n_s32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 16 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrun_high_n_s64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 32 ))
 %20
)
)
)
(define %21 (concat result r))
%21)
(define (vqshrun_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 8 ))
 %20
)
)
)
result)
(define (vqshrun_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 16 ))
 %20
)
)
)
result)
(define (vqshrun_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 32 ))
 %20
)
)
)
result)
(define (vqshrund_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 32 ))
 %20
)
)
)
result)
(define (vqshrunh_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 8 ))
 %20
)
)
)
result)
(define (vqshruns_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %15 (bvashr  %13  %1))
 (define %20 (bvusat %15 192 16 ))
 %20
)
)
)
result)
(define (vqsub_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsub_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsub_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsub_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsub_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsub_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsub_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsub_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsubq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 16 ))
 %18
)
)
)
result)
(define (vqsubq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsubq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  64))
 (define %8 (*  e0  64))
 (define %10 (+  %8  63))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 64 ))
 %18
)
)
)
result)
(define (vqsubq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 8 ))
 %18
)
)
)
result)
(define (vqsubs_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvssat %13 192 32 ))
 %18
)
)
)
result)
(define (vqsubs_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (bvsub  %6  %12))
 (define %18 (bvusat %13 192 32 ))
 %18
)
)
)
result)
(define (vraddhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vraddhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vraddhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vraddhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vraddhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vraddhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vraddhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
result)
(define (vraddhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
result)
(define (vraddhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
result)
(define (vraddhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
result)
(define (vraddhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
result)
(define (vraddhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvadd  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
result)
(define (vrhadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vrhadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrhadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vrhadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (sign-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  16 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  32 1 %18))
 %19
)
)
)
result)
(define (vrhaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (zero-extend  %5 (bitvector 192)))
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 b))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %17 (bvadd  %6  %12))
 (define %18 (bvadd  %17  (bv 1 192)))
 (define %19 (extract  8 1 %18))
 %19
)
)
)
result)
(define (vrshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  15 0 %28))
 %34
)
)
)
result)
(define (vrshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  31 0 %28))
 %34
)
)
)
result)
(define (vrshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  63 0 %28))
 %34
)
)
)
result)
(define (vrshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  7 0 %28))
 %34
)
)
)
result)
(define (vrshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  15 0 %28))
 %34
)
)
)
result)
(define (vrshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  31 0 %28))
 %34
)
)
)
result)
(define (vrshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  63 0 %28))
 %34
)
)
)
result)
(define (vrshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  7 0 %28))
 %34
)
)
)
result)
(define (vrshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  63 0 %28))
 %34
)
)
)
result)
(define (vrshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  63 0 %28))
 %34
)
)
)
result)
(define (vrshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  15 0 %28))
 %34
)
)
)
result)
(define (vrshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  31 0 %28))
 %34
)
)
)
result)
(define (vrshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  63 0 %28))
 %34
)
)
)
result)
(define (vrshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvashr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  7 0 %28))
 %34
)
)
)
result)
(define (vrshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  15 0 %28))
 %34
)
)
)
result)
(define (vrshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  31 0 %28))
 %34
)
)
)
result)
(define (vrshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  63 0 %28))
 %34
)
)
)
result)
(define (vrshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (bvneg  %7))
 (define %9 (bvsub  %8  (bv 1 192)))
 (define %11 (bvsgt  %9  (bv 0 192)))
 (define %12 (bvshl  (bv 1 192)  %9))
 (define %13 (bvsub  (bv 0 192)  %9))
 (define %14 (bvlshr  (bv 1 192)  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 a))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvadd  %21  %15))
 (define %24 (bvsgt  %7  (bv 0 192)))
 (define %25 (bvshl  %22  %7))
 (define %26 (bvsub  (bv 0 192)  %7))
 (define %27 (bvlshr  %22  %26))
 (define %28 (if (equal? %24 #t) %25 %27))
 (define %34 (extract  7 0 %28))
 %34
)
)
)
result)
(define (vrshr_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  16))
 (define %24 (*  e0  16))
 (define %26 (+  %24  15))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  15 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshr_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  32))
 (define %24 (*  e0  32))
 (define %26 (+  %24  31))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  31 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshr_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %11 (*  e0  64))
 (define %12 (*  e0  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  64))
 (define %24 (*  e0  64))
 (define %26 (+  %24  63))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  63 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshr_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  8))
 (define %24 (*  e0  8))
 (define %26 (+  %24  7))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  7 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshr_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  16))
 (define %24 (*  e0  16))
 (define %26 (+  %24  15))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  15 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshr_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  32))
 (define %24 (*  e0  32))
 (define %26 (+  %24  31))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  31 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshr_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %11 (*  e0  64))
 (define %12 (*  e0  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  64))
 (define %24 (*  e0  64))
 (define %26 (+  %24  63))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  63 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshr_n_u8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  8))
 (define %24 (*  e0  8))
 (define %26 (+  %24  7))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  7 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrd_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %11 (*  e0  64))
 (define %12 (*  e0  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  64))
 (define %24 (*  e0  64))
 (define %26 (+  %24  63))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  63 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrd_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %11 (*  e0  64))
 (define %12 (*  e0  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  64))
 (define %24 (*  e0  64))
 (define %26 (+  %24  63))
 (define %27 (extract  %26 %23 (bv 0 64)))
 (define %29 (extract  63 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrn_high_n_s16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
(define %29 (concat result r))
%29)
(define (vrshrn_high_n_s32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
(define %29 (concat result r))
%29)
(define (vrshrn_high_n_s64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
(define %29 (concat result r))
%29)
(define (vrshrn_high_n_u16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
(define %29 (concat result r))
%29)
(define (vrshrn_high_n_u32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
(define %29 (concat result r))
%29)
(define (vrshrn_high_n_u64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
(define %29 (concat result r))
%29)
(define (vrshrn_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vrshrn_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vrshrn_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vrshrn_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %12 (*  e0  16))
 (define %14 (*  e0  16))
 (define %17 (+  %14  15))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  7 0 %22))
 %28
)
)
)
result)
(define (vrshrn_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %12 (*  e0  32))
 (define %14 (*  e0  32))
 (define %17 (+  %14  31))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  15 0 %22))
 %28
)
)
)
result)
(define (vrshrn_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %3 (bvsub  %1  (bv 1 192)))
(define %5 (bvsgt  %3  (bv 0 192)))
(define %6 (bvshl  (bv 1 192)  %3))
(define %7 (bvsub  (bv 0 192)  %3))
(define %8 (bvlshr  (bv 1 192)  %7))
(define %9 (if (equal? %5 #t) %6 %8))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %12 (*  e0  64))
 (define %14 (*  e0  64))
 (define %17 (+  %14  63))
 (define %19 (extract  %17 %12 a))
 (define %20 (zero-extend  %19 (bitvector 192)))
 (define %21 (bvadd  %20  %9))
 (define %22 (bvlshr  %21  %1))
 (define %28 (extract  31 0 %22))
 %28
)
)
)
result)
(define (vrshrq_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  16))
 (define %24 (*  e0  16))
 (define %26 (+  %24  15))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  15 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrq_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  32))
 (define %24 (*  e0  32))
 (define %26 (+  %24  31))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  31 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrq_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  64))
 (define %12 (*  e0  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  64))
 (define %24 (*  e0  64))
 (define %26 (+  %24  63))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  63 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrq_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 a))
 (define %16 (sign-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvashr  %17  %1))
 (define %23 (*  e0  8))
 (define %24 (*  e0  8))
 (define %26 (+  %24  7))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  7 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrq_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %11 (*  e0  16))
 (define %12 (*  e0  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  16))
 (define %24 (*  e0  16))
 (define %26 (+  %24  15))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  15 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrq_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %11 (*  e0  32))
 (define %12 (*  e0  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  32))
 (define %24 (*  e0  32))
 (define %26 (+  %24  31))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  31 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrq_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %11 (*  e0  64))
 (define %12 (*  e0  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  64))
 (define %24 (*  e0  64))
 (define %26 (+  %24  63))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  63 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrshrq_n_u8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %11 (*  e0  8))
 (define %12 (*  e0  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %11 a))
 (define %16 (zero-extend  %15 (bitvector 192)))
 (define %17 (bvadd  %16  %8))
 (define %18 (bvlshr  %17  %1))
 (define %23 (*  e0  8))
 (define %24 (*  e0  8))
 (define %26 (+  %24  7))
 (define %27 (extract  %26 %23 (bv 0 128)))
 (define %29 (extract  7 0 %18))
 (define %30 (bvadd  %27  %29))
 %30
)
)
)
result)
(define (vrsra_n_s16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  15 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsra_n_s32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  31 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsra_n_s64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %10 (*  e0  64))
 (define %11 (*  e0  64))
 (define %13 (+  %11  63))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  64))
 (define %23 (*  e0  64))
 (define %25 (+  %23  63))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  63 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsra_n_s8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  7 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsra_n_u16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  15 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsra_n_u32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  31 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsra_n_u64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %10 (*  e0  64))
 (define %11 (*  e0  64))
 (define %13 (+  %11  63))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  64))
 (define %23 (*  e0  64))
 (define %25 (+  %23  63))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  63 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsra_n_u8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  7 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsrad_n_s64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %10 (*  e0  64))
 (define %11 (*  e0  64))
 (define %13 (+  %11  63))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  64))
 (define %23 (*  e0  64))
 (define %25 (+  %23  63))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  63 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsrad_n_u64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %10 (*  e0  64))
 (define %11 (*  e0  64))
 (define %13 (+  %11  63))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  64))
 (define %23 (*  e0  64))
 (define %25 (+  %23  63))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  63 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_s16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  15 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_s32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  31 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_s64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %11 (*  e0  64))
 (define %13 (+  %11  63))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  64))
 (define %23 (*  e0  64))
 (define %25 (+  %23  63))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  63 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_s8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 b))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvashr  %16  %1))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  7 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_u16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %10 (*  e0  16))
 (define %11 (*  e0  16))
 (define %13 (+  %11  15))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  16))
 (define %23 (*  e0  16))
 (define %25 (+  %23  15))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  15 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_u32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %10 (*  e0  32))
 (define %11 (*  e0  32))
 (define %13 (+  %11  31))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  32))
 (define %23 (*  e0  32))
 (define %25 (+  %23  31))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  31 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_u64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %10 (*  e0  64))
 (define %11 (*  e0  64))
 (define %13 (+  %11  63))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  64))
 (define %23 (*  e0  64))
 (define %25 (+  %23  63))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  63 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsraq_n_u8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define %2 (bvsub  %1  (bv 1 192)))
(define %4 (bvsgt  %2  (bv 0 192)))
(define %5 (bvshl  (bv 1 192)  %2))
(define %6 (bvsub  (bv 0 192)  %2))
(define %7 (bvlshr  (bv 1 192)  %6))
(define %8 (if (equal? %4 #t) %5 %7))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %10 (*  e0  8))
 (define %11 (*  e0  8))
 (define %13 (+  %11  7))
 (define %14 (extract  %13 %10 b))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (bvadd  %15  %8))
 (define %17 (bvlshr  %16  %1))
 (define %22 (*  e0  8))
 (define %23 (*  e0  8))
 (define %25 (+  %23  7))
 (define %26 (extract  %25 %22 a))
 (define %28 (extract  7 0 %17))
 (define %29 (bvadd  %26  %28))
 %29
)
)
)
result)
(define (vrsubhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vrsubhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vrsubhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vrsubhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vrsubhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vrsubhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
(define %35 (concat result r))
%35)
(define (vrsubhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
result)
(define (vrsubhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
result)
(define (vrsubhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
result)
(define (vrsubhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %9 (*  e0  16))
 (define %11 (*  e0  16))
 (define %14 (+  %11  15))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  16))
 (define %20 (*  e0  16))
 (define %23 (+  %20  15))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 128 16)))
 (define %34 (extract  15 8 %27))
 %34
)
)
)
result)
(define (vrsubhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %9 (*  e0  32))
 (define %11 (*  e0  32))
 (define %14 (+  %11  31))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  32))
 (define %20 (*  e0  32))
 (define %23 (+  %20  31))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 32768 32)))
 (define %34 (extract  31 16 %27))
 %34
)
)
)
result)
(define (vrsubhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %9 (*  e0  64))
 (define %11 (*  e0  64))
 (define %14 (+  %11  63))
 (define %16 (extract  %14 %9 a))
 (define %18 (*  e0  64))
 (define %20 (*  e0  64))
 (define %23 (+  %20  63))
 (define %25 (extract  %23 %18 b))
 (define %26 (bvsub  %16  %25))
 (define %27 (bvadd  %26  (bv 2147483648 64)))
 (define %34 (extract  63 32 %27))
 %34
)
)
)
result)
(define (vshl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  15 0 %20))
 %26
)
)
)
result)
(define (vshl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  31 0 %20))
 %26
)
)
)
result)
(define (vshl_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  63 0 %20))
 %26
)
)
)
result)
(define (vshl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  7 0 %20))
 %26
)
)
)
result)
(define (vshl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  15 0 %20))
 %26
)
)
)
result)
(define (vshl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  31 0 %20))
 %26
)
)
)
result)
(define (vshl_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  63 0 %20))
 %26
)
)
)
result)
(define (vshl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  7 0 %20))
 %26
)
)
)
result)
(define (vshld_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  63 0 %20))
 %26
)
)
)
result)
(define (vshld_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  63 0 %20))
 %26
)
)
)
result)
(define (vshll_high_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %4 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %4))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsgt  %1  (bv 0 192)))
 (define %15 (bvshl  %12  %1))
 (define %16 (bvsub  (bv 0 192)  %1))
 (define %17 (bvashr  %12  %16))
 (define %18 (if (equal? %14 #t) %15 %17))
 (define %29 (extract  31 0 %18))
 %29
)
)
)
result)
(define (vshll_high_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %4 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %4))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsgt  %1  (bv 0 192)))
 (define %15 (bvshl  %12  %1))
 (define %16 (bvsub  (bv 0 192)  %1))
 (define %17 (bvashr  %12  %16))
 (define %18 (if (equal? %14 #t) %15 %17))
 (define %29 (extract  63 0 %18))
 %29
)
)
)
result)
(define (vshll_high_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %4 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %4))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %14 (bvsgt  %1  (bv 0 192)))
 (define %15 (bvshl  %12  %1))
 (define %16 (bvsub  (bv 0 192)  %1))
 (define %17 (bvashr  %12  %16))
 (define %18 (if (equal? %14 #t) %15 %17))
 (define %29 (extract  15 0 %18))
 %29
)
)
)
result)
(define (vshll_high_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %4 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  16))
 (define %8 (*  e0  16))
 (define %10 (+  %8  15))
 (define %11 (extract  %10 %7 %4))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsgt  %1  (bv 0 192)))
 (define %15 (bvshl  %12  %1))
 (define %16 (bvsub  (bv 0 192)  %1))
 (define %17 (bvlshr  %12  %16))
 (define %18 (if (equal? %14 #t) %15 %17))
 (define %29 (extract  31 0 %18))
 %29
)
)
)
result)
(define (vshll_high_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %4 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  32))
 (define %8 (*  e0  32))
 (define %10 (+  %8  31))
 (define %11 (extract  %10 %7 %4))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsgt  %1  (bv 0 192)))
 (define %15 (bvshl  %12  %1))
 (define %16 (bvsub  (bv 0 192)  %1))
 (define %17 (bvlshr  %12  %16))
 (define %18 (if (equal? %14 #t) %15 %17))
 (define %29 (extract  63 0 %18))
 %29
)
)
)
result)
(define (vshll_high_n_u8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define %4 (extract  127 64 a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  8))
 (define %8 (*  e0  8))
 (define %10 (+  %8  7))
 (define %11 (extract  %10 %7 %4))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %14 (bvsgt  %1  (bv 0 192)))
 (define %15 (bvshl  %12  %1))
 (define %16 (bvsub  (bv 0 192)  %1))
 (define %17 (bvlshr  %12  %16))
 (define %18 (if (equal? %14 #t) %15 %17))
 (define %29 (extract  15 0 %18))
 %29
)
)
)
result)
(define (vshll_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvsgt  %1  (bv 0 192)))
 (define %12 (bvshl  %9  %1))
 (define %13 (bvsub  (bv 0 192)  %1))
 (define %14 (bvashr  %9  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %26 (extract  31 0 %15))
 %26
)
)
)
result)
(define (vshll_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvsgt  %1  (bv 0 192)))
 (define %12 (bvshl  %9  %1))
 (define %13 (bvsub  (bv 0 192)  %1))
 (define %14 (bvashr  %9  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %26 (extract  63 0 %15))
 %26
)
)
)
result)
(define (vshll_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvsgt  %1  (bv 0 192)))
 (define %12 (bvshl  %9  %1))
 (define %13 (bvsub  (bv 0 192)  %1))
 (define %14 (bvashr  %9  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %26 (extract  15 0 %15))
 %26
)
)
)
result)
(define (vshll_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvsgt  %1  (bv 0 192)))
 (define %12 (bvshl  %9  %1))
 (define %13 (bvsub  (bv 0 192)  %1))
 (define %14 (bvlshr  %9  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %26 (extract  31 0 %15))
 %26
)
)
)
result)
(define (vshll_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvsgt  %1  (bv 0 192)))
 (define %12 (bvshl  %9  %1))
 (define %13 (bvsub  (bv 0 192)  %1))
 (define %14 (bvlshr  %9  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %26 (extract  63 0 %15))
 %26
)
)
)
result)
(define (vshll_n_u8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvsgt  %1  (bv 0 192)))
 (define %12 (bvshl  %9  %1))
 (define %13 (bvsub  (bv 0 192)  %1))
 (define %14 (bvlshr  %9  %13))
 (define %15 (if (equal? %11 #t) %12 %14))
 (define %26 (extract  15 0 %15))
 %26
)
)
)
result)
(define (vshlq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  15 0 %20))
 %26
)
)
)
result)
(define (vshlq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  31 0 %20))
 %26
)
)
)
result)
(define (vshlq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  63 0 %20))
 %26
)
)
)
result)
(define (vshlq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvashr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  7 0 %20))
 %26
)
)
)
result)
(define (vshlq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  15 0 %20))
 %26
)
)
)
result)
(define (vshlq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  31 0 %20))
 %26
)
)
)
result)
(define (vshlq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  64))
 (define %3 (*  e0  64))
 (define %5 (+  %3  63))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  63 0 %20))
 %26
)
)
)
result)
(define (vshlq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 b))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %16 (bvsgt  %7  (bv 0 192)))
 (define %17 (bvshl  %13  %7))
 (define %18 (bvsub  (bv 0 192)  %7))
 (define %19 (bvlshr  %13  %18))
 (define %20 (if (equal? %16 #t) %17 %19))
 (define %26 (extract  7 0 %20))
 %26
)
)
)
result)
(define (vshr_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  15 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshr_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  31 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshr_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  63 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshr_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  7 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshr_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  15 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshr_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  31 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshr_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  63 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshr_n_u8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  7 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrd_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  63 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrd_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 (bv 0 64)))
 (define %22 (extract  63 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrn_high_n_s16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  7 0 %15))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vshrn_high_n_s32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  15 0 %15))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vshrn_high_n_s64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  31 0 %15))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vshrn_high_n_u16  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  7 0 %15))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vshrn_high_n_u32  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  15 0 %15))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vshrn_high_n_u64  r a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  31 0 %15))
 %21
)
)
)
(define %22 (concat result r))
%22)
(define (vshrn_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  7 0 %15))
 %21
)
)
)
result)
(define (vshrn_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  15 0 %15))
 %21
)
)
)
result)
(define (vshrn_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  31 0 %15))
 %21
)
)
)
result)
(define (vshrn_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %5 (*  e0  16))
 (define %7 (*  e0  16))
 (define %10 (+  %7  15))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  7 0 %15))
 %21
)
)
)
result)
(define (vshrn_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %5 (*  e0  32))
 (define %7 (*  e0  32))
 (define %10 (+  %7  31))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  15 0 %15))
 %21
)
)
)
result)
(define (vshrn_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %5 (*  e0  64))
 (define %7 (*  e0  64))
 (define %10 (+  %7  63))
 (define %12 (extract  %10 %5 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %15 (bvlshr  %13  %1))
 (define %21 (extract  31 0 %15))
 %21
)
)
)
result)
(define (vshrq_n_s16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  15 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrq_n_s32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  31 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrq_n_s64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  63 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrq_n_s8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 a))
 (define %9 (sign-extend  %8 (bitvector 192)))
 (define %11 (bvashr  %9  %1))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  7 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrq_n_u16  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %5 (*  e0  16))
 (define %7 (+  %5  15))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  15 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrq_n_u32  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %5 (*  e0  32))
 (define %7 (+  %5  31))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  31 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrq_n_u64  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %5 (*  e0  64))
 (define %7 (+  %5  63))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  64))
 (define %17 (*  e0  64))
 (define %19 (+  %17  63))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  63 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vshrq_n_u8  a n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %4 (*  e0  8))
 (define %5 (*  e0  8))
 (define %7 (+  %5  7))
 (define %8 (extract  %7 %4 a))
 (define %9 (zero-extend  %8 (bitvector 192)))
 (define %11 (bvlshr  %9  %1))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 (bv 0 128)))
 (define %22 (extract  7 0 %11))
 (define %23 (bvadd  %20  %22))
 %23
)
)
)
result)
(define (vsqadd_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 16 ))
 %19
)
)
)
result)
(define (vsqadd_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 32 ))
 %19
)
)
)
result)
(define (vsqadd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 64 ))
 %19
)
)
)
result)
(define (vsqadd_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 8 ))
 %19
)
)
)
result)
(define (vsqaddb_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 8 ))
 %19
)
)
)
result)
(define (vsqaddd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 64 ))
 %19
)
)
)
result)
(define (vsqaddh_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 16 ))
 %19
)
)
)
result)
(define (vsqaddq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 16 ))
 %19
)
)
)
result)
(define (vsqaddq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 32 ))
 %19
)
)
)
result)
(define (vsqaddq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 64 ))
 %19
)
)
)
result)
(define (vsqaddq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 8 ))
 %19
)
)
)
result)
(define (vsqadds_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %7 (sign-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvusat %18 192 32 ))
 %19
)
)
)
result)
(define (vsra_n_s16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  15 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsra_n_s32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  31 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsra_n_s64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  63 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsra_n_s8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  7 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsra_n_u16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  15 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsra_n_u32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  31 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsra_n_u64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  63 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsra_n_u8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  7 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsrad_n_s64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  63 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsrad_n_u64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  63 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_s16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  15 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_s32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  31 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_s64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  63 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_s8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 b))
 (define %8 (sign-extend  %7 (bitvector 192)))
 (define %10 (bvashr  %8  %1))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  7 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_u16  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %3 (*  e0  16))
 (define %4 (*  e0  16))
 (define %6 (+  %4  15))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  16))
 (define %16 (*  e0  16))
 (define %18 (+  %16  15))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  15 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_u32  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %3 (*  e0  32))
 (define %4 (*  e0  32))
 (define %6 (+  %4  31))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  32))
 (define %16 (*  e0  32))
 (define %18 (+  %16  31))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  31 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_u64  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %3 (*  e0  64))
 (define %4 (*  e0  64))
 (define %6 (+  %4  63))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  64))
 (define %16 (*  e0  64))
 (define %18 (+  %16  63))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  63 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsraq_n_u8  a b n )
(define %1 (zero-extend  n (bitvector 192)))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %3 (*  e0  8))
 (define %4 (*  e0  8))
 (define %6 (+  %4  7))
 (define %7 (extract  %6 %3 b))
 (define %8 (zero-extend  %7 (bitvector 192)))
 (define %10 (bvlshr  %8  %1))
 (define %15 (*  e0  8))
 (define %16 (*  e0  8))
 (define %18 (+  %16  7))
 (define %19 (extract  %18 %15 a))
 (define %21 (extract  7 0 %10))
 (define %22 (bvadd  %19  %21))
 %22
)
)
)
result)
(define (vsub_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsub_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubhn_high_s16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_s32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_s64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_u16  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_u32  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_high_u64  r a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
(define %33 (concat result r))
%33)
(define (vsubhn_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
result)
(define (vsubhn_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
result)
(define (vsubhn_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
result)
(define (vsubhn_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  16))
 (define %18 (*  e0  16))
 (define %21 (+  %18  15))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  15 8 %24))
 %32
)
)
)
result)
(define (vsubhn_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  32))
 (define %18 (*  e0  32))
 (define %21 (+  %18  31))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  31 16 %24))
 %32
)
)
)
result)
(define (vsubhn_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %16 (*  e0  64))
 (define %18 (*  e0  64))
 (define %21 (+  %18  63))
 (define %23 (extract  %21 %16 b))
 (define %24 (bvsub  %14  %23))
 (define %32 (extract  63 32 %24))
 %32
)
)
)
result)
(define (vsubl_high_s16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_s32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_s8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (sign-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_u16  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  16))
 (define %15 (*  e0  16))
 (define %17 (+  %15  15))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  31 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_u32  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  32))
 (define %15 (*  e0  32))
 (define %17 (+  %15  31))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  63 0 %20))
 %31
)
)
)
result)
(define (vsubl_high_u8  a b )
(define %2 (extract  127 64 a))
(define %5 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 %2))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (*  e0  8))
 (define %15 (*  e0  8))
 (define %17 (+  %15  7))
 (define %18 (extract  %17 %14 %5))
 (define %19 (zero-extend  %18 (bitvector 192)))
 (define %20 (bvsub  %13  %19))
 (define %31 (extract  15 0 %20))
 %31
)
)
)
result)
(define (vsubl_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %25 (extract  31 0 %14))
 %25
)
)
)
result)
(define (vsubl_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %25 (extract  63 0 %14))
 %25
)
)
)
result)
(define (vsubl_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (sign-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %25 (extract  15 0 %14))
 %25
)
)
)
result)
(define (vsubl_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %2 (*  e0  16))
 (define %3 (*  e0  16))
 (define %5 (+  %3  15))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %25 (extract  31 0 %14))
 %25
)
)
)
result)
(define (vsubl_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %2 (*  e0  32))
 (define %3 (*  e0  32))
 (define %5 (+  %3  31))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %25 (extract  63 0 %14))
 %25
)
)
)
result)
(define (vsubl_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %2 (*  e0  8))
 (define %3 (*  e0  8))
 (define %5 (+  %3  7))
 (define %6 (extract  %5 %2 a))
 (define %7 (zero-extend  %6 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 b))
 (define %13 (zero-extend  %12 (bitvector 192)))
 (define %14 (bvsub  %7  %13))
 (define %25 (extract  15 0 %14))
 %25
)
)
)
result)
(define (vsubq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %15 (bvsub  %5  %10))
 %15
)
)
)
result)
(define (vsubw_high_s16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %3))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvsub  %15  %21))
 (define %33 (extract  31 0 %22))
 %33
)
)
)
result)
(define (vsubw_high_s32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %3))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvsub  %15  %21))
 (define %33 (extract  63 0 %22))
 %33
)
)
)
result)
(define (vsubw_high_s8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %15 (sign-extend  %14 (bitvector 192)))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 %3))
 (define %21 (sign-extend  %20 (bitvector 192)))
 (define %22 (bvsub  %15  %21))
 (define %33 (extract  15 0 %22))
 %33
)
)
)
result)
(define (vsubw_high_u16  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  e0  32))
 (define %9 (*  e0  32))
 (define %12 (+  %9  31))
 (define %14 (extract  %12 %7 a))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  16))
 (define %17 (*  e0  16))
 (define %19 (+  %17  15))
 (define %20 (extract  %19 %16 %3))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvsub  %15  %21))
 (define %33 (extract  31 0 %22))
 %33
)
)
)
result)
(define (vsubw_high_u32  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  e0  64))
 (define %9 (*  e0  64))
 (define %12 (+  %9  63))
 (define %14 (extract  %12 %7 a))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  32))
 (define %17 (*  e0  32))
 (define %19 (+  %17  31))
 (define %20 (extract  %19 %16 %3))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvsub  %15  %21))
 (define %33 (extract  63 0 %22))
 %33
)
)
)
result)
(define (vsubw_high_u8  a b )
(define %3 (extract  127 64 b))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  e0  16))
 (define %9 (*  e0  16))
 (define %12 (+  %9  15))
 (define %14 (extract  %12 %7 a))
 (define %15 (zero-extend  %14 (bitvector 192)))
 (define %16 (*  e0  8))
 (define %17 (*  e0  8))
 (define %19 (+  %17  7))
 (define %20 (extract  %19 %16 %3))
 (define %21 (zero-extend  %20 (bitvector 192)))
 (define %22 (bvsub  %15  %21))
 (define %33 (extract  15 0 %22))
 %33
)
)
)
result)
(define (vsubw_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 b))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %30 (extract  31 0 %19))
 %30
)
)
)
result)
(define (vsubw_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 b))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %30 (extract  63 0 %19))
 %30
)
)
)
result)
(define (vsubw_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %12 (sign-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 b))
 (define %18 (sign-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %30 (extract  15 0 %19))
 %30
)
)
)
result)
(define (vsubw_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %4 (*  e0  32))
 (define %6 (*  e0  32))
 (define %9 (+  %6  31))
 (define %11 (extract  %9 %4 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  16))
 (define %14 (*  e0  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %13 b))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %30 (extract  31 0 %19))
 %30
)
)
)
result)
(define (vsubw_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %4 (*  e0  64))
 (define %6 (*  e0  64))
 (define %9 (+  %6  63))
 (define %11 (extract  %9 %4 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  32))
 (define %14 (*  e0  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %13 b))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %30 (extract  63 0 %19))
 %30
)
)
)
result)
(define (vsubw_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %4 (*  e0  16))
 (define %6 (*  e0  16))
 (define %9 (+  %6  15))
 (define %11 (extract  %9 %4 a))
 (define %12 (zero-extend  %11 (bitvector 192)))
 (define %13 (*  e0  8))
 (define %14 (*  e0  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %13 b))
 (define %18 (zero-extend  %17 (bitvector 192)))
 (define %19 (bvsub  %12  %18))
 (define %30 (extract  15 0 %19))
 %30
)
)
)
result)
(define (vtrn1_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  16))
 (define %12 (*  2  p0))
 (define %14 (*  %12  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  16))
 (define %29 (*  2  p0))
 (define %31 (*  %29  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  32))
 (define %12 (*  2  p0))
 (define %14 (*  %12  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  32))
 (define %29 (*  2  p0))
 (define %31 (*  %29  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  8))
 (define %12 (*  2  p0))
 (define %14 (*  %12  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  8))
 (define %29 (*  2  p0))
 (define %31 (*  %29  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  16))
 (define %12 (*  2  p0))
 (define %14 (*  %12  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  16))
 (define %29 (*  2  p0))
 (define %31 (*  %29  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  32))
 (define %12 (*  2  p0))
 (define %14 (*  %12  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  32))
 (define %29 (*  2  p0))
 (define %31 (*  %29  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  8))
 (define %12 (*  2  p0))
 (define %14 (*  %12  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  8))
 (define %29 (*  2  p0))
 (define %31 (*  %29  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  16))
 (define %12 (*  2  p0))
 (define %14 (*  %12  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  16))
 (define %29 (*  2  p0))
 (define %31 (*  %29  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  32))
 (define %12 (*  2  p0))
 (define %14 (*  %12  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  32))
 (define %29 (*  2  p0))
 (define %31 (*  %29  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  64))
 (define %12 (*  2  p0))
 (define %14 (*  %12  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  64))
 (define %29 (*  2  p0))
 (define %31 (*  %29  64))
 (define %33 (+  %31  63))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  8))
 (define %12 (*  2  p0))
 (define %14 (*  %12  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  8))
 (define %29 (*  2  p0))
 (define %31 (*  %29  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  16))
 (define %12 (*  2  p0))
 (define %14 (*  %12  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  16))
 (define %29 (*  2  p0))
 (define %31 (*  %29  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  32))
 (define %12 (*  2  p0))
 (define %14 (*  %12  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  32))
 (define %29 (*  2  p0))
 (define %31 (*  %29  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  64))
 (define %12 (*  2  p0))
 (define %14 (*  %12  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  64))
 (define %29 (*  2  p0))
 (define %31 (*  %29  64))
 (define %33 (+  %31  63))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn1q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %11 (*  %9  8))
 (define %12 (*  2  p0))
 (define %14 (*  %12  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %28 (*  %26  8))
 (define %29 (*  2  p0))
 (define %31 (*  %29  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  64))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  64))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  64))
 (define %33 (+  %31  63))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  16))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  16))
 (define %16 (+  %14  15))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  16))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  16))
 (define %33 (+  %31  15))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  32))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  32))
 (define %16 (+  %14  31))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  32))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  32))
 (define %33 (+  %31  31))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  64))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  64))
 (define %16 (+  %14  63))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  64))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  64))
 (define %33 (+  %31  63))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtrn2q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %9 (*  2  p0))
 (define %10 (+  %9  1))
 (define %11 (*  %10  8))
 (define %12 (*  2  p0))
 (define %13 (+  %12  1))
 (define %14 (*  %13  8))
 (define %16 (+  %14  7))
 (define %17 (extract  %16 %11 a))
 (define %26 (*  2  p0))
 (define %27 (+  %26  1))
 (define %28 (*  %27  8))
 (define %29 (*  2  p0))
 (define %30 (+  %29  1))
 (define %31 (*  %30  8))
 (define %33 (+  %31  7))
 (define %34 (extract  %33 %28 b))
(concat %34 %17)
)
)
)
result)
(define (vtst_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtst_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtst_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtst_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vtst_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtst_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtst_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtst_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vtstd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtstq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtstq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vtstq_u16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  16))
 (define %7 (*  e0  16))
 (define %9 (+  %7  15))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 65535 16) (bv 0 16)))
 %20
)
)
)
result)
(define (vtstq_u32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (*  e0  32))
 (define %9 (+  %7  31))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 4294967295 32) (bv 0 32)))
 %20
)
)
)
result)
(define (vtstq_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (*  e0  64))
 (define %9 (+  %7  63))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 18446744073709551615 64) (bv 0 64)))
 %20
)
)
)
result)
(define (vtstq_u8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (*  e0  8))
 (define %9 (+  %7  7))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvand  %5  %10))
 (define %12 (bvzero  %11))
 (define %13 (not  %12))
 (define %20 (if (equal? %13 #t) (bv 255 8) (bv 0 8)))
 %20
)
)
)
result)
(define (vuqadd_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 16 ))
 %19
)
)
)
result)
(define (vuqadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 32 ))
 %19
)
)
)
result)
(define (vuqadd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 64 ))
 %19
)
)
)
result)
(define (vuqadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 8 ))
 %19
)
)
)
result)
(define (vuqaddb_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 8 ))
 %19
)
)
)
result)
(define (vuqaddd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 64 ))
 %19
)
)
)
result)
(define (vuqaddh_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 16 ))
 %19
)
)
)
result)
(define (vuqaddq_s16  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  16))
 (define %2 (*  e0  16))
 (define %4 (+  %2  15))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  16))
 (define %9 (*  e0  16))
 (define %11 (+  %9  15))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 16 ))
 %19
)
)
)
result)
(define (vuqaddq_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 32 ))
 %19
)
)
)
result)
(define (vuqaddq_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  64))
 (define %2 (*  e0  64))
 (define %4 (+  %2  63))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  64))
 (define %9 (*  e0  64))
 (define %11 (+  %9  63))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 64 ))
 %19
)
)
)
result)
(define (vuqaddq_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %1 (*  e0  8))
 (define %2 (*  e0  8))
 (define %4 (+  %2  7))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  8))
 (define %9 (*  e0  8))
 (define %11 (+  %9  7))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 8 ))
 %19
)
)
)
result)
(define (vuqadds_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  32))
 (define %2 (*  e0  32))
 (define %4 (+  %2  31))
 (define %5 (extract  %4 %1 b))
 (define %7 (zero-extend  %5 (bitvector 192)))
 (define %8 (*  e0  32))
 (define %9 (*  e0  32))
 (define %11 (+  %9  31))
 (define %12 (extract  %11 %8 a))
 (define %13 (sign-extend  %12 (bitvector 192)))
 (define %18 (bvadd  %7  %13))
 (define %19 (bvssat %18 192 32 ))
 %19
)
)
)
result)
(define (vuzp1_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  16))
 (define %10 (*  2  e0))
 (define %12 (*  %10  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  32))
 (define %10 (*  2  e0))
 (define %12 (*  %10  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  8))
 (define %10 (*  2  e0))
 (define %12 (*  %10  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  16))
 (define %10 (*  2  e0))
 (define %12 (*  %10  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  32))
 (define %10 (*  2  e0))
 (define %12 (*  %10  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  8))
 (define %10 (*  2  e0))
 (define %12 (*  %10  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  16))
 (define %10 (*  2  e0))
 (define %12 (*  %10  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  32))
 (define %10 (*  2  e0))
 (define %12 (*  %10  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  64))
 (define %10 (*  2  e0))
 (define %12 (*  %10  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  8))
 (define %10 (*  2  e0))
 (define %12 (*  %10  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  16))
 (define %10 (*  2  e0))
 (define %12 (*  %10  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  32))
 (define %10 (*  2  e0))
 (define %12 (*  %10  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  64))
 (define %10 (*  2  e0))
 (define %12 (*  %10  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp1q_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %9 (*  %7  8))
 (define %10 (*  2  e0))
 (define %12 (*  %10  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  64))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_s8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u16  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  16))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  16))
 (define %14 (+  %12  15))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u32  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 4 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  32))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  32))
 (define %14 (+  %12  31))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u64  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  64))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  64))
 (define %14 (+  %12  63))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vuzp2q_u8  a b )
(define %1 (concat b a))
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 16 1))])
 (define %7 (*  2  e0))
 (define %8 (+  %7  1))
 (define %9 (*  %8  8))
 (define %10 (*  2  e0))
 (define %11 (+  %10  1))
 (define %12 (*  %11  8))
 (define %14 (+  %12  7))
 (define %15 (extract  %14 %9 %1))
 %15
)
)
)
result)
(define (vzip1_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  64))
 (define %12 (+  0  p0))
 (define %13 (*  %12  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  64))
 (define %27 (+  0  p0))
 (define %28 (*  %27  64))
 (define %30 (+  %28  63))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  16))
 (define %12 (+  0  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  16))
 (define %27 (+  0  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  32))
 (define %12 (+  0  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  32))
 (define %27 (+  0  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  64))
 (define %12 (+  0  p0))
 (define %13 (*  %12  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  64))
 (define %27 (+  0  p0))
 (define %28 (*  %27  64))
 (define %30 (+  %28  63))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip1q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  0  p0))
 (define %11 (*  %10  8))
 (define %12 (+  0  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  0  p0))
 (define %26 (*  %25  8))
 (define %27 (+  0  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  16))
 (define %12 (+  2  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  16))
 (define %27 (+  2  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  32))
 (define %12 (+  1  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  32))
 (define %27 (+  1  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  8))
 (define %12 (+  4  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  8))
 (define %27 (+  4  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  16))
 (define %12 (+  2  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  16))
 (define %27 (+  2  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  32))
 (define %12 (+  1  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  32))
 (define %27 (+  1  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  8))
 (define %12 (+  4  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  8))
 (define %27 (+  4  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  16))
 (define %12 (+  4  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  16))
 (define %27 (+  4  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  32))
 (define %12 (+  2  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  32))
 (define %27 (+  2  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  64))
 (define %12 (+  1  p0))
 (define %13 (*  %12  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  64))
 (define %27 (+  1  p0))
 (define %28 (*  %27  64))
 (define %30 (+  %28  63))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_s8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  8  p0))
 (define %11 (*  %10  8))
 (define %12 (+  8  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  8  p0))
 (define %26 (*  %25  8))
 (define %27 (+  8  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u16  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 4 1))])
 (define %10 (+  4  p0))
 (define %11 (*  %10  16))
 (define %12 (+  4  p0))
 (define %13 (*  %12  16))
 (define %15 (+  %13  15))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  4  p0))
 (define %26 (*  %25  16))
 (define %27 (+  4  p0))
 (define %28 (*  %27  16))
 (define %30 (+  %28  15))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u32  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 2 1))])
 (define %10 (+  2  p0))
 (define %11 (*  %10  32))
 (define %12 (+  2  p0))
 (define %13 (*  %12  32))
 (define %15 (+  %13  31))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  2  p0))
 (define %26 (*  %25  32))
 (define %27 (+  2  p0))
 (define %28 (*  %27  32))
 (define %30 (+  %28  31))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u64  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 1 1))])
 (define %10 (+  1  p0))
 (define %11 (*  %10  64))
 (define %12 (+  1  p0))
 (define %13 (*  %12  64))
 (define %15 (+  %13  63))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  1  p0))
 (define %26 (*  %25  64))
 (define %27 (+  1  p0))
 (define %28 (*  %27  64))
 (define %30 (+  %28  63))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(define (vzip2q_u8  a b )
(define result
(apply
concat
(for/list ([p0 (reverse (range 0 8 1))])
 (define %10 (+  8  p0))
 (define %11 (*  %10  8))
 (define %12 (+  8  p0))
 (define %13 (*  %12  8))
 (define %15 (+  %13  7))
 (define %16 (extract  %15 %11 a))
 (define %25 (+  8  p0))
 (define %26 (*  %25  8))
 (define %27 (+  8  p0))
 (define %28 (*  %27  8))
 (define %30 (+  %28  7))
 (define %31 (extract  %30 %26 b))
(concat %31 %16)
)
)
)
result)
(provide (all-defined-out))