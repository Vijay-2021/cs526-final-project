#lang rosette
(define (vadd_s8  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 8 1))])
 (define %1 (*  e0  8))
 (define %2 (+  e0  1))
 (define %3 (*  %2  8))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  8))
 (define %7 (+  e0  1))
 (define %8 (*  %7  8))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvadd  %5  %10))
 %11
)
)
)
result)
(define a0 (bv #x5569f8d5ec443c2e 64))
(define b0 (bv #xeba915ac58826fdd 64))
(assert (eq? (vadd_s8 a0 b0) (bv #x40120d8144c6ab0b 64)))
(define a1 (bv #xb8d13500897671c1 64))
(define b1 (bv #x9a79f5b94e02eef6 64))
(assert (eq? (vadd_s8 a1 b1) (bv #x524a2ab9d7785fb7 64)))
(define a2 (bv #xf1b231f34f4e9413 64))
(define b2 (bv #xa1691e06b037df20 64))
(assert (eq? (vadd_s8 a2 b2) (bv #x921b4ff9ff857333 64)))
(define a3 (bv #xd255588183941ab1 64))
(define b3 (bv #x2a328bd5bd7087b4 64))
(assert (eq? (vadd_s8 a3 b3) (bv #xfc87e3564004a165 64)))
(define a4 (bv #x5f79ed7b9242c4f7 64))
(define b4 (bv #x46382f40f9fff968 64))
(assert (eq? (vadd_s8 a4 b4) (bv #xa5b11cbb8b41bd5f 64)))
(define a5 (bv #xbff7d020dc7c5187 64))
(define b5 (bv #x036bd1099e746b7c 64))
(assert (eq? (vadd_s8 a5 b5) (bv #xc262a1297af0bc03 64)))
(define a6 (bv #xf10a82a3a81a3832 64))
(define b6 (bv #x6c3ca616a75e3bf5 64))
(assert (eq? (vadd_s8 a6 b6) (bv #x5d4628b94f787327 64)))
(define a7 (bv #x8439a62f9305063c 64))
(define b7 (bv #x80fd5091b1be1f6a 64))
(assert (eq? (vadd_s8 a7 b7) (bv #x0436f6c044c325a6 64)))
(define a8 (bv #x96c9590bc74b740a 64))
(define b8 (bv #x01ccc90d9e5ba884 64))
(assert (eq? (vadd_s8 a8 b8) (bv #x9795221865a61c8e 64)))
(define a9 (bv #xf2c50ec435a58254 64))
(define b9 (bv #xd8ae4e775b08d7d6 64))
(assert (eq? (vadd_s8 a9 b9) (bv #xca735c3b90ad592a 64)))
