#lang rosette
(define (vadd_s32  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 2 1))])
 (define %1 (*  e0  32))
 (define %2 (+  e0  1))
 (define %3 (*  %2  32))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  32))
 (define %7 (+  e0  1))
 (define %8 (*  %7  32))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvadd  %5  %10))
 %11
)
)
)
result)
(define a0 (bv #xebed8ece88db5583 64))
(define b0 (bv #x98e62dfdb6b4b0bc 64))
(assert (eq? (vadd_s32 a0 b0) (bv #x84d3bccb3f90063f 64)))
(define a1 (bv #x3db4470e3138dee1 64))
(define b1 (bv #xafff7493db1a5dae 64))
(assert (eq? (vadd_s32 a1 b1) (bv #xedb3bba10c533c8f 64)))
(define a2 (bv #xcfbbb311da419e46 64))
(define b2 (bv #xa75f108d9d988078 64))
(assert (eq? (vadd_s32 a2 b2) (bv #x771ac39e77da1ebe 64)))
(define a3 (bv #xa0d4dd814d229e42 64))
(define b3 (bv #x230fbf5756844ed6 64))
(assert (eq? (vadd_s32 a3 b3) (bv #xc3e49cd8a3a6ed18 64)))
(define a4 (bv #x6d6b4557bf02fa29 64))
(define b4 (bv #x9942eebbf70765f1 64))
(assert (eq? (vadd_s32 a4 b4) (bv #x06ae3412b60a601a 64)))
(define a5 (bv #xe8e623ba1c17cb10 64))
(define b5 (bv #xf43682f390414d67 64))
(assert (eq? (vadd_s32 a5 b5) (bv #xdd1ca6adac591877 64)))
(define a6 (bv #x726ef3b0a172834e 64))
(define b6 (bv #x6bb968606a82ffea 64))
(assert (eq? (vadd_s32 a6 b6) (bv #xde285c100bf58338 64)))
(define a7 (bv #xfd7e808d717aefd0 64))
(define b7 (bv #xbd7add82b9ab5110 64))
(assert (eq? (vadd_s32 a7 b7) (bv #xbaf95e0f2b2640e0 64)))
(define a8 (bv #x95d912e43f67312b 64))
(define b8 (bv #x2e80b93a27a9c806 64))
(assert (eq? (vadd_s32 a8 b8) (bv #xc459cc1e6710f931 64)))
(define a9 (bv #xfda1d6ad9bf673d4 64))
(define b9 (bv #x3fec9e74288ba151 64))
(assert (eq? (vadd_s32 a9 b9) (bv #x3d8e7521c4821525 64)))
