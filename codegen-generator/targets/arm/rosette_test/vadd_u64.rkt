#lang rosette
(define (vadd_u64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvadd  %5  %10))
 %11
)
)
)
result)
(define a0 (bv #x09266c56c9c31755 64))
(define b0 (bv #x225c6e6a975150fd 64))
(assert (eq? (vadd_u64 a0 b0) (bv #x2b82dac161146852 64)))
(define a1 (bv #x72bd9fdaa9f35a3e 64))
(define b1 (bv #x24c05dc74e837782 64))
(assert (eq? (vadd_u64 a1 b1) (bv #x977dfda1f876d1c0 64)))
(define a2 (bv #xeae03ba38ffebde6 64))
(define b2 (bv #xbf434e843dfd52fe 64))
(assert (eq? (vadd_u64 a2 b2) (bv #xaa238a27cdfc10e4 64)))
(define a3 (bv #x6a9a58120aa52910 64))
(define b3 (bv #x59bdcd173c5d1654 64))
(assert (eq? (vadd_u64 a3 b3) (bv #xc458252947023f64 64)))
(define a4 (bv #x0136240bf46992ba 64))
(define b4 (bv #x5024378bb51cef50 64))
(assert (eq? (vadd_u64 a4 b4) (bv #x515a5b97a986820a 64)))
(define a5 (bv #x55f4ad0f49760b05 64))
(define b5 (bv #x624dfec55c733f18 64))
(assert (eq? (vadd_u64 a5 b5) (bv #xb842abd4a5e94a1d 64)))
(define a6 (bv #xbb522145e3aecdbb 64))
(define b6 (bv #x0e597a4943bea005 64))
(assert (eq? (vadd_u64 a6 b6) (bv #xc9ab9b8f276d6dc0 64)))
(define a7 (bv #xf2885c4542a5f2df 64))
(define b7 (bv #x07b7dca4d1d76305 64))
(assert (eq? (vadd_u64 a7 b7) (bv #xfa4038ea147d55e4 64)))
(define a8 (bv #x8cda9b9624a6a9a5 64))
(define b8 (bv #x101efd5493a1dfe9 64))
(assert (eq? (vadd_u64 a8 b8) (bv #x9cf998eab848898e 64)))
(define a9 (bv #xebd331f8f841bbfb 64))
(define b9 (bv #x81c186dbea99cb53 64))
(assert (eq? (vadd_u64 a9 b9) (bv #x6d94b8d4e2db874e 64)))
