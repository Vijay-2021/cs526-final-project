#lang rosette
(define (vadd_s64  a b )
(define result
(apply
concat
(for/list ([e0 (reverse (range 0 1 1))])
 (define %1 (*  e0  64))
 (define %2 (+  e0  1))
 (define %3 (*  %2  64))
 (define %4 (-  %3  1))
 (define %5 (extract  %4 %1 a))
 (define %6 (*  e0  64))
 (define %7 (+  e0  1))
 (define %8 (*  %7  64))
 (define %9 (-  %8  1))
 (define %10 (extract  %9 %6 b))
 (define %11 (bvadd  %5  %10))
 %11
)
)
)
result)
(define a0 (bv #xf15d67521f6e099b 64))
(define b0 (bv #xec977f51b475d5f4 64))
(assert (eq? (vadd_s64 a0 b0) (bv #xddf4e6a3d3e3df8f 64)))
(define a1 (bv #x4d0355748911d7f4 64))
(define b1 (bv #x1ca53ecdb8479da7 64))
(assert (eq? (vadd_s64 a1 b1) (bv #x69a894424159759b 64)))
(define a2 (bv #x0519915d24655fea 64))
(define b2 (bv #x23a537157200dd05 64))
(assert (eq? (vadd_s64 a2 b2) (bv #x28bec87296663cef 64)))
(define a3 (bv #x6cf06484de70e93c 64))
(define b3 (bv #x2b1f257430168f1a 64))
(assert (eq? (vadd_s64 a3 b3) (bv #x980f89f90e877856 64)))
(define a4 (bv #x1e9f91f6b25027e1 64))
(define b4 (bv #x3750192f985f1d54 64))
(assert (eq? (vadd_s64 a4 b4) (bv #x55efab264aaf4535 64)))
(define a5 (bv #x6d01dc351007ac8a 64))
(define b5 (bv #xe860ec6cf27a8036 64))
(assert (eq? (vadd_s64 a5 b5) (bv #x5562c8a202822cc0 64)))
(define a6 (bv #x9e75e72ddd34f8b3 64))
(define b6 (bv #xcc1e60cb7a65be8b 64))
(assert (eq? (vadd_s64 a6 b6) (bv #x6a9447f9579ab73e 64)))
(define a7 (bv #xb65a9ec6de172728 64))
(define b7 (bv #x7dd316fee1760b48 64))
(assert (eq? (vadd_s64 a7 b7) (bv #x342db5c5bf8d3270 64)))
(define a8 (bv #x69b12ac2478d3644 64))
(define b8 (bv #x3edd8068a8d4dc4f 64))
(assert (eq? (vadd_s64 a8 b8) (bv #xa88eab2af0621293 64)))
(define a9 (bv #x058b0f3e4ad26971 64))
(define b9 (bv #x8377d3a1a919661b 64))
(assert (eq? (vadd_s64 a9 b9) (bv #x8902e2dff3ebcf8c 64)))
