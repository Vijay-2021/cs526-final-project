Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NEG
    WHILE
    XOR

Grammar

Rule 0     S' -> stmts
Rule 1     stmts -> stmt
Rule 2     stmts -> stmt SEMICOLON
Rule 3     stmts -> stmts stmt
Rule 4     stmts -> stmts stmt SEMICOLON
Rule 5     stmt -> BREAK
Rule 6     stmt -> expr
Rule 7     stmt -> TYPE ID UPDATE expr
Rule 8     expr -> expr UPDATE expr
Rule 9     stmt -> expr COMMA expr UPDATE expr
Rule 10    expr -> expr PLUS_EQUAL expr
Rule 11    expr -> expr MINUS_EQUAL expr
Rule 12    expr -> expr OR_EQUAL expr
Rule 13    expr -> expr XOR_EQUAL expr
Rule 14    expr -> expr AND_EQUAL expr
Rule 15    expr_empty -> expr
Rule 16    expr_empty -> <empty>
Rule 17    stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
Rule 18    stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
Rule 19    stmt -> IF LPAREN expr RPAREN stmt
Rule 20    stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
Rule 21    stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
Rule 22    expr -> ID LPAREN args RPAREN
Rule 23    expr -> MODULE DOT ID LPAREN args RPAREN
Rule 24    expr -> ID LPAREN RPAREN
Rule 25    expr -> expr DOT ID
Rule 26    args -> expr
Rule 27    args -> args COMMA expr
Rule 28    expr -> expr LBRACE expr RBRACE
Rule 29    expr -> expr COLON expr
Rule 30    expr -> expr LBRACE expr COLON expr RBRACE
Rule 31    expr -> expr QUEST expr COLON expr
Rule 32    expr -> expr INC
Rule 33    expr -> expr DEC
Rule 34    expr -> NOT expr
Rule 35    expr -> MINUS expr
Rule 36    expr -> BITWISE_NOT expr
Rule 37    expr -> expr BITWISE_AND expr
Rule 38    expr -> expr BITWISE_OR expr
Rule 39    expr -> expr BITWISE_XOR expr
Rule 40    expr -> expr OP expr
Rule 41    expr -> expr PLUS expr
Rule 42    expr -> expr MINUS expr
Rule 43    expr -> expr TIMES expr
Rule 44    expr -> expr DIV expr
Rule 45    expr -> expr MOD expr
Rule 46    expr -> expr AND expr
Rule 47    expr -> expr OR expr
Rule 48    expr -> expr LSHIFT expr
Rule 49    expr -> expr RSHIFT expr
Rule 50    expr -> expr RSHIFT_EQUAL expr
Rule 51    expr -> expr LSHIFT_EQUAL expr
Rule 52    expr -> expr LSHIFT_LOGICAL expr
Rule 53    expr -> expr RSHIFT_LOGICAL expr
Rule 54    expr -> expr GREATER expr
Rule 55    expr -> expr LESS expr
Rule 56    expr -> expr LESS_EQUAL expr
Rule 57    expr -> expr GREATER_EQUAL expr
Rule 58    expr -> expr EQUAL expr
Rule 59    expr -> expr NOT_EQUAL expr
Rule 60    expr -> LPAREN expr RPAREN
Rule 61    expr -> NOP
Rule 62    expr -> ID
Rule 63    expr -> NUMBER

Terminals, with rules where they appear

AND                  : 46
AND_EQUAL            : 14
BITWISE_AND          : 37
BITWISE_NOT          : 36
BITWISE_OR           : 38
BITWISE_XOR          : 39
BREAK                : 5
COLON                : 29 30 31
COMMA                : 9 27
COMMENT              : 
DEC                  : 33
DIV                  : 44
DOT                  : 23 25
ELSE                 : 18
EQUAL                : 58
FOR                  : 20 21
GREATER              : 54
GREATER_EQUAL        : 57
ID                   : 7 22 23 24 25 62
IF                   : 17 18 19
INC                  : 32
LBRACE               : 28 30
LBRACKET             : 17 18 18 20
LESS                 : 55
LESS_EQUAL           : 56
LPAREN               : 17 18 19 20 21 22 23 24 60
LSHIFT               : 48
LSHIFT_EQUAL         : 51
LSHIFT_LOGICAL       : 52
MINUS                : 35 42
MINUS_EQUAL          : 11
MOD                  : 45
MODULE               : 23
NEG                  : 
NOP                  : 61
NOT                  : 34
NOT_EQUAL            : 59
NUMBER               : 63
OP                   : 40
OR                   : 47
OR_EQUAL             : 12
PLUS                 : 41
PLUS_EQUAL           : 10
QUEST                : 31
RBRACE               : 28 30
RBRACKET             : 17 18 18 20
RPAREN               : 17 18 19 20 21 22 23 24 60
RSHIFT               : 49
RSHIFT_EQUAL         : 50
RSHIFT_LOGICAL       : 53
SEMICOLON            : 2 4 20 20 21 21
TIMES                : 43
TYPE                 : 7
UPDATE               : 7 8 9
WHILE                : 
XOR                  : 
XOR_EQUAL            : 13
error                : 

Nonterminals, with rules where they appear

args                 : 22 23 27
expr                 : 6 7 8 8 9 9 9 10 10 11 11 12 12 13 13 14 14 15 17 18 19 25 26 27 28 28 29 29 30 30 30 31 31 31 32 33 34 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60
expr_empty           : 20 20 20 21 21 21
stmt                 : 1 2 3 4 19 21
stmts                : 3 4 17 18 18 20 0

Parsing method: LALR

state 0

    (0) S' -> . stmts
    (1) stmts -> . stmt
    (2) stmts -> . stmt SEMICOLON
    (3) stmts -> . stmts stmt
    (4) stmts -> . stmts stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    stmts                          shift and go to state 1
    stmt                           shift and go to state 2
    expr                           shift and go to state 4

state 1

    (0) S' -> stmts .
    (3) stmts -> stmts . stmt
    (4) stmts -> stmts . stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    stmt                           shift and go to state 16
    expr                           shift and go to state 4

state 2

    (1) stmts -> stmt .
    (2) stmts -> stmt . SEMICOLON

    BREAK           reduce using rule 1 (stmts -> stmt .)
    TYPE            reduce using rule 1 (stmts -> stmt .)
    IF              reduce using rule 1 (stmts -> stmt .)
    FOR             reduce using rule 1 (stmts -> stmt .)
    ID              reduce using rule 1 (stmts -> stmt .)
    MODULE          reduce using rule 1 (stmts -> stmt .)
    NOT             reduce using rule 1 (stmts -> stmt .)
    MINUS           reduce using rule 1 (stmts -> stmt .)
    BITWISE_NOT     reduce using rule 1 (stmts -> stmt .)
    LPAREN          reduce using rule 1 (stmts -> stmt .)
    NOP             reduce using rule 1 (stmts -> stmt .)
    NUMBER          reduce using rule 1 (stmts -> stmt .)
    $end            reduce using rule 1 (stmts -> stmt .)
    RBRACKET        reduce using rule 1 (stmts -> stmt .)
    SEMICOLON       shift and go to state 17


state 3

    (5) stmt -> BREAK .

    SEMICOLON       reduce using rule 5 (stmt -> BREAK .)
    BREAK           reduce using rule 5 (stmt -> BREAK .)
    TYPE            reduce using rule 5 (stmt -> BREAK .)
    IF              reduce using rule 5 (stmt -> BREAK .)
    FOR             reduce using rule 5 (stmt -> BREAK .)
    ID              reduce using rule 5 (stmt -> BREAK .)
    MODULE          reduce using rule 5 (stmt -> BREAK .)
    NOT             reduce using rule 5 (stmt -> BREAK .)
    MINUS           reduce using rule 5 (stmt -> BREAK .)
    BITWISE_NOT     reduce using rule 5 (stmt -> BREAK .)
    LPAREN          reduce using rule 5 (stmt -> BREAK .)
    NOP             reduce using rule 5 (stmt -> BREAK .)
    NUMBER          reduce using rule 5 (stmt -> BREAK .)
    $end            reduce using rule 5 (stmt -> BREAK .)
    RBRACKET        reduce using rule 5 (stmt -> BREAK .)


state 4

    (6) stmt -> expr .
    (9) stmt -> expr . COMMA expr UPDATE expr
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for MINUS resolved as shift
    SEMICOLON       reduce using rule 6 (stmt -> expr .)
    BREAK           reduce using rule 6 (stmt -> expr .)
    TYPE            reduce using rule 6 (stmt -> expr .)
    IF              reduce using rule 6 (stmt -> expr .)
    FOR             reduce using rule 6 (stmt -> expr .)
    ID              reduce using rule 6 (stmt -> expr .)
    MODULE          reduce using rule 6 (stmt -> expr .)
    NOT             reduce using rule 6 (stmt -> expr .)
    BITWISE_NOT     reduce using rule 6 (stmt -> expr .)
    LPAREN          reduce using rule 6 (stmt -> expr .)
    NOP             reduce using rule 6 (stmt -> expr .)
    NUMBER          reduce using rule 6 (stmt -> expr .)
    $end            reduce using rule 6 (stmt -> expr .)
    RBRACKET        reduce using rule 6 (stmt -> expr .)
    COMMA           shift and go to state 18
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! MINUS           [ reduce using rule 6 (stmt -> expr .) ]


state 5

    (7) stmt -> TYPE . ID UPDATE expr

    ID              shift and go to state 54


state 6

    (22) expr -> ID . LPAREN args RPAREN
    (24) expr -> ID . LPAREN RPAREN
    (62) expr -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 55
    COMMA           reduce using rule 62 (expr -> ID .)
    UPDATE          reduce using rule 62 (expr -> ID .)
    PLUS_EQUAL      reduce using rule 62 (expr -> ID .)
    MINUS_EQUAL     reduce using rule 62 (expr -> ID .)
    OR_EQUAL        reduce using rule 62 (expr -> ID .)
    XOR_EQUAL       reduce using rule 62 (expr -> ID .)
    AND_EQUAL       reduce using rule 62 (expr -> ID .)
    DOT             reduce using rule 62 (expr -> ID .)
    LBRACE          reduce using rule 62 (expr -> ID .)
    COLON           reduce using rule 62 (expr -> ID .)
    QUEST           reduce using rule 62 (expr -> ID .)
    INC             reduce using rule 62 (expr -> ID .)
    DEC             reduce using rule 62 (expr -> ID .)
    BITWISE_AND     reduce using rule 62 (expr -> ID .)
    BITWISE_OR      reduce using rule 62 (expr -> ID .)
    BITWISE_XOR     reduce using rule 62 (expr -> ID .)
    OP              reduce using rule 62 (expr -> ID .)
    PLUS            reduce using rule 62 (expr -> ID .)
    MINUS           reduce using rule 62 (expr -> ID .)
    TIMES           reduce using rule 62 (expr -> ID .)
    DIV             reduce using rule 62 (expr -> ID .)
    MOD             reduce using rule 62 (expr -> ID .)
    AND             reduce using rule 62 (expr -> ID .)
    OR              reduce using rule 62 (expr -> ID .)
    LSHIFT          reduce using rule 62 (expr -> ID .)
    RSHIFT          reduce using rule 62 (expr -> ID .)
    RSHIFT_EQUAL    reduce using rule 62 (expr -> ID .)
    LSHIFT_EQUAL    reduce using rule 62 (expr -> ID .)
    LSHIFT_LOGICAL  reduce using rule 62 (expr -> ID .)
    RSHIFT_LOGICAL  reduce using rule 62 (expr -> ID .)
    GREATER         reduce using rule 62 (expr -> ID .)
    LESS            reduce using rule 62 (expr -> ID .)
    LESS_EQUAL      reduce using rule 62 (expr -> ID .)
    GREATER_EQUAL   reduce using rule 62 (expr -> ID .)
    EQUAL           reduce using rule 62 (expr -> ID .)
    NOT_EQUAL       reduce using rule 62 (expr -> ID .)
    SEMICOLON       reduce using rule 62 (expr -> ID .)
    BREAK           reduce using rule 62 (expr -> ID .)
    TYPE            reduce using rule 62 (expr -> ID .)
    IF              reduce using rule 62 (expr -> ID .)
    FOR             reduce using rule 62 (expr -> ID .)
    ID              reduce using rule 62 (expr -> ID .)
    MODULE          reduce using rule 62 (expr -> ID .)
    NOT             reduce using rule 62 (expr -> ID .)
    BITWISE_NOT     reduce using rule 62 (expr -> ID .)
    NOP             reduce using rule 62 (expr -> ID .)
    NUMBER          reduce using rule 62 (expr -> ID .)
    $end            reduce using rule 62 (expr -> ID .)
    RPAREN          reduce using rule 62 (expr -> ID .)
    RBRACE          reduce using rule 62 (expr -> ID .)
    RBRACKET        reduce using rule 62 (expr -> ID .)

  ! LPAREN          [ reduce using rule 62 (expr -> ID .) ]


state 7

    (17) stmt -> IF . LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> IF . LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> IF . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 56


state 8

    (60) expr -> LPAREN . expr RPAREN
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 57

state 9

    (20) stmt -> FOR . LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> FOR . LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt

    LPAREN          shift and go to state 58


state 10

    (23) expr -> MODULE . DOT ID LPAREN args RPAREN

    DOT             shift and go to state 59


state 11

    (34) expr -> NOT . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 60

state 12

    (35) expr -> MINUS . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 61

state 13

    (36) expr -> BITWISE_NOT . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 62

state 14

    (61) expr -> NOP .

    COMMA           reduce using rule 61 (expr -> NOP .)
    UPDATE          reduce using rule 61 (expr -> NOP .)
    PLUS_EQUAL      reduce using rule 61 (expr -> NOP .)
    MINUS_EQUAL     reduce using rule 61 (expr -> NOP .)
    OR_EQUAL        reduce using rule 61 (expr -> NOP .)
    XOR_EQUAL       reduce using rule 61 (expr -> NOP .)
    AND_EQUAL       reduce using rule 61 (expr -> NOP .)
    DOT             reduce using rule 61 (expr -> NOP .)
    LBRACE          reduce using rule 61 (expr -> NOP .)
    COLON           reduce using rule 61 (expr -> NOP .)
    QUEST           reduce using rule 61 (expr -> NOP .)
    INC             reduce using rule 61 (expr -> NOP .)
    DEC             reduce using rule 61 (expr -> NOP .)
    BITWISE_AND     reduce using rule 61 (expr -> NOP .)
    BITWISE_OR      reduce using rule 61 (expr -> NOP .)
    BITWISE_XOR     reduce using rule 61 (expr -> NOP .)
    OP              reduce using rule 61 (expr -> NOP .)
    PLUS            reduce using rule 61 (expr -> NOP .)
    MINUS           reduce using rule 61 (expr -> NOP .)
    TIMES           reduce using rule 61 (expr -> NOP .)
    DIV             reduce using rule 61 (expr -> NOP .)
    MOD             reduce using rule 61 (expr -> NOP .)
    AND             reduce using rule 61 (expr -> NOP .)
    OR              reduce using rule 61 (expr -> NOP .)
    LSHIFT          reduce using rule 61 (expr -> NOP .)
    RSHIFT          reduce using rule 61 (expr -> NOP .)
    RSHIFT_EQUAL    reduce using rule 61 (expr -> NOP .)
    LSHIFT_EQUAL    reduce using rule 61 (expr -> NOP .)
    LSHIFT_LOGICAL  reduce using rule 61 (expr -> NOP .)
    RSHIFT_LOGICAL  reduce using rule 61 (expr -> NOP .)
    GREATER         reduce using rule 61 (expr -> NOP .)
    LESS            reduce using rule 61 (expr -> NOP .)
    LESS_EQUAL      reduce using rule 61 (expr -> NOP .)
    GREATER_EQUAL   reduce using rule 61 (expr -> NOP .)
    EQUAL           reduce using rule 61 (expr -> NOP .)
    NOT_EQUAL       reduce using rule 61 (expr -> NOP .)
    SEMICOLON       reduce using rule 61 (expr -> NOP .)
    BREAK           reduce using rule 61 (expr -> NOP .)
    TYPE            reduce using rule 61 (expr -> NOP .)
    IF              reduce using rule 61 (expr -> NOP .)
    FOR             reduce using rule 61 (expr -> NOP .)
    ID              reduce using rule 61 (expr -> NOP .)
    MODULE          reduce using rule 61 (expr -> NOP .)
    NOT             reduce using rule 61 (expr -> NOP .)
    BITWISE_NOT     reduce using rule 61 (expr -> NOP .)
    LPAREN          reduce using rule 61 (expr -> NOP .)
    NOP             reduce using rule 61 (expr -> NOP .)
    NUMBER          reduce using rule 61 (expr -> NOP .)
    $end            reduce using rule 61 (expr -> NOP .)
    RPAREN          reduce using rule 61 (expr -> NOP .)
    RBRACE          reduce using rule 61 (expr -> NOP .)
    RBRACKET        reduce using rule 61 (expr -> NOP .)


state 15

    (63) expr -> NUMBER .

    COMMA           reduce using rule 63 (expr -> NUMBER .)
    UPDATE          reduce using rule 63 (expr -> NUMBER .)
    PLUS_EQUAL      reduce using rule 63 (expr -> NUMBER .)
    MINUS_EQUAL     reduce using rule 63 (expr -> NUMBER .)
    OR_EQUAL        reduce using rule 63 (expr -> NUMBER .)
    XOR_EQUAL       reduce using rule 63 (expr -> NUMBER .)
    AND_EQUAL       reduce using rule 63 (expr -> NUMBER .)
    DOT             reduce using rule 63 (expr -> NUMBER .)
    LBRACE          reduce using rule 63 (expr -> NUMBER .)
    COLON           reduce using rule 63 (expr -> NUMBER .)
    QUEST           reduce using rule 63 (expr -> NUMBER .)
    INC             reduce using rule 63 (expr -> NUMBER .)
    DEC             reduce using rule 63 (expr -> NUMBER .)
    BITWISE_AND     reduce using rule 63 (expr -> NUMBER .)
    BITWISE_OR      reduce using rule 63 (expr -> NUMBER .)
    BITWISE_XOR     reduce using rule 63 (expr -> NUMBER .)
    OP              reduce using rule 63 (expr -> NUMBER .)
    PLUS            reduce using rule 63 (expr -> NUMBER .)
    MINUS           reduce using rule 63 (expr -> NUMBER .)
    TIMES           reduce using rule 63 (expr -> NUMBER .)
    DIV             reduce using rule 63 (expr -> NUMBER .)
    MOD             reduce using rule 63 (expr -> NUMBER .)
    AND             reduce using rule 63 (expr -> NUMBER .)
    OR              reduce using rule 63 (expr -> NUMBER .)
    LSHIFT          reduce using rule 63 (expr -> NUMBER .)
    RSHIFT          reduce using rule 63 (expr -> NUMBER .)
    RSHIFT_EQUAL    reduce using rule 63 (expr -> NUMBER .)
    LSHIFT_EQUAL    reduce using rule 63 (expr -> NUMBER .)
    LSHIFT_LOGICAL  reduce using rule 63 (expr -> NUMBER .)
    RSHIFT_LOGICAL  reduce using rule 63 (expr -> NUMBER .)
    GREATER         reduce using rule 63 (expr -> NUMBER .)
    LESS            reduce using rule 63 (expr -> NUMBER .)
    LESS_EQUAL      reduce using rule 63 (expr -> NUMBER .)
    GREATER_EQUAL   reduce using rule 63 (expr -> NUMBER .)
    EQUAL           reduce using rule 63 (expr -> NUMBER .)
    NOT_EQUAL       reduce using rule 63 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 63 (expr -> NUMBER .)
    BREAK           reduce using rule 63 (expr -> NUMBER .)
    TYPE            reduce using rule 63 (expr -> NUMBER .)
    IF              reduce using rule 63 (expr -> NUMBER .)
    FOR             reduce using rule 63 (expr -> NUMBER .)
    ID              reduce using rule 63 (expr -> NUMBER .)
    MODULE          reduce using rule 63 (expr -> NUMBER .)
    NOT             reduce using rule 63 (expr -> NUMBER .)
    BITWISE_NOT     reduce using rule 63 (expr -> NUMBER .)
    LPAREN          reduce using rule 63 (expr -> NUMBER .)
    NOP             reduce using rule 63 (expr -> NUMBER .)
    NUMBER          reduce using rule 63 (expr -> NUMBER .)
    $end            reduce using rule 63 (expr -> NUMBER .)
    RPAREN          reduce using rule 63 (expr -> NUMBER .)
    RBRACE          reduce using rule 63 (expr -> NUMBER .)
    RBRACKET        reduce using rule 63 (expr -> NUMBER .)


state 16

    (3) stmts -> stmts stmt .
    (4) stmts -> stmts stmt . SEMICOLON

    BREAK           reduce using rule 3 (stmts -> stmts stmt .)
    TYPE            reduce using rule 3 (stmts -> stmts stmt .)
    IF              reduce using rule 3 (stmts -> stmts stmt .)
    FOR             reduce using rule 3 (stmts -> stmts stmt .)
    ID              reduce using rule 3 (stmts -> stmts stmt .)
    MODULE          reduce using rule 3 (stmts -> stmts stmt .)
    NOT             reduce using rule 3 (stmts -> stmts stmt .)
    MINUS           reduce using rule 3 (stmts -> stmts stmt .)
    BITWISE_NOT     reduce using rule 3 (stmts -> stmts stmt .)
    LPAREN          reduce using rule 3 (stmts -> stmts stmt .)
    NOP             reduce using rule 3 (stmts -> stmts stmt .)
    NUMBER          reduce using rule 3 (stmts -> stmts stmt .)
    $end            reduce using rule 3 (stmts -> stmts stmt .)
    RBRACKET        reduce using rule 3 (stmts -> stmts stmt .)
    SEMICOLON       shift and go to state 63


state 17

    (2) stmts -> stmt SEMICOLON .

    BREAK           reduce using rule 2 (stmts -> stmt SEMICOLON .)
    TYPE            reduce using rule 2 (stmts -> stmt SEMICOLON .)
    IF              reduce using rule 2 (stmts -> stmt SEMICOLON .)
    FOR             reduce using rule 2 (stmts -> stmt SEMICOLON .)
    ID              reduce using rule 2 (stmts -> stmt SEMICOLON .)
    MODULE          reduce using rule 2 (stmts -> stmt SEMICOLON .)
    NOT             reduce using rule 2 (stmts -> stmt SEMICOLON .)
    MINUS           reduce using rule 2 (stmts -> stmt SEMICOLON .)
    BITWISE_NOT     reduce using rule 2 (stmts -> stmt SEMICOLON .)
    LPAREN          reduce using rule 2 (stmts -> stmt SEMICOLON .)
    NOP             reduce using rule 2 (stmts -> stmt SEMICOLON .)
    NUMBER          reduce using rule 2 (stmts -> stmt SEMICOLON .)
    $end            reduce using rule 2 (stmts -> stmt SEMICOLON .)
    RBRACKET        reduce using rule 2 (stmts -> stmt SEMICOLON .)


state 18

    (9) stmt -> expr COMMA . expr UPDATE expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 64

state 19

    (8) expr -> expr UPDATE . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 65

state 20

    (10) expr -> expr PLUS_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 66

state 21

    (11) expr -> expr MINUS_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 67

state 22

    (12) expr -> expr OR_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 68

state 23

    (13) expr -> expr XOR_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 69

state 24

    (14) expr -> expr AND_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 70

state 25

    (25) expr -> expr DOT . ID

    ID              shift and go to state 71


state 26

    (28) expr -> expr LBRACE . expr RBRACE
    (30) expr -> expr LBRACE . expr COLON expr RBRACE
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 72

state 27

    (29) expr -> expr COLON . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 73

state 28

    (31) expr -> expr QUEST . expr COLON expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 74

state 29

    (32) expr -> expr INC .

    COMMA           reduce using rule 32 (expr -> expr INC .)
    UPDATE          reduce using rule 32 (expr -> expr INC .)
    PLUS_EQUAL      reduce using rule 32 (expr -> expr INC .)
    MINUS_EQUAL     reduce using rule 32 (expr -> expr INC .)
    OR_EQUAL        reduce using rule 32 (expr -> expr INC .)
    XOR_EQUAL       reduce using rule 32 (expr -> expr INC .)
    AND_EQUAL       reduce using rule 32 (expr -> expr INC .)
    DOT             reduce using rule 32 (expr -> expr INC .)
    LBRACE          reduce using rule 32 (expr -> expr INC .)
    COLON           reduce using rule 32 (expr -> expr INC .)
    QUEST           reduce using rule 32 (expr -> expr INC .)
    INC             reduce using rule 32 (expr -> expr INC .)
    DEC             reduce using rule 32 (expr -> expr INC .)
    BITWISE_AND     reduce using rule 32 (expr -> expr INC .)
    BITWISE_OR      reduce using rule 32 (expr -> expr INC .)
    BITWISE_XOR     reduce using rule 32 (expr -> expr INC .)
    OP              reduce using rule 32 (expr -> expr INC .)
    PLUS            reduce using rule 32 (expr -> expr INC .)
    MINUS           reduce using rule 32 (expr -> expr INC .)
    TIMES           reduce using rule 32 (expr -> expr INC .)
    DIV             reduce using rule 32 (expr -> expr INC .)
    MOD             reduce using rule 32 (expr -> expr INC .)
    AND             reduce using rule 32 (expr -> expr INC .)
    OR              reduce using rule 32 (expr -> expr INC .)
    LSHIFT          reduce using rule 32 (expr -> expr INC .)
    RSHIFT          reduce using rule 32 (expr -> expr INC .)
    RSHIFT_EQUAL    reduce using rule 32 (expr -> expr INC .)
    LSHIFT_EQUAL    reduce using rule 32 (expr -> expr INC .)
    LSHIFT_LOGICAL  reduce using rule 32 (expr -> expr INC .)
    RSHIFT_LOGICAL  reduce using rule 32 (expr -> expr INC .)
    GREATER         reduce using rule 32 (expr -> expr INC .)
    LESS            reduce using rule 32 (expr -> expr INC .)
    LESS_EQUAL      reduce using rule 32 (expr -> expr INC .)
    GREATER_EQUAL   reduce using rule 32 (expr -> expr INC .)
    EQUAL           reduce using rule 32 (expr -> expr INC .)
    NOT_EQUAL       reduce using rule 32 (expr -> expr INC .)
    SEMICOLON       reduce using rule 32 (expr -> expr INC .)
    BREAK           reduce using rule 32 (expr -> expr INC .)
    TYPE            reduce using rule 32 (expr -> expr INC .)
    IF              reduce using rule 32 (expr -> expr INC .)
    FOR             reduce using rule 32 (expr -> expr INC .)
    ID              reduce using rule 32 (expr -> expr INC .)
    MODULE          reduce using rule 32 (expr -> expr INC .)
    NOT             reduce using rule 32 (expr -> expr INC .)
    BITWISE_NOT     reduce using rule 32 (expr -> expr INC .)
    LPAREN          reduce using rule 32 (expr -> expr INC .)
    NOP             reduce using rule 32 (expr -> expr INC .)
    NUMBER          reduce using rule 32 (expr -> expr INC .)
    $end            reduce using rule 32 (expr -> expr INC .)
    RPAREN          reduce using rule 32 (expr -> expr INC .)
    RBRACE          reduce using rule 32 (expr -> expr INC .)
    RBRACKET        reduce using rule 32 (expr -> expr INC .)


state 30

    (33) expr -> expr DEC .

    COMMA           reduce using rule 33 (expr -> expr DEC .)
    UPDATE          reduce using rule 33 (expr -> expr DEC .)
    PLUS_EQUAL      reduce using rule 33 (expr -> expr DEC .)
    MINUS_EQUAL     reduce using rule 33 (expr -> expr DEC .)
    OR_EQUAL        reduce using rule 33 (expr -> expr DEC .)
    XOR_EQUAL       reduce using rule 33 (expr -> expr DEC .)
    AND_EQUAL       reduce using rule 33 (expr -> expr DEC .)
    DOT             reduce using rule 33 (expr -> expr DEC .)
    LBRACE          reduce using rule 33 (expr -> expr DEC .)
    COLON           reduce using rule 33 (expr -> expr DEC .)
    QUEST           reduce using rule 33 (expr -> expr DEC .)
    INC             reduce using rule 33 (expr -> expr DEC .)
    DEC             reduce using rule 33 (expr -> expr DEC .)
    BITWISE_AND     reduce using rule 33 (expr -> expr DEC .)
    BITWISE_OR      reduce using rule 33 (expr -> expr DEC .)
    BITWISE_XOR     reduce using rule 33 (expr -> expr DEC .)
    OP              reduce using rule 33 (expr -> expr DEC .)
    PLUS            reduce using rule 33 (expr -> expr DEC .)
    MINUS           reduce using rule 33 (expr -> expr DEC .)
    TIMES           reduce using rule 33 (expr -> expr DEC .)
    DIV             reduce using rule 33 (expr -> expr DEC .)
    MOD             reduce using rule 33 (expr -> expr DEC .)
    AND             reduce using rule 33 (expr -> expr DEC .)
    OR              reduce using rule 33 (expr -> expr DEC .)
    LSHIFT          reduce using rule 33 (expr -> expr DEC .)
    RSHIFT          reduce using rule 33 (expr -> expr DEC .)
    RSHIFT_EQUAL    reduce using rule 33 (expr -> expr DEC .)
    LSHIFT_EQUAL    reduce using rule 33 (expr -> expr DEC .)
    LSHIFT_LOGICAL  reduce using rule 33 (expr -> expr DEC .)
    RSHIFT_LOGICAL  reduce using rule 33 (expr -> expr DEC .)
    GREATER         reduce using rule 33 (expr -> expr DEC .)
    LESS            reduce using rule 33 (expr -> expr DEC .)
    LESS_EQUAL      reduce using rule 33 (expr -> expr DEC .)
    GREATER_EQUAL   reduce using rule 33 (expr -> expr DEC .)
    EQUAL           reduce using rule 33 (expr -> expr DEC .)
    NOT_EQUAL       reduce using rule 33 (expr -> expr DEC .)
    SEMICOLON       reduce using rule 33 (expr -> expr DEC .)
    BREAK           reduce using rule 33 (expr -> expr DEC .)
    TYPE            reduce using rule 33 (expr -> expr DEC .)
    IF              reduce using rule 33 (expr -> expr DEC .)
    FOR             reduce using rule 33 (expr -> expr DEC .)
    ID              reduce using rule 33 (expr -> expr DEC .)
    MODULE          reduce using rule 33 (expr -> expr DEC .)
    NOT             reduce using rule 33 (expr -> expr DEC .)
    BITWISE_NOT     reduce using rule 33 (expr -> expr DEC .)
    LPAREN          reduce using rule 33 (expr -> expr DEC .)
    NOP             reduce using rule 33 (expr -> expr DEC .)
    NUMBER          reduce using rule 33 (expr -> expr DEC .)
    $end            reduce using rule 33 (expr -> expr DEC .)
    RPAREN          reduce using rule 33 (expr -> expr DEC .)
    RBRACE          reduce using rule 33 (expr -> expr DEC .)
    RBRACKET        reduce using rule 33 (expr -> expr DEC .)


state 31

    (37) expr -> expr BITWISE_AND . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 75

state 32

    (38) expr -> expr BITWISE_OR . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 76

state 33

    (39) expr -> expr BITWISE_XOR . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 77

state 34

    (40) expr -> expr OP . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 78

state 35

    (41) expr -> expr PLUS . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 79

state 36

    (42) expr -> expr MINUS . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 80

state 37

    (43) expr -> expr TIMES . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 81

state 38

    (44) expr -> expr DIV . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 82

state 39

    (45) expr -> expr MOD . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 83

state 40

    (46) expr -> expr AND . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 84

state 41

    (47) expr -> expr OR . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 85

state 42

    (48) expr -> expr LSHIFT . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 86

state 43

    (49) expr -> expr RSHIFT . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 87

state 44

    (50) expr -> expr RSHIFT_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 88

state 45

    (51) expr -> expr LSHIFT_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 89

state 46

    (52) expr -> expr LSHIFT_LOGICAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 90

state 47

    (53) expr -> expr RSHIFT_LOGICAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 91

state 48

    (54) expr -> expr GREATER . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 92

state 49

    (55) expr -> expr LESS . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 93

state 50

    (56) expr -> expr LESS_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 94

state 51

    (57) expr -> expr GREATER_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 95

state 52

    (58) expr -> expr EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 96

state 53

    (59) expr -> expr NOT_EQUAL . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 97

state 54

    (7) stmt -> TYPE ID . UPDATE expr

    UPDATE          shift and go to state 98


state 55

    (22) expr -> ID LPAREN . args RPAREN
    (24) expr -> ID LPAREN . RPAREN
    (26) args -> . expr
    (27) args -> . args COMMA expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    RPAREN          shift and go to state 100
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    args                           shift and go to state 99
    expr                           shift and go to state 101

state 56

    (17) stmt -> IF LPAREN . expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> IF LPAREN . expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> IF LPAREN . expr RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 102

state 57

    (60) expr -> LPAREN expr . RPAREN
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    RPAREN          shift and go to state 103
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 58

    (20) stmt -> FOR LPAREN . expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> FOR LPAREN . expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (15) expr_empty -> . expr
    (16) expr_empty -> .
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    SEMICOLON       reduce using rule 16 (expr_empty -> .)
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr_empty                     shift and go to state 104
    expr                           shift and go to state 105

state 59

    (23) expr -> MODULE DOT . ID LPAREN args RPAREN

    ID              shift and go to state 106


state 60

    (34) expr -> NOT expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 34 (expr -> NOT expr .)
    UPDATE          reduce using rule 34 (expr -> NOT expr .)
    PLUS_EQUAL      reduce using rule 34 (expr -> NOT expr .)
    MINUS_EQUAL     reduce using rule 34 (expr -> NOT expr .)
    OR_EQUAL        reduce using rule 34 (expr -> NOT expr .)
    XOR_EQUAL       reduce using rule 34 (expr -> NOT expr .)
    AND_EQUAL       reduce using rule 34 (expr -> NOT expr .)
    COLON           reduce using rule 34 (expr -> NOT expr .)
    QUEST           reduce using rule 34 (expr -> NOT expr .)
    INC             reduce using rule 34 (expr -> NOT expr .)
    DEC             reduce using rule 34 (expr -> NOT expr .)
    BITWISE_AND     reduce using rule 34 (expr -> NOT expr .)
    BITWISE_OR      reduce using rule 34 (expr -> NOT expr .)
    BITWISE_XOR     reduce using rule 34 (expr -> NOT expr .)
    OP              reduce using rule 34 (expr -> NOT expr .)
    PLUS            reduce using rule 34 (expr -> NOT expr .)
    MINUS           reduce using rule 34 (expr -> NOT expr .)
    TIMES           reduce using rule 34 (expr -> NOT expr .)
    DIV             reduce using rule 34 (expr -> NOT expr .)
    MOD             reduce using rule 34 (expr -> NOT expr .)
    AND             reduce using rule 34 (expr -> NOT expr .)
    OR              reduce using rule 34 (expr -> NOT expr .)
    LSHIFT          reduce using rule 34 (expr -> NOT expr .)
    RSHIFT          reduce using rule 34 (expr -> NOT expr .)
    RSHIFT_EQUAL    reduce using rule 34 (expr -> NOT expr .)
    LSHIFT_EQUAL    reduce using rule 34 (expr -> NOT expr .)
    LSHIFT_LOGICAL  reduce using rule 34 (expr -> NOT expr .)
    RSHIFT_LOGICAL  reduce using rule 34 (expr -> NOT expr .)
    GREATER         reduce using rule 34 (expr -> NOT expr .)
    LESS            reduce using rule 34 (expr -> NOT expr .)
    LESS_EQUAL      reduce using rule 34 (expr -> NOT expr .)
    GREATER_EQUAL   reduce using rule 34 (expr -> NOT expr .)
    EQUAL           reduce using rule 34 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 34 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 34 (expr -> NOT expr .)
    BREAK           reduce using rule 34 (expr -> NOT expr .)
    TYPE            reduce using rule 34 (expr -> NOT expr .)
    IF              reduce using rule 34 (expr -> NOT expr .)
    FOR             reduce using rule 34 (expr -> NOT expr .)
    ID              reduce using rule 34 (expr -> NOT expr .)
    MODULE          reduce using rule 34 (expr -> NOT expr .)
    NOT             reduce using rule 34 (expr -> NOT expr .)
    BITWISE_NOT     reduce using rule 34 (expr -> NOT expr .)
    LPAREN          reduce using rule 34 (expr -> NOT expr .)
    NOP             reduce using rule 34 (expr -> NOT expr .)
    NUMBER          reduce using rule 34 (expr -> NOT expr .)
    $end            reduce using rule 34 (expr -> NOT expr .)
    RPAREN          reduce using rule 34 (expr -> NOT expr .)
    RBRACE          reduce using rule 34 (expr -> NOT expr .)
    RBRACKET        reduce using rule 34 (expr -> NOT expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 34 (expr -> NOT expr .) ]
  ! LBRACE          [ reduce using rule 34 (expr -> NOT expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 61

    (35) expr -> MINUS expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 35 (expr -> MINUS expr .)
    UPDATE          reduce using rule 35 (expr -> MINUS expr .)
    PLUS_EQUAL      reduce using rule 35 (expr -> MINUS expr .)
    MINUS_EQUAL     reduce using rule 35 (expr -> MINUS expr .)
    OR_EQUAL        reduce using rule 35 (expr -> MINUS expr .)
    XOR_EQUAL       reduce using rule 35 (expr -> MINUS expr .)
    AND_EQUAL       reduce using rule 35 (expr -> MINUS expr .)
    COLON           reduce using rule 35 (expr -> MINUS expr .)
    QUEST           reduce using rule 35 (expr -> MINUS expr .)
    INC             reduce using rule 35 (expr -> MINUS expr .)
    DEC             reduce using rule 35 (expr -> MINUS expr .)
    BITWISE_AND     reduce using rule 35 (expr -> MINUS expr .)
    BITWISE_OR      reduce using rule 35 (expr -> MINUS expr .)
    BITWISE_XOR     reduce using rule 35 (expr -> MINUS expr .)
    OP              reduce using rule 35 (expr -> MINUS expr .)
    PLUS            reduce using rule 35 (expr -> MINUS expr .)
    MINUS           reduce using rule 35 (expr -> MINUS expr .)
    TIMES           reduce using rule 35 (expr -> MINUS expr .)
    DIV             reduce using rule 35 (expr -> MINUS expr .)
    MOD             reduce using rule 35 (expr -> MINUS expr .)
    AND             reduce using rule 35 (expr -> MINUS expr .)
    OR              reduce using rule 35 (expr -> MINUS expr .)
    LSHIFT          reduce using rule 35 (expr -> MINUS expr .)
    RSHIFT          reduce using rule 35 (expr -> MINUS expr .)
    RSHIFT_EQUAL    reduce using rule 35 (expr -> MINUS expr .)
    LSHIFT_EQUAL    reduce using rule 35 (expr -> MINUS expr .)
    LSHIFT_LOGICAL  reduce using rule 35 (expr -> MINUS expr .)
    RSHIFT_LOGICAL  reduce using rule 35 (expr -> MINUS expr .)
    GREATER         reduce using rule 35 (expr -> MINUS expr .)
    LESS            reduce using rule 35 (expr -> MINUS expr .)
    LESS_EQUAL      reduce using rule 35 (expr -> MINUS expr .)
    GREATER_EQUAL   reduce using rule 35 (expr -> MINUS expr .)
    EQUAL           reduce using rule 35 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 35 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 35 (expr -> MINUS expr .)
    BREAK           reduce using rule 35 (expr -> MINUS expr .)
    TYPE            reduce using rule 35 (expr -> MINUS expr .)
    IF              reduce using rule 35 (expr -> MINUS expr .)
    FOR             reduce using rule 35 (expr -> MINUS expr .)
    ID              reduce using rule 35 (expr -> MINUS expr .)
    MODULE          reduce using rule 35 (expr -> MINUS expr .)
    NOT             reduce using rule 35 (expr -> MINUS expr .)
    BITWISE_NOT     reduce using rule 35 (expr -> MINUS expr .)
    LPAREN          reduce using rule 35 (expr -> MINUS expr .)
    NOP             reduce using rule 35 (expr -> MINUS expr .)
    NUMBER          reduce using rule 35 (expr -> MINUS expr .)
    $end            reduce using rule 35 (expr -> MINUS expr .)
    RPAREN          reduce using rule 35 (expr -> MINUS expr .)
    RBRACE          reduce using rule 35 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 35 (expr -> MINUS expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 35 (expr -> MINUS expr .) ]
  ! LBRACE          [ reduce using rule 35 (expr -> MINUS expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 62

    (36) expr -> BITWISE_NOT expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 36 (expr -> BITWISE_NOT expr .)
    UPDATE          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    PLUS_EQUAL      reduce using rule 36 (expr -> BITWISE_NOT expr .)
    MINUS_EQUAL     reduce using rule 36 (expr -> BITWISE_NOT expr .)
    OR_EQUAL        reduce using rule 36 (expr -> BITWISE_NOT expr .)
    XOR_EQUAL       reduce using rule 36 (expr -> BITWISE_NOT expr .)
    AND_EQUAL       reduce using rule 36 (expr -> BITWISE_NOT expr .)
    COLON           reduce using rule 36 (expr -> BITWISE_NOT expr .)
    QUEST           reduce using rule 36 (expr -> BITWISE_NOT expr .)
    INC             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    DEC             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    BITWISE_AND     reduce using rule 36 (expr -> BITWISE_NOT expr .)
    BITWISE_OR      reduce using rule 36 (expr -> BITWISE_NOT expr .)
    BITWISE_XOR     reduce using rule 36 (expr -> BITWISE_NOT expr .)
    OP              reduce using rule 36 (expr -> BITWISE_NOT expr .)
    PLUS            reduce using rule 36 (expr -> BITWISE_NOT expr .)
    MINUS           reduce using rule 36 (expr -> BITWISE_NOT expr .)
    TIMES           reduce using rule 36 (expr -> BITWISE_NOT expr .)
    DIV             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    MOD             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    AND             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    OR              reduce using rule 36 (expr -> BITWISE_NOT expr .)
    LSHIFT          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    RSHIFT          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    RSHIFT_EQUAL    reduce using rule 36 (expr -> BITWISE_NOT expr .)
    LSHIFT_EQUAL    reduce using rule 36 (expr -> BITWISE_NOT expr .)
    LSHIFT_LOGICAL  reduce using rule 36 (expr -> BITWISE_NOT expr .)
    RSHIFT_LOGICAL  reduce using rule 36 (expr -> BITWISE_NOT expr .)
    GREATER         reduce using rule 36 (expr -> BITWISE_NOT expr .)
    LESS            reduce using rule 36 (expr -> BITWISE_NOT expr .)
    LESS_EQUAL      reduce using rule 36 (expr -> BITWISE_NOT expr .)
    GREATER_EQUAL   reduce using rule 36 (expr -> BITWISE_NOT expr .)
    EQUAL           reduce using rule 36 (expr -> BITWISE_NOT expr .)
    NOT_EQUAL       reduce using rule 36 (expr -> BITWISE_NOT expr .)
    SEMICOLON       reduce using rule 36 (expr -> BITWISE_NOT expr .)
    BREAK           reduce using rule 36 (expr -> BITWISE_NOT expr .)
    TYPE            reduce using rule 36 (expr -> BITWISE_NOT expr .)
    IF              reduce using rule 36 (expr -> BITWISE_NOT expr .)
    FOR             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    ID              reduce using rule 36 (expr -> BITWISE_NOT expr .)
    MODULE          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    NOT             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    BITWISE_NOT     reduce using rule 36 (expr -> BITWISE_NOT expr .)
    LPAREN          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    NOP             reduce using rule 36 (expr -> BITWISE_NOT expr .)
    NUMBER          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    $end            reduce using rule 36 (expr -> BITWISE_NOT expr .)
    RPAREN          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    RBRACE          reduce using rule 36 (expr -> BITWISE_NOT expr .)
    RBRACKET        reduce using rule 36 (expr -> BITWISE_NOT expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 36 (expr -> BITWISE_NOT expr .) ]
  ! LBRACE          [ reduce using rule 36 (expr -> BITWISE_NOT expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 63

    (4) stmts -> stmts stmt SEMICOLON .

    BREAK           reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    TYPE            reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    IF              reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    FOR             reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    ID              reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    MODULE          reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    NOT             reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    MINUS           reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    BITWISE_NOT     reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    LPAREN          reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    NOP             reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    NUMBER          reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    $end            reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)
    RBRACKET        reduce using rule 4 (stmts -> stmts stmt SEMICOLON .)


state 64

    (9) stmt -> expr COMMA expr . UPDATE expr
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    UPDATE          shift and go to state 107
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 65

    (8) expr -> expr UPDATE expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 8 (expr -> expr UPDATE expr .)
    PLUS_EQUAL      reduce using rule 8 (expr -> expr UPDATE expr .)
    MINUS_EQUAL     reduce using rule 8 (expr -> expr UPDATE expr .)
    OR_EQUAL        reduce using rule 8 (expr -> expr UPDATE expr .)
    XOR_EQUAL       reduce using rule 8 (expr -> expr UPDATE expr .)
    AND_EQUAL       reduce using rule 8 (expr -> expr UPDATE expr .)
    INC             reduce using rule 8 (expr -> expr UPDATE expr .)
    DEC             reduce using rule 8 (expr -> expr UPDATE expr .)
    OP              reduce using rule 8 (expr -> expr UPDATE expr .)
    RSHIFT_EQUAL    reduce using rule 8 (expr -> expr UPDATE expr .)
    LSHIFT_EQUAL    reduce using rule 8 (expr -> expr UPDATE expr .)
    SEMICOLON       reduce using rule 8 (expr -> expr UPDATE expr .)
    BREAK           reduce using rule 8 (expr -> expr UPDATE expr .)
    TYPE            reduce using rule 8 (expr -> expr UPDATE expr .)
    IF              reduce using rule 8 (expr -> expr UPDATE expr .)
    FOR             reduce using rule 8 (expr -> expr UPDATE expr .)
    ID              reduce using rule 8 (expr -> expr UPDATE expr .)
    MODULE          reduce using rule 8 (expr -> expr UPDATE expr .)
    NOT             reduce using rule 8 (expr -> expr UPDATE expr .)
    BITWISE_NOT     reduce using rule 8 (expr -> expr UPDATE expr .)
    LPAREN          reduce using rule 8 (expr -> expr UPDATE expr .)
    NOP             reduce using rule 8 (expr -> expr UPDATE expr .)
    NUMBER          reduce using rule 8 (expr -> expr UPDATE expr .)
    $end            reduce using rule 8 (expr -> expr UPDATE expr .)
    RPAREN          reduce using rule 8 (expr -> expr UPDATE expr .)
    RBRACE          reduce using rule 8 (expr -> expr UPDATE expr .)
    RBRACKET        reduce using rule 8 (expr -> expr UPDATE expr .)
    UPDATE          shift and go to state 19
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! DOT             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LBRACE          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! COLON           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! QUEST           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! BITWISE_AND     [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! BITWISE_OR      [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! BITWISE_XOR     [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! PLUS            [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! MINUS           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! TIMES           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! DIV             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! MOD             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! AND             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! OR              [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LSHIFT          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! RSHIFT          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! GREATER         [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LESS            [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! EQUAL           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! NOT_EQUAL       [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 66

    (10) expr -> expr PLUS_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    SEMICOLON       reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    BREAK           reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    TYPE            reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    IF              reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    FOR             reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    ID              reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    MODULE          reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    NOT             reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    BITWISE_NOT     reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    LPAREN          reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    NOP             reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    NUMBER          reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    $end            reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    RPAREN          reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    RBRACE          reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    RBRACKET        reduce using rule 10 (expr -> expr PLUS_EQUAL expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! OR_EQUAL        [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! XOR_EQUAL       [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! AND_EQUAL       [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! DOT             [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! COLON           [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! QUEST           [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! INC             [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! DEC             [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! BITWISE_AND     [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! BITWISE_OR      [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! BITWISE_XOR     [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! OP              [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! AND             [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! OR              [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! LESS            [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 10 (expr -> expr PLUS_EQUAL expr .) ]


state 67

    (11) expr -> expr MINUS_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    SEMICOLON       reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    BREAK           reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    TYPE            reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    IF              reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    FOR             reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    ID              reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    MODULE          reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    NOT             reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    BITWISE_NOT     reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    LPAREN          reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    NOP             reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    NUMBER          reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    $end            reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    RPAREN          reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    RBRACE          reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    RBRACKET        reduce using rule 11 (expr -> expr MINUS_EQUAL expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! OR_EQUAL        [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! XOR_EQUAL       [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! AND_EQUAL       [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! DOT             [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! COLON           [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! QUEST           [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! INC             [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! DEC             [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! BITWISE_AND     [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! BITWISE_OR      [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! BITWISE_XOR     [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! OP              [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! AND             [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! OR              [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! LESS            [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 11 (expr -> expr MINUS_EQUAL expr .) ]


state 68

    (12) expr -> expr OR_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    SEMICOLON       reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    BREAK           reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    TYPE            reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    IF              reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    FOR             reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    ID              reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    MODULE          reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    NOT             reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    BITWISE_NOT     reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    LPAREN          reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    NOP             reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    NUMBER          reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    $end            reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    RPAREN          reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    RBRACE          reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    RBRACKET        reduce using rule 12 (expr -> expr OR_EQUAL expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! OR_EQUAL        [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! XOR_EQUAL       [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! AND_EQUAL       [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! DOT             [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! COLON           [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! QUEST           [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! INC             [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! DEC             [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! BITWISE_AND     [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! BITWISE_OR      [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! BITWISE_XOR     [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! OP              [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! AND             [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! OR              [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! LESS            [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 12 (expr -> expr OR_EQUAL expr .) ]


state 69

    (13) expr -> expr XOR_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    SEMICOLON       reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    BREAK           reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    TYPE            reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    IF              reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    FOR             reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    ID              reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    MODULE          reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    NOT             reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    BITWISE_NOT     reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    LPAREN          reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    NOP             reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    NUMBER          reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    $end            reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    RPAREN          reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    RBRACE          reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    RBRACKET        reduce using rule 13 (expr -> expr XOR_EQUAL expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! OR_EQUAL        [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! XOR_EQUAL       [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! AND_EQUAL       [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! DOT             [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! COLON           [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! QUEST           [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! INC             [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! DEC             [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! BITWISE_AND     [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! BITWISE_OR      [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! BITWISE_XOR     [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! OP              [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! DIV             [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! MOD             [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! AND             [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! OR              [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! LESS            [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 13 (expr -> expr XOR_EQUAL expr .) ]


state 70

    (14) expr -> expr AND_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    SEMICOLON       reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    BREAK           reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    TYPE            reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    IF              reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    FOR             reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    ID              reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    MODULE          reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    NOT             reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    BITWISE_NOT     reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    LPAREN          reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    NOP             reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    NUMBER          reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    $end            reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    RPAREN          reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    RBRACE          reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    RBRACKET        reduce using rule 14 (expr -> expr AND_EQUAL expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! OR_EQUAL        [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! XOR_EQUAL       [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! AND_EQUAL       [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! DOT             [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! COLON           [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! QUEST           [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! INC             [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! DEC             [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! BITWISE_AND     [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! BITWISE_OR      [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! BITWISE_XOR     [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! OP              [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! DIV             [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! MOD             [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! AND             [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! OR              [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! LESS            [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 14 (expr -> expr AND_EQUAL expr .) ]


state 71

    (25) expr -> expr DOT ID .

    COMMA           reduce using rule 25 (expr -> expr DOT ID .)
    UPDATE          reduce using rule 25 (expr -> expr DOT ID .)
    PLUS_EQUAL      reduce using rule 25 (expr -> expr DOT ID .)
    MINUS_EQUAL     reduce using rule 25 (expr -> expr DOT ID .)
    OR_EQUAL        reduce using rule 25 (expr -> expr DOT ID .)
    XOR_EQUAL       reduce using rule 25 (expr -> expr DOT ID .)
    AND_EQUAL       reduce using rule 25 (expr -> expr DOT ID .)
    DOT             reduce using rule 25 (expr -> expr DOT ID .)
    LBRACE          reduce using rule 25 (expr -> expr DOT ID .)
    COLON           reduce using rule 25 (expr -> expr DOT ID .)
    QUEST           reduce using rule 25 (expr -> expr DOT ID .)
    INC             reduce using rule 25 (expr -> expr DOT ID .)
    DEC             reduce using rule 25 (expr -> expr DOT ID .)
    BITWISE_AND     reduce using rule 25 (expr -> expr DOT ID .)
    BITWISE_OR      reduce using rule 25 (expr -> expr DOT ID .)
    BITWISE_XOR     reduce using rule 25 (expr -> expr DOT ID .)
    OP              reduce using rule 25 (expr -> expr DOT ID .)
    PLUS            reduce using rule 25 (expr -> expr DOT ID .)
    MINUS           reduce using rule 25 (expr -> expr DOT ID .)
    TIMES           reduce using rule 25 (expr -> expr DOT ID .)
    DIV             reduce using rule 25 (expr -> expr DOT ID .)
    MOD             reduce using rule 25 (expr -> expr DOT ID .)
    AND             reduce using rule 25 (expr -> expr DOT ID .)
    OR              reduce using rule 25 (expr -> expr DOT ID .)
    LSHIFT          reduce using rule 25 (expr -> expr DOT ID .)
    RSHIFT          reduce using rule 25 (expr -> expr DOT ID .)
    RSHIFT_EQUAL    reduce using rule 25 (expr -> expr DOT ID .)
    LSHIFT_EQUAL    reduce using rule 25 (expr -> expr DOT ID .)
    LSHIFT_LOGICAL  reduce using rule 25 (expr -> expr DOT ID .)
    RSHIFT_LOGICAL  reduce using rule 25 (expr -> expr DOT ID .)
    GREATER         reduce using rule 25 (expr -> expr DOT ID .)
    LESS            reduce using rule 25 (expr -> expr DOT ID .)
    LESS_EQUAL      reduce using rule 25 (expr -> expr DOT ID .)
    GREATER_EQUAL   reduce using rule 25 (expr -> expr DOT ID .)
    EQUAL           reduce using rule 25 (expr -> expr DOT ID .)
    NOT_EQUAL       reduce using rule 25 (expr -> expr DOT ID .)
    SEMICOLON       reduce using rule 25 (expr -> expr DOT ID .)
    BREAK           reduce using rule 25 (expr -> expr DOT ID .)
    TYPE            reduce using rule 25 (expr -> expr DOT ID .)
    IF              reduce using rule 25 (expr -> expr DOT ID .)
    FOR             reduce using rule 25 (expr -> expr DOT ID .)
    ID              reduce using rule 25 (expr -> expr DOT ID .)
    MODULE          reduce using rule 25 (expr -> expr DOT ID .)
    NOT             reduce using rule 25 (expr -> expr DOT ID .)
    BITWISE_NOT     reduce using rule 25 (expr -> expr DOT ID .)
    LPAREN          reduce using rule 25 (expr -> expr DOT ID .)
    NOP             reduce using rule 25 (expr -> expr DOT ID .)
    NUMBER          reduce using rule 25 (expr -> expr DOT ID .)
    $end            reduce using rule 25 (expr -> expr DOT ID .)
    RPAREN          reduce using rule 25 (expr -> expr DOT ID .)
    RBRACE          reduce using rule 25 (expr -> expr DOT ID .)
    RBRACKET        reduce using rule 25 (expr -> expr DOT ID .)


state 72

    (28) expr -> expr LBRACE expr . RBRACE
    (30) expr -> expr LBRACE expr . COLON expr RBRACE
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    RBRACE          shift and go to state 108
    COLON           shift and go to state 109
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 73

    (29) expr -> expr COLON expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 29 (expr -> expr COLON expr .)
    UPDATE          reduce using rule 29 (expr -> expr COLON expr .)
    PLUS_EQUAL      reduce using rule 29 (expr -> expr COLON expr .)
    MINUS_EQUAL     reduce using rule 29 (expr -> expr COLON expr .)
    OR_EQUAL        reduce using rule 29 (expr -> expr COLON expr .)
    XOR_EQUAL       reduce using rule 29 (expr -> expr COLON expr .)
    AND_EQUAL       reduce using rule 29 (expr -> expr COLON expr .)
    COLON           reduce using rule 29 (expr -> expr COLON expr .)
    QUEST           reduce using rule 29 (expr -> expr COLON expr .)
    INC             reduce using rule 29 (expr -> expr COLON expr .)
    DEC             reduce using rule 29 (expr -> expr COLON expr .)
    OP              reduce using rule 29 (expr -> expr COLON expr .)
    RSHIFT_EQUAL    reduce using rule 29 (expr -> expr COLON expr .)
    LSHIFT_EQUAL    reduce using rule 29 (expr -> expr COLON expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr COLON expr .)
    BREAK           reduce using rule 29 (expr -> expr COLON expr .)
    TYPE            reduce using rule 29 (expr -> expr COLON expr .)
    IF              reduce using rule 29 (expr -> expr COLON expr .)
    FOR             reduce using rule 29 (expr -> expr COLON expr .)
    ID              reduce using rule 29 (expr -> expr COLON expr .)
    MODULE          reduce using rule 29 (expr -> expr COLON expr .)
    NOT             reduce using rule 29 (expr -> expr COLON expr .)
    BITWISE_NOT     reduce using rule 29 (expr -> expr COLON expr .)
    LPAREN          reduce using rule 29 (expr -> expr COLON expr .)
    NOP             reduce using rule 29 (expr -> expr COLON expr .)
    NUMBER          reduce using rule 29 (expr -> expr COLON expr .)
    $end            reduce using rule 29 (expr -> expr COLON expr .)
    RPAREN          reduce using rule 29 (expr -> expr COLON expr .)
    RBRACE          reduce using rule 29 (expr -> expr COLON expr .)
    RBRACKET        reduce using rule 29 (expr -> expr COLON expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! DOT             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_AND     [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_OR      [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_XOR     [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! OR              [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LSHIFT          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! RSHIFT          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! GREATER         [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LESS            [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! NOT_EQUAL       [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 74

    (31) expr -> expr QUEST expr . COLON expr
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COLON           shift and go to state 110
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 75

    (37) expr -> expr BITWISE_AND expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    UPDATE          reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    PLUS_EQUAL      reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    MINUS_EQUAL     reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    OR_EQUAL        reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    XOR_EQUAL       reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    AND_EQUAL       reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    COLON           reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    QUEST           reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    INC             reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    DEC             reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    BITWISE_AND     reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    BITWISE_OR      reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    OP              reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    RSHIFT_EQUAL    reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    LSHIFT_EQUAL    reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    BREAK           reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    TYPE            reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    IF              reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    FOR             reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    ID              reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    MODULE          reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    NOT             reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    BITWISE_NOT     reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    LPAREN          reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    NOP             reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    NUMBER          reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    $end            reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    RPAREN          reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    RBRACE          reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    RBRACKET        reduce using rule 37 (expr -> expr BITWISE_AND expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    BITWISE_XOR     shift and go to state 33
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! DOT             [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! LBRACE          [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! BITWISE_XOR     [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! PLUS            [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! DIV             [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! AND             [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! OR              [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! LSHIFT          [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! RSHIFT          [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! GREATER         [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! LESS            [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! EQUAL           [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 37 (expr -> expr BITWISE_AND expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 76

    (38) expr -> expr BITWISE_OR expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    UPDATE          reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    PLUS_EQUAL      reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    MINUS_EQUAL     reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    OR_EQUAL        reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    XOR_EQUAL       reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    AND_EQUAL       reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    COLON           reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    QUEST           reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    INC             reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    DEC             reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    BITWISE_OR      reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    OP              reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    RSHIFT_EQUAL    reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    LSHIFT_EQUAL    reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    BREAK           reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    TYPE            reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    IF              reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    FOR             reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    ID              reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    MODULE          reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    NOT             reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    BITWISE_NOT     reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    LPAREN          reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    NOP             reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    NUMBER          reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    $end            reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    RPAREN          reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    RBRACE          reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    RBRACKET        reduce using rule 38 (expr -> expr BITWISE_OR expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    BITWISE_AND     shift and go to state 31
    BITWISE_XOR     shift and go to state 33
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! DOT             [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! LBRACE          [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! BITWISE_AND     [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! BITWISE_XOR     [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! PLUS            [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! DIV             [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! AND             [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! OR              [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! LSHIFT          [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! RSHIFT          [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! GREATER         [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! LESS            [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! EQUAL           [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 38 (expr -> expr BITWISE_OR expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 77

    (39) expr -> expr BITWISE_XOR expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    UPDATE          reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    PLUS_EQUAL      reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    MINUS_EQUAL     reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    OR_EQUAL        reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    XOR_EQUAL       reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    AND_EQUAL       reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    COLON           reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    QUEST           reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    INC             reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    DEC             reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    BITWISE_AND     reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    BITWISE_OR      reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    BITWISE_XOR     reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    OP              reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    RSHIFT_EQUAL    reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    LSHIFT_EQUAL    reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    BREAK           reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    TYPE            reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    IF              reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    FOR             reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    ID              reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    MODULE          reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    NOT             reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    BITWISE_NOT     reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    LPAREN          reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    NOP             reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    NUMBER          reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    $end            reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    RPAREN          reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    RBRACE          reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    RBRACKET        reduce using rule 39 (expr -> expr BITWISE_XOR expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! DOT             [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! LBRACE          [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! PLUS            [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! DIV             [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! AND             [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! OR              [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! LSHIFT          [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! RSHIFT          [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! GREATER         [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! LESS            [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! EQUAL           [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 39 (expr -> expr BITWISE_XOR expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 78

    (40) expr -> expr OP expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 40 (expr -> expr OP expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr OP expr .)
    BREAK           reduce using rule 40 (expr -> expr OP expr .)
    TYPE            reduce using rule 40 (expr -> expr OP expr .)
    IF              reduce using rule 40 (expr -> expr OP expr .)
    FOR             reduce using rule 40 (expr -> expr OP expr .)
    ID              reduce using rule 40 (expr -> expr OP expr .)
    MODULE          reduce using rule 40 (expr -> expr OP expr .)
    NOT             reduce using rule 40 (expr -> expr OP expr .)
    BITWISE_NOT     reduce using rule 40 (expr -> expr OP expr .)
    LPAREN          reduce using rule 40 (expr -> expr OP expr .)
    NOP             reduce using rule 40 (expr -> expr OP expr .)
    NUMBER          reduce using rule 40 (expr -> expr OP expr .)
    $end            reduce using rule 40 (expr -> expr OP expr .)
    RPAREN          reduce using rule 40 (expr -> expr OP expr .)
    RBRACE          reduce using rule 40 (expr -> expr OP expr .)
    RBRACKET        reduce using rule 40 (expr -> expr OP expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! OR_EQUAL        [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! XOR_EQUAL       [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! AND_EQUAL       [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! DOT             [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! LBRACE          [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! COLON           [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! QUEST           [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! INC             [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! DEC             [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! BITWISE_AND     [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! BITWISE_OR      [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! BITWISE_XOR     [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! OP              [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! PLUS            [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! DIV             [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! AND             [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! OR              [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! LSHIFT          [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! RSHIFT          [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! GREATER         [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! LESS            [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! LESS_EQUAL      [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! EQUAL           [ reduce using rule 40 (expr -> expr OP expr .) ]
  ! NOT_EQUAL       [ reduce using rule 40 (expr -> expr OP expr .) ]


state 79

    (41) expr -> expr PLUS expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 41 (expr -> expr PLUS expr .)
    UPDATE          reduce using rule 41 (expr -> expr PLUS expr .)
    PLUS_EQUAL      reduce using rule 41 (expr -> expr PLUS expr .)
    MINUS_EQUAL     reduce using rule 41 (expr -> expr PLUS expr .)
    OR_EQUAL        reduce using rule 41 (expr -> expr PLUS expr .)
    XOR_EQUAL       reduce using rule 41 (expr -> expr PLUS expr .)
    AND_EQUAL       reduce using rule 41 (expr -> expr PLUS expr .)
    COLON           reduce using rule 41 (expr -> expr PLUS expr .)
    QUEST           reduce using rule 41 (expr -> expr PLUS expr .)
    INC             reduce using rule 41 (expr -> expr PLUS expr .)
    DEC             reduce using rule 41 (expr -> expr PLUS expr .)
    BITWISE_AND     reduce using rule 41 (expr -> expr PLUS expr .)
    BITWISE_OR      reduce using rule 41 (expr -> expr PLUS expr .)
    BITWISE_XOR     reduce using rule 41 (expr -> expr PLUS expr .)
    OP              reduce using rule 41 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 41 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 41 (expr -> expr PLUS expr .)
    AND             reduce using rule 41 (expr -> expr PLUS expr .)
    OR              reduce using rule 41 (expr -> expr PLUS expr .)
    LSHIFT          reduce using rule 41 (expr -> expr PLUS expr .)
    RSHIFT          reduce using rule 41 (expr -> expr PLUS expr .)
    RSHIFT_EQUAL    reduce using rule 41 (expr -> expr PLUS expr .)
    LSHIFT_EQUAL    reduce using rule 41 (expr -> expr PLUS expr .)
    LSHIFT_LOGICAL  reduce using rule 41 (expr -> expr PLUS expr .)
    RSHIFT_LOGICAL  reduce using rule 41 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 41 (expr -> expr PLUS expr .)
    LESS            reduce using rule 41 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 41 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 41 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 41 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 41 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 41 (expr -> expr PLUS expr .)
    TYPE            reduce using rule 41 (expr -> expr PLUS expr .)
    IF              reduce using rule 41 (expr -> expr PLUS expr .)
    FOR             reduce using rule 41 (expr -> expr PLUS expr .)
    ID              reduce using rule 41 (expr -> expr PLUS expr .)
    MODULE          reduce using rule 41 (expr -> expr PLUS expr .)
    NOT             reduce using rule 41 (expr -> expr PLUS expr .)
    BITWISE_NOT     reduce using rule 41 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 41 (expr -> expr PLUS expr .)
    NOP             reduce using rule 41 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 41 (expr -> expr PLUS expr .)
    $end            reduce using rule 41 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 41 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 41 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 41 (expr -> expr PLUS expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39

  ! DOT             [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! LBRACE          [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr PLUS expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 80

    (42) expr -> expr MINUS expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 42 (expr -> expr MINUS expr .)
    UPDATE          reduce using rule 42 (expr -> expr MINUS expr .)
    PLUS_EQUAL      reduce using rule 42 (expr -> expr MINUS expr .)
    MINUS_EQUAL     reduce using rule 42 (expr -> expr MINUS expr .)
    OR_EQUAL        reduce using rule 42 (expr -> expr MINUS expr .)
    XOR_EQUAL       reduce using rule 42 (expr -> expr MINUS expr .)
    AND_EQUAL       reduce using rule 42 (expr -> expr MINUS expr .)
    COLON           reduce using rule 42 (expr -> expr MINUS expr .)
    QUEST           reduce using rule 42 (expr -> expr MINUS expr .)
    INC             reduce using rule 42 (expr -> expr MINUS expr .)
    DEC             reduce using rule 42 (expr -> expr MINUS expr .)
    BITWISE_AND     reduce using rule 42 (expr -> expr MINUS expr .)
    BITWISE_OR      reduce using rule 42 (expr -> expr MINUS expr .)
    BITWISE_XOR     reduce using rule 42 (expr -> expr MINUS expr .)
    OP              reduce using rule 42 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 42 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 42 (expr -> expr MINUS expr .)
    AND             reduce using rule 42 (expr -> expr MINUS expr .)
    OR              reduce using rule 42 (expr -> expr MINUS expr .)
    LSHIFT          reduce using rule 42 (expr -> expr MINUS expr .)
    RSHIFT          reduce using rule 42 (expr -> expr MINUS expr .)
    RSHIFT_EQUAL    reduce using rule 42 (expr -> expr MINUS expr .)
    LSHIFT_EQUAL    reduce using rule 42 (expr -> expr MINUS expr .)
    LSHIFT_LOGICAL  reduce using rule 42 (expr -> expr MINUS expr .)
    RSHIFT_LOGICAL  reduce using rule 42 (expr -> expr MINUS expr .)
    GREATER         reduce using rule 42 (expr -> expr MINUS expr .)
    LESS            reduce using rule 42 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 42 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 42 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 42 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 42 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 42 (expr -> expr MINUS expr .)
    TYPE            reduce using rule 42 (expr -> expr MINUS expr .)
    IF              reduce using rule 42 (expr -> expr MINUS expr .)
    FOR             reduce using rule 42 (expr -> expr MINUS expr .)
    ID              reduce using rule 42 (expr -> expr MINUS expr .)
    MODULE          reduce using rule 42 (expr -> expr MINUS expr .)
    NOT             reduce using rule 42 (expr -> expr MINUS expr .)
    BITWISE_NOT     reduce using rule 42 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 42 (expr -> expr MINUS expr .)
    NOP             reduce using rule 42 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 42 (expr -> expr MINUS expr .)
    $end            reduce using rule 42 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 42 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 42 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 42 (expr -> expr MINUS expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39

  ! DOT             [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! LBRACE          [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr MINUS expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 81

    (43) expr -> expr TIMES expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 43 (expr -> expr TIMES expr .)
    UPDATE          reduce using rule 43 (expr -> expr TIMES expr .)
    PLUS_EQUAL      reduce using rule 43 (expr -> expr TIMES expr .)
    MINUS_EQUAL     reduce using rule 43 (expr -> expr TIMES expr .)
    OR_EQUAL        reduce using rule 43 (expr -> expr TIMES expr .)
    XOR_EQUAL       reduce using rule 43 (expr -> expr TIMES expr .)
    AND_EQUAL       reduce using rule 43 (expr -> expr TIMES expr .)
    COLON           reduce using rule 43 (expr -> expr TIMES expr .)
    QUEST           reduce using rule 43 (expr -> expr TIMES expr .)
    INC             reduce using rule 43 (expr -> expr TIMES expr .)
    DEC             reduce using rule 43 (expr -> expr TIMES expr .)
    BITWISE_AND     reduce using rule 43 (expr -> expr TIMES expr .)
    BITWISE_OR      reduce using rule 43 (expr -> expr TIMES expr .)
    BITWISE_XOR     reduce using rule 43 (expr -> expr TIMES expr .)
    OP              reduce using rule 43 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 43 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 43 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 43 (expr -> expr TIMES expr .)
    DIV             reduce using rule 43 (expr -> expr TIMES expr .)
    MOD             reduce using rule 43 (expr -> expr TIMES expr .)
    AND             reduce using rule 43 (expr -> expr TIMES expr .)
    OR              reduce using rule 43 (expr -> expr TIMES expr .)
    LSHIFT          reduce using rule 43 (expr -> expr TIMES expr .)
    RSHIFT          reduce using rule 43 (expr -> expr TIMES expr .)
    RSHIFT_EQUAL    reduce using rule 43 (expr -> expr TIMES expr .)
    LSHIFT_EQUAL    reduce using rule 43 (expr -> expr TIMES expr .)
    LSHIFT_LOGICAL  reduce using rule 43 (expr -> expr TIMES expr .)
    RSHIFT_LOGICAL  reduce using rule 43 (expr -> expr TIMES expr .)
    GREATER         reduce using rule 43 (expr -> expr TIMES expr .)
    LESS            reduce using rule 43 (expr -> expr TIMES expr .)
    LESS_EQUAL      reduce using rule 43 (expr -> expr TIMES expr .)
    GREATER_EQUAL   reduce using rule 43 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 43 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 43 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 43 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 43 (expr -> expr TIMES expr .)
    TYPE            reduce using rule 43 (expr -> expr TIMES expr .)
    IF              reduce using rule 43 (expr -> expr TIMES expr .)
    FOR             reduce using rule 43 (expr -> expr TIMES expr .)
    ID              reduce using rule 43 (expr -> expr TIMES expr .)
    MODULE          reduce using rule 43 (expr -> expr TIMES expr .)
    NOT             reduce using rule 43 (expr -> expr TIMES expr .)
    BITWISE_NOT     reduce using rule 43 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 43 (expr -> expr TIMES expr .)
    NOP             reduce using rule 43 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 43 (expr -> expr TIMES expr .)
    $end            reduce using rule 43 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 43 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 43 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 43 (expr -> expr TIMES expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! LBRACE          [ reduce using rule 43 (expr -> expr TIMES expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 82

    (44) expr -> expr DIV expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 44 (expr -> expr DIV expr .)
    UPDATE          reduce using rule 44 (expr -> expr DIV expr .)
    PLUS_EQUAL      reduce using rule 44 (expr -> expr DIV expr .)
    MINUS_EQUAL     reduce using rule 44 (expr -> expr DIV expr .)
    OR_EQUAL        reduce using rule 44 (expr -> expr DIV expr .)
    XOR_EQUAL       reduce using rule 44 (expr -> expr DIV expr .)
    AND_EQUAL       reduce using rule 44 (expr -> expr DIV expr .)
    COLON           reduce using rule 44 (expr -> expr DIV expr .)
    QUEST           reduce using rule 44 (expr -> expr DIV expr .)
    INC             reduce using rule 44 (expr -> expr DIV expr .)
    DEC             reduce using rule 44 (expr -> expr DIV expr .)
    BITWISE_AND     reduce using rule 44 (expr -> expr DIV expr .)
    BITWISE_OR      reduce using rule 44 (expr -> expr DIV expr .)
    BITWISE_XOR     reduce using rule 44 (expr -> expr DIV expr .)
    OP              reduce using rule 44 (expr -> expr DIV expr .)
    PLUS            reduce using rule 44 (expr -> expr DIV expr .)
    MINUS           reduce using rule 44 (expr -> expr DIV expr .)
    TIMES           reduce using rule 44 (expr -> expr DIV expr .)
    DIV             reduce using rule 44 (expr -> expr DIV expr .)
    MOD             reduce using rule 44 (expr -> expr DIV expr .)
    AND             reduce using rule 44 (expr -> expr DIV expr .)
    OR              reduce using rule 44 (expr -> expr DIV expr .)
    LSHIFT          reduce using rule 44 (expr -> expr DIV expr .)
    RSHIFT          reduce using rule 44 (expr -> expr DIV expr .)
    RSHIFT_EQUAL    reduce using rule 44 (expr -> expr DIV expr .)
    LSHIFT_EQUAL    reduce using rule 44 (expr -> expr DIV expr .)
    LSHIFT_LOGICAL  reduce using rule 44 (expr -> expr DIV expr .)
    RSHIFT_LOGICAL  reduce using rule 44 (expr -> expr DIV expr .)
    GREATER         reduce using rule 44 (expr -> expr DIV expr .)
    LESS            reduce using rule 44 (expr -> expr DIV expr .)
    LESS_EQUAL      reduce using rule 44 (expr -> expr DIV expr .)
    GREATER_EQUAL   reduce using rule 44 (expr -> expr DIV expr .)
    EQUAL           reduce using rule 44 (expr -> expr DIV expr .)
    NOT_EQUAL       reduce using rule 44 (expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 44 (expr -> expr DIV expr .)
    BREAK           reduce using rule 44 (expr -> expr DIV expr .)
    TYPE            reduce using rule 44 (expr -> expr DIV expr .)
    IF              reduce using rule 44 (expr -> expr DIV expr .)
    FOR             reduce using rule 44 (expr -> expr DIV expr .)
    ID              reduce using rule 44 (expr -> expr DIV expr .)
    MODULE          reduce using rule 44 (expr -> expr DIV expr .)
    NOT             reduce using rule 44 (expr -> expr DIV expr .)
    BITWISE_NOT     reduce using rule 44 (expr -> expr DIV expr .)
    LPAREN          reduce using rule 44 (expr -> expr DIV expr .)
    NOP             reduce using rule 44 (expr -> expr DIV expr .)
    NUMBER          reduce using rule 44 (expr -> expr DIV expr .)
    $end            reduce using rule 44 (expr -> expr DIV expr .)
    RPAREN          reduce using rule 44 (expr -> expr DIV expr .)
    RBRACE          reduce using rule 44 (expr -> expr DIV expr .)
    RBRACKET        reduce using rule 44 (expr -> expr DIV expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 44 (expr -> expr DIV expr .) ]
  ! LBRACE          [ reduce using rule 44 (expr -> expr DIV expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 83

    (45) expr -> expr MOD expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 45 (expr -> expr MOD expr .)
    UPDATE          reduce using rule 45 (expr -> expr MOD expr .)
    PLUS_EQUAL      reduce using rule 45 (expr -> expr MOD expr .)
    MINUS_EQUAL     reduce using rule 45 (expr -> expr MOD expr .)
    OR_EQUAL        reduce using rule 45 (expr -> expr MOD expr .)
    XOR_EQUAL       reduce using rule 45 (expr -> expr MOD expr .)
    AND_EQUAL       reduce using rule 45 (expr -> expr MOD expr .)
    COLON           reduce using rule 45 (expr -> expr MOD expr .)
    QUEST           reduce using rule 45 (expr -> expr MOD expr .)
    INC             reduce using rule 45 (expr -> expr MOD expr .)
    DEC             reduce using rule 45 (expr -> expr MOD expr .)
    BITWISE_AND     reduce using rule 45 (expr -> expr MOD expr .)
    BITWISE_OR      reduce using rule 45 (expr -> expr MOD expr .)
    BITWISE_XOR     reduce using rule 45 (expr -> expr MOD expr .)
    OP              reduce using rule 45 (expr -> expr MOD expr .)
    PLUS            reduce using rule 45 (expr -> expr MOD expr .)
    MINUS           reduce using rule 45 (expr -> expr MOD expr .)
    TIMES           reduce using rule 45 (expr -> expr MOD expr .)
    DIV             reduce using rule 45 (expr -> expr MOD expr .)
    MOD             reduce using rule 45 (expr -> expr MOD expr .)
    AND             reduce using rule 45 (expr -> expr MOD expr .)
    OR              reduce using rule 45 (expr -> expr MOD expr .)
    LSHIFT          reduce using rule 45 (expr -> expr MOD expr .)
    RSHIFT          reduce using rule 45 (expr -> expr MOD expr .)
    RSHIFT_EQUAL    reduce using rule 45 (expr -> expr MOD expr .)
    LSHIFT_EQUAL    reduce using rule 45 (expr -> expr MOD expr .)
    LSHIFT_LOGICAL  reduce using rule 45 (expr -> expr MOD expr .)
    RSHIFT_LOGICAL  reduce using rule 45 (expr -> expr MOD expr .)
    GREATER         reduce using rule 45 (expr -> expr MOD expr .)
    LESS            reduce using rule 45 (expr -> expr MOD expr .)
    LESS_EQUAL      reduce using rule 45 (expr -> expr MOD expr .)
    GREATER_EQUAL   reduce using rule 45 (expr -> expr MOD expr .)
    EQUAL           reduce using rule 45 (expr -> expr MOD expr .)
    NOT_EQUAL       reduce using rule 45 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 45 (expr -> expr MOD expr .)
    BREAK           reduce using rule 45 (expr -> expr MOD expr .)
    TYPE            reduce using rule 45 (expr -> expr MOD expr .)
    IF              reduce using rule 45 (expr -> expr MOD expr .)
    FOR             reduce using rule 45 (expr -> expr MOD expr .)
    ID              reduce using rule 45 (expr -> expr MOD expr .)
    MODULE          reduce using rule 45 (expr -> expr MOD expr .)
    NOT             reduce using rule 45 (expr -> expr MOD expr .)
    BITWISE_NOT     reduce using rule 45 (expr -> expr MOD expr .)
    LPAREN          reduce using rule 45 (expr -> expr MOD expr .)
    NOP             reduce using rule 45 (expr -> expr MOD expr .)
    NUMBER          reduce using rule 45 (expr -> expr MOD expr .)
    $end            reduce using rule 45 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 45 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 45 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 45 (expr -> expr MOD expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26

  ! DOT             [ reduce using rule 45 (expr -> expr MOD expr .) ]
  ! LBRACE          [ reduce using rule 45 (expr -> expr MOD expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! MOD             [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 84

    (46) expr -> expr AND expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 46 (expr -> expr AND expr .)
    UPDATE          reduce using rule 46 (expr -> expr AND expr .)
    PLUS_EQUAL      reduce using rule 46 (expr -> expr AND expr .)
    MINUS_EQUAL     reduce using rule 46 (expr -> expr AND expr .)
    OR_EQUAL        reduce using rule 46 (expr -> expr AND expr .)
    XOR_EQUAL       reduce using rule 46 (expr -> expr AND expr .)
    AND_EQUAL       reduce using rule 46 (expr -> expr AND expr .)
    COLON           reduce using rule 46 (expr -> expr AND expr .)
    QUEST           reduce using rule 46 (expr -> expr AND expr .)
    INC             reduce using rule 46 (expr -> expr AND expr .)
    DEC             reduce using rule 46 (expr -> expr AND expr .)
    BITWISE_AND     reduce using rule 46 (expr -> expr AND expr .)
    BITWISE_OR      reduce using rule 46 (expr -> expr AND expr .)
    BITWISE_XOR     reduce using rule 46 (expr -> expr AND expr .)
    OP              reduce using rule 46 (expr -> expr AND expr .)
    AND             reduce using rule 46 (expr -> expr AND expr .)
    OR              reduce using rule 46 (expr -> expr AND expr .)
    RSHIFT_EQUAL    reduce using rule 46 (expr -> expr AND expr .)
    LSHIFT_EQUAL    reduce using rule 46 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 46 (expr -> expr AND expr .)
    BREAK           reduce using rule 46 (expr -> expr AND expr .)
    TYPE            reduce using rule 46 (expr -> expr AND expr .)
    IF              reduce using rule 46 (expr -> expr AND expr .)
    FOR             reduce using rule 46 (expr -> expr AND expr .)
    ID              reduce using rule 46 (expr -> expr AND expr .)
    MODULE          reduce using rule 46 (expr -> expr AND expr .)
    NOT             reduce using rule 46 (expr -> expr AND expr .)
    BITWISE_NOT     reduce using rule 46 (expr -> expr AND expr .)
    LPAREN          reduce using rule 46 (expr -> expr AND expr .)
    NOP             reduce using rule 46 (expr -> expr AND expr .)
    NUMBER          reduce using rule 46 (expr -> expr AND expr .)
    $end            reduce using rule 46 (expr -> expr AND expr .)
    RPAREN          reduce using rule 46 (expr -> expr AND expr .)
    RBRACE          reduce using rule 46 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 46 (expr -> expr AND expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! DOT             [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! LBRACE          [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! LSHIFT          [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! RSHIFT          [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! GREATER         [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! LESS            [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 46 (expr -> expr AND expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 85

    (47) expr -> expr OR expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 47 (expr -> expr OR expr .)
    UPDATE          reduce using rule 47 (expr -> expr OR expr .)
    PLUS_EQUAL      reduce using rule 47 (expr -> expr OR expr .)
    MINUS_EQUAL     reduce using rule 47 (expr -> expr OR expr .)
    OR_EQUAL        reduce using rule 47 (expr -> expr OR expr .)
    XOR_EQUAL       reduce using rule 47 (expr -> expr OR expr .)
    AND_EQUAL       reduce using rule 47 (expr -> expr OR expr .)
    COLON           reduce using rule 47 (expr -> expr OR expr .)
    QUEST           reduce using rule 47 (expr -> expr OR expr .)
    INC             reduce using rule 47 (expr -> expr OR expr .)
    DEC             reduce using rule 47 (expr -> expr OR expr .)
    BITWISE_AND     reduce using rule 47 (expr -> expr OR expr .)
    BITWISE_OR      reduce using rule 47 (expr -> expr OR expr .)
    BITWISE_XOR     reduce using rule 47 (expr -> expr OR expr .)
    OP              reduce using rule 47 (expr -> expr OR expr .)
    OR              reduce using rule 47 (expr -> expr OR expr .)
    RSHIFT_EQUAL    reduce using rule 47 (expr -> expr OR expr .)
    LSHIFT_EQUAL    reduce using rule 47 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 47 (expr -> expr OR expr .)
    BREAK           reduce using rule 47 (expr -> expr OR expr .)
    TYPE            reduce using rule 47 (expr -> expr OR expr .)
    IF              reduce using rule 47 (expr -> expr OR expr .)
    FOR             reduce using rule 47 (expr -> expr OR expr .)
    ID              reduce using rule 47 (expr -> expr OR expr .)
    MODULE          reduce using rule 47 (expr -> expr OR expr .)
    NOT             reduce using rule 47 (expr -> expr OR expr .)
    BITWISE_NOT     reduce using rule 47 (expr -> expr OR expr .)
    LPAREN          reduce using rule 47 (expr -> expr OR expr .)
    NOP             reduce using rule 47 (expr -> expr OR expr .)
    NUMBER          reduce using rule 47 (expr -> expr OR expr .)
    $end            reduce using rule 47 (expr -> expr OR expr .)
    RPAREN          reduce using rule 47 (expr -> expr OR expr .)
    RBRACE          reduce using rule 47 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 47 (expr -> expr OR expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! DOT             [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LBRACE          [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LSHIFT          [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! RSHIFT          [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! GREATER         [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LESS            [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 86

    (48) expr -> expr LSHIFT expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 48 (expr -> expr LSHIFT expr .)
    UPDATE          reduce using rule 48 (expr -> expr LSHIFT expr .)
    PLUS_EQUAL      reduce using rule 48 (expr -> expr LSHIFT expr .)
    MINUS_EQUAL     reduce using rule 48 (expr -> expr LSHIFT expr .)
    OR_EQUAL        reduce using rule 48 (expr -> expr LSHIFT expr .)
    XOR_EQUAL       reduce using rule 48 (expr -> expr LSHIFT expr .)
    AND_EQUAL       reduce using rule 48 (expr -> expr LSHIFT expr .)
    COLON           reduce using rule 48 (expr -> expr LSHIFT expr .)
    QUEST           reduce using rule 48 (expr -> expr LSHIFT expr .)
    INC             reduce using rule 48 (expr -> expr LSHIFT expr .)
    DEC             reduce using rule 48 (expr -> expr LSHIFT expr .)
    BITWISE_AND     reduce using rule 48 (expr -> expr LSHIFT expr .)
    BITWISE_OR      reduce using rule 48 (expr -> expr LSHIFT expr .)
    BITWISE_XOR     reduce using rule 48 (expr -> expr LSHIFT expr .)
    OP              reduce using rule 48 (expr -> expr LSHIFT expr .)
    AND             reduce using rule 48 (expr -> expr LSHIFT expr .)
    OR              reduce using rule 48 (expr -> expr LSHIFT expr .)
    LSHIFT          reduce using rule 48 (expr -> expr LSHIFT expr .)
    RSHIFT          reduce using rule 48 (expr -> expr LSHIFT expr .)
    RSHIFT_EQUAL    reduce using rule 48 (expr -> expr LSHIFT expr .)
    LSHIFT_EQUAL    reduce using rule 48 (expr -> expr LSHIFT expr .)
    LSHIFT_LOGICAL  reduce using rule 48 (expr -> expr LSHIFT expr .)
    RSHIFT_LOGICAL  reduce using rule 48 (expr -> expr LSHIFT expr .)
    GREATER         reduce using rule 48 (expr -> expr LSHIFT expr .)
    LESS            reduce using rule 48 (expr -> expr LSHIFT expr .)
    LESS_EQUAL      reduce using rule 48 (expr -> expr LSHIFT expr .)
    GREATER_EQUAL   reduce using rule 48 (expr -> expr LSHIFT expr .)
    EQUAL           reduce using rule 48 (expr -> expr LSHIFT expr .)
    NOT_EQUAL       reduce using rule 48 (expr -> expr LSHIFT expr .)
    SEMICOLON       reduce using rule 48 (expr -> expr LSHIFT expr .)
    BREAK           reduce using rule 48 (expr -> expr LSHIFT expr .)
    TYPE            reduce using rule 48 (expr -> expr LSHIFT expr .)
    IF              reduce using rule 48 (expr -> expr LSHIFT expr .)
    FOR             reduce using rule 48 (expr -> expr LSHIFT expr .)
    ID              reduce using rule 48 (expr -> expr LSHIFT expr .)
    MODULE          reduce using rule 48 (expr -> expr LSHIFT expr .)
    NOT             reduce using rule 48 (expr -> expr LSHIFT expr .)
    BITWISE_NOT     reduce using rule 48 (expr -> expr LSHIFT expr .)
    LPAREN          reduce using rule 48 (expr -> expr LSHIFT expr .)
    NOP             reduce using rule 48 (expr -> expr LSHIFT expr .)
    NUMBER          reduce using rule 48 (expr -> expr LSHIFT expr .)
    $end            reduce using rule 48 (expr -> expr LSHIFT expr .)
    RPAREN          reduce using rule 48 (expr -> expr LSHIFT expr .)
    RBRACE          reduce using rule 48 (expr -> expr LSHIFT expr .)
    RBRACKET        reduce using rule 48 (expr -> expr LSHIFT expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39

  ! DOT             [ reduce using rule 48 (expr -> expr LSHIFT expr .) ]
  ! LBRACE          [ reduce using rule 48 (expr -> expr LSHIFT expr .) ]
  ! PLUS            [ reduce using rule 48 (expr -> expr LSHIFT expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr LSHIFT expr .) ]
  ! TIMES           [ reduce using rule 48 (expr -> expr LSHIFT expr .) ]
  ! DIV             [ reduce using rule 48 (expr -> expr LSHIFT expr .) ]
  ! MOD             [ reduce using rule 48 (expr -> expr LSHIFT expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 87

    (49) expr -> expr RSHIFT expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 49 (expr -> expr RSHIFT expr .)
    UPDATE          reduce using rule 49 (expr -> expr RSHIFT expr .)
    PLUS_EQUAL      reduce using rule 49 (expr -> expr RSHIFT expr .)
    MINUS_EQUAL     reduce using rule 49 (expr -> expr RSHIFT expr .)
    OR_EQUAL        reduce using rule 49 (expr -> expr RSHIFT expr .)
    XOR_EQUAL       reduce using rule 49 (expr -> expr RSHIFT expr .)
    AND_EQUAL       reduce using rule 49 (expr -> expr RSHIFT expr .)
    COLON           reduce using rule 49 (expr -> expr RSHIFT expr .)
    QUEST           reduce using rule 49 (expr -> expr RSHIFT expr .)
    INC             reduce using rule 49 (expr -> expr RSHIFT expr .)
    DEC             reduce using rule 49 (expr -> expr RSHIFT expr .)
    BITWISE_AND     reduce using rule 49 (expr -> expr RSHIFT expr .)
    BITWISE_OR      reduce using rule 49 (expr -> expr RSHIFT expr .)
    BITWISE_XOR     reduce using rule 49 (expr -> expr RSHIFT expr .)
    OP              reduce using rule 49 (expr -> expr RSHIFT expr .)
    AND             reduce using rule 49 (expr -> expr RSHIFT expr .)
    OR              reduce using rule 49 (expr -> expr RSHIFT expr .)
    LSHIFT          reduce using rule 49 (expr -> expr RSHIFT expr .)
    RSHIFT          reduce using rule 49 (expr -> expr RSHIFT expr .)
    RSHIFT_EQUAL    reduce using rule 49 (expr -> expr RSHIFT expr .)
    LSHIFT_EQUAL    reduce using rule 49 (expr -> expr RSHIFT expr .)
    LSHIFT_LOGICAL  reduce using rule 49 (expr -> expr RSHIFT expr .)
    RSHIFT_LOGICAL  reduce using rule 49 (expr -> expr RSHIFT expr .)
    GREATER         reduce using rule 49 (expr -> expr RSHIFT expr .)
    LESS            reduce using rule 49 (expr -> expr RSHIFT expr .)
    LESS_EQUAL      reduce using rule 49 (expr -> expr RSHIFT expr .)
    GREATER_EQUAL   reduce using rule 49 (expr -> expr RSHIFT expr .)
    EQUAL           reduce using rule 49 (expr -> expr RSHIFT expr .)
    NOT_EQUAL       reduce using rule 49 (expr -> expr RSHIFT expr .)
    SEMICOLON       reduce using rule 49 (expr -> expr RSHIFT expr .)
    BREAK           reduce using rule 49 (expr -> expr RSHIFT expr .)
    TYPE            reduce using rule 49 (expr -> expr RSHIFT expr .)
    IF              reduce using rule 49 (expr -> expr RSHIFT expr .)
    FOR             reduce using rule 49 (expr -> expr RSHIFT expr .)
    ID              reduce using rule 49 (expr -> expr RSHIFT expr .)
    MODULE          reduce using rule 49 (expr -> expr RSHIFT expr .)
    NOT             reduce using rule 49 (expr -> expr RSHIFT expr .)
    BITWISE_NOT     reduce using rule 49 (expr -> expr RSHIFT expr .)
    LPAREN          reduce using rule 49 (expr -> expr RSHIFT expr .)
    NOP             reduce using rule 49 (expr -> expr RSHIFT expr .)
    NUMBER          reduce using rule 49 (expr -> expr RSHIFT expr .)
    $end            reduce using rule 49 (expr -> expr RSHIFT expr .)
    RPAREN          reduce using rule 49 (expr -> expr RSHIFT expr .)
    RBRACE          reduce using rule 49 (expr -> expr RSHIFT expr .)
    RBRACKET        reduce using rule 49 (expr -> expr RSHIFT expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39

  ! DOT             [ reduce using rule 49 (expr -> expr RSHIFT expr .) ]
  ! LBRACE          [ reduce using rule 49 (expr -> expr RSHIFT expr .) ]
  ! PLUS            [ reduce using rule 49 (expr -> expr RSHIFT expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr RSHIFT expr .) ]
  ! TIMES           [ reduce using rule 49 (expr -> expr RSHIFT expr .) ]
  ! DIV             [ reduce using rule 49 (expr -> expr RSHIFT expr .) ]
  ! MOD             [ reduce using rule 49 (expr -> expr RSHIFT expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 88

    (50) expr -> expr RSHIFT_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    SEMICOLON       reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    BREAK           reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    TYPE            reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    IF              reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    FOR             reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    ID              reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    MODULE          reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    NOT             reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    BITWISE_NOT     reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    LPAREN          reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    NOP             reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    NUMBER          reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    $end            reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    RPAREN          reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    RBRACE          reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    RBRACKET        reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! OR_EQUAL        [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! XOR_EQUAL       [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! AND_EQUAL       [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! DOT             [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! COLON           [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! QUEST           [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! INC             [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! DEC             [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! BITWISE_AND     [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! BITWISE_OR      [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! BITWISE_XOR     [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! OP              [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! DIV             [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! AND             [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! OR              [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! LESS            [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 50 (expr -> expr RSHIFT_EQUAL expr .) ]


state 89

    (51) expr -> expr LSHIFT_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! shift/reduce conflict for UPDATE resolved as shift
  ! shift/reduce conflict for PLUS_EQUAL resolved as shift
  ! shift/reduce conflict for MINUS_EQUAL resolved as shift
  ! shift/reduce conflict for OR_EQUAL resolved as shift
  ! shift/reduce conflict for XOR_EQUAL resolved as shift
  ! shift/reduce conflict for AND_EQUAL resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for QUEST resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for BITWISE_AND resolved as shift
  ! shift/reduce conflict for BITWISE_OR resolved as shift
  ! shift/reduce conflict for BITWISE_XOR resolved as shift
  ! shift/reduce conflict for OP resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_EQUAL resolved as shift
  ! shift/reduce conflict for LSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for RSHIFT_LOGICAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    COMMA           reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    SEMICOLON       reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    BREAK           reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    TYPE            reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    IF              reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    FOR             reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    ID              reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    MODULE          reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    NOT             reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    BITWISE_NOT     reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    LPAREN          reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    NOP             reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    NUMBER          reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    $end            reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    RPAREN          reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    RBRACE          reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    RBRACKET        reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! OR_EQUAL        [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! XOR_EQUAL       [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! AND_EQUAL       [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! DOT             [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! COLON           [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! QUEST           [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! INC             [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! DEC             [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! BITWISE_AND     [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! BITWISE_OR      [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! BITWISE_XOR     [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! OP              [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! DIV             [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! AND             [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! OR              [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! LESS            [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 51 (expr -> expr LSHIFT_EQUAL expr .) ]


state 90

    (52) expr -> expr LSHIFT_LOGICAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    UPDATE          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    PLUS_EQUAL      reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    MINUS_EQUAL     reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    OR_EQUAL        reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    XOR_EQUAL       reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    AND_EQUAL       reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    COLON           reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    QUEST           reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    INC             reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    DEC             reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    BITWISE_AND     reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    BITWISE_OR      reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    BITWISE_XOR     reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    OP              reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    AND             reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    OR              reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    LSHIFT          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    RSHIFT          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    RSHIFT_EQUAL    reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    LSHIFT_EQUAL    reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    LSHIFT_LOGICAL  reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    RSHIFT_LOGICAL  reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    GREATER         reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    LESS            reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    LESS_EQUAL      reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    GREATER_EQUAL   reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    EQUAL           reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    NOT_EQUAL       reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    SEMICOLON       reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    BREAK           reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    TYPE            reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    IF              reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    FOR             reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    ID              reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    MODULE          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    NOT             reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    BITWISE_NOT     reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    LPAREN          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    NOP             reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    NUMBER          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    $end            reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    RPAREN          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    RBRACE          reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    RBRACKET        reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39

  ! DOT             [ reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .) ]
  ! LBRACE          [ reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .) ]
  ! PLUS            [ reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .) ]
  ! MINUS           [ reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .) ]
  ! TIMES           [ reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .) ]
  ! DIV             [ reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .) ]
  ! MOD             [ reduce using rule 52 (expr -> expr LSHIFT_LOGICAL expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 91

    (53) expr -> expr RSHIFT_LOGICAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    UPDATE          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    PLUS_EQUAL      reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    MINUS_EQUAL     reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    OR_EQUAL        reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    XOR_EQUAL       reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    AND_EQUAL       reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    COLON           reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    QUEST           reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    INC             reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    DEC             reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    BITWISE_AND     reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    BITWISE_OR      reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    BITWISE_XOR     reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    OP              reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    AND             reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    OR              reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    LSHIFT          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    RSHIFT          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    RSHIFT_EQUAL    reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    LSHIFT_EQUAL    reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    LSHIFT_LOGICAL  reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    RSHIFT_LOGICAL  reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    GREATER         reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    LESS            reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    LESS_EQUAL      reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    GREATER_EQUAL   reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    EQUAL           reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    NOT_EQUAL       reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    SEMICOLON       reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    BREAK           reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    TYPE            reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    IF              reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    FOR             reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    ID              reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    MODULE          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    NOT             reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    BITWISE_NOT     reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    LPAREN          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    NOP             reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    NUMBER          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    $end            reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    RPAREN          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    RBRACE          reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    RBRACKET        reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39

  ! DOT             [ reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .) ]
  ! LBRACE          [ reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .) ]
  ! PLUS            [ reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .) ]
  ! MINUS           [ reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .) ]
  ! TIMES           [ reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .) ]
  ! DIV             [ reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .) ]
  ! MOD             [ reduce using rule 53 (expr -> expr RSHIFT_LOGICAL expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! LSHIFT_LOGICAL  [ shift and go to state 46 ]
  ! RSHIFT_LOGICAL  [ shift and go to state 47 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 92

    (54) expr -> expr GREATER expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 54 (expr -> expr GREATER expr .)
    UPDATE          reduce using rule 54 (expr -> expr GREATER expr .)
    PLUS_EQUAL      reduce using rule 54 (expr -> expr GREATER expr .)
    MINUS_EQUAL     reduce using rule 54 (expr -> expr GREATER expr .)
    OR_EQUAL        reduce using rule 54 (expr -> expr GREATER expr .)
    XOR_EQUAL       reduce using rule 54 (expr -> expr GREATER expr .)
    AND_EQUAL       reduce using rule 54 (expr -> expr GREATER expr .)
    COLON           reduce using rule 54 (expr -> expr GREATER expr .)
    QUEST           reduce using rule 54 (expr -> expr GREATER expr .)
    INC             reduce using rule 54 (expr -> expr GREATER expr .)
    DEC             reduce using rule 54 (expr -> expr GREATER expr .)
    BITWISE_AND     reduce using rule 54 (expr -> expr GREATER expr .)
    BITWISE_OR      reduce using rule 54 (expr -> expr GREATER expr .)
    BITWISE_XOR     reduce using rule 54 (expr -> expr GREATER expr .)
    OP              reduce using rule 54 (expr -> expr GREATER expr .)
    AND             reduce using rule 54 (expr -> expr GREATER expr .)
    OR              reduce using rule 54 (expr -> expr GREATER expr .)
    RSHIFT_EQUAL    reduce using rule 54 (expr -> expr GREATER expr .)
    LSHIFT_EQUAL    reduce using rule 54 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 54 (expr -> expr GREATER expr .)
    LESS            reduce using rule 54 (expr -> expr GREATER expr .)
    LESS_EQUAL      reduce using rule 54 (expr -> expr GREATER expr .)
    GREATER_EQUAL   reduce using rule 54 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 54 (expr -> expr GREATER expr .)
    NOT_EQUAL       reduce using rule 54 (expr -> expr GREATER expr .)
    SEMICOLON       reduce using rule 54 (expr -> expr GREATER expr .)
    BREAK           reduce using rule 54 (expr -> expr GREATER expr .)
    TYPE            reduce using rule 54 (expr -> expr GREATER expr .)
    IF              reduce using rule 54 (expr -> expr GREATER expr .)
    FOR             reduce using rule 54 (expr -> expr GREATER expr .)
    ID              reduce using rule 54 (expr -> expr GREATER expr .)
    MODULE          reduce using rule 54 (expr -> expr GREATER expr .)
    NOT             reduce using rule 54 (expr -> expr GREATER expr .)
    BITWISE_NOT     reduce using rule 54 (expr -> expr GREATER expr .)
    LPAREN          reduce using rule 54 (expr -> expr GREATER expr .)
    NOP             reduce using rule 54 (expr -> expr GREATER expr .)
    NUMBER          reduce using rule 54 (expr -> expr GREATER expr .)
    $end            reduce using rule 54 (expr -> expr GREATER expr .)
    RPAREN          reduce using rule 54 (expr -> expr GREATER expr .)
    RBRACE          reduce using rule 54 (expr -> expr GREATER expr .)
    RBRACKET        reduce using rule 54 (expr -> expr GREATER expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47

  ! DOT             [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! LBRACE          [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! PLUS            [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! DIV             [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! MOD             [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! LSHIFT          [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! RSHIFT          [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 54 (expr -> expr GREATER expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 93

    (55) expr -> expr LESS expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 55 (expr -> expr LESS expr .)
    UPDATE          reduce using rule 55 (expr -> expr LESS expr .)
    PLUS_EQUAL      reduce using rule 55 (expr -> expr LESS expr .)
    MINUS_EQUAL     reduce using rule 55 (expr -> expr LESS expr .)
    OR_EQUAL        reduce using rule 55 (expr -> expr LESS expr .)
    XOR_EQUAL       reduce using rule 55 (expr -> expr LESS expr .)
    AND_EQUAL       reduce using rule 55 (expr -> expr LESS expr .)
    COLON           reduce using rule 55 (expr -> expr LESS expr .)
    QUEST           reduce using rule 55 (expr -> expr LESS expr .)
    INC             reduce using rule 55 (expr -> expr LESS expr .)
    DEC             reduce using rule 55 (expr -> expr LESS expr .)
    BITWISE_AND     reduce using rule 55 (expr -> expr LESS expr .)
    BITWISE_OR      reduce using rule 55 (expr -> expr LESS expr .)
    BITWISE_XOR     reduce using rule 55 (expr -> expr LESS expr .)
    OP              reduce using rule 55 (expr -> expr LESS expr .)
    AND             reduce using rule 55 (expr -> expr LESS expr .)
    OR              reduce using rule 55 (expr -> expr LESS expr .)
    RSHIFT_EQUAL    reduce using rule 55 (expr -> expr LESS expr .)
    LSHIFT_EQUAL    reduce using rule 55 (expr -> expr LESS expr .)
    GREATER         reduce using rule 55 (expr -> expr LESS expr .)
    LESS            reduce using rule 55 (expr -> expr LESS expr .)
    LESS_EQUAL      reduce using rule 55 (expr -> expr LESS expr .)
    GREATER_EQUAL   reduce using rule 55 (expr -> expr LESS expr .)
    EQUAL           reduce using rule 55 (expr -> expr LESS expr .)
    NOT_EQUAL       reduce using rule 55 (expr -> expr LESS expr .)
    SEMICOLON       reduce using rule 55 (expr -> expr LESS expr .)
    BREAK           reduce using rule 55 (expr -> expr LESS expr .)
    TYPE            reduce using rule 55 (expr -> expr LESS expr .)
    IF              reduce using rule 55 (expr -> expr LESS expr .)
    FOR             reduce using rule 55 (expr -> expr LESS expr .)
    ID              reduce using rule 55 (expr -> expr LESS expr .)
    MODULE          reduce using rule 55 (expr -> expr LESS expr .)
    NOT             reduce using rule 55 (expr -> expr LESS expr .)
    BITWISE_NOT     reduce using rule 55 (expr -> expr LESS expr .)
    LPAREN          reduce using rule 55 (expr -> expr LESS expr .)
    NOP             reduce using rule 55 (expr -> expr LESS expr .)
    NUMBER          reduce using rule 55 (expr -> expr LESS expr .)
    $end            reduce using rule 55 (expr -> expr LESS expr .)
    RPAREN          reduce using rule 55 (expr -> expr LESS expr .)
    RBRACE          reduce using rule 55 (expr -> expr LESS expr .)
    RBRACKET        reduce using rule 55 (expr -> expr LESS expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47

  ! DOT             [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! LBRACE          [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! PLUS            [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! DIV             [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! MOD             [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! LSHIFT          [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! RSHIFT          [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 55 (expr -> expr LESS expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 94

    (56) expr -> expr LESS_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    UPDATE          reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    PLUS_EQUAL      reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    MINUS_EQUAL     reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    OR_EQUAL        reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    XOR_EQUAL       reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    AND_EQUAL       reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    COLON           reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    QUEST           reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    INC             reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    DEC             reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    BITWISE_AND     reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    BITWISE_OR      reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    BITWISE_XOR     reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    OP              reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    OR              reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    RSHIFT_EQUAL    reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    LSHIFT_EQUAL    reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    GREATER         reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    LESS            reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    EQUAL           reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    NOT_EQUAL       reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    BREAK           reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    TYPE            reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    IF              reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    FOR             reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    ID              reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    MODULE          reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    NOT             reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    BITWISE_NOT     reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    LPAREN          reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    NOP             reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    NUMBER          reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    $end            reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    RBRACE          reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    RBRACKET        reduce using rule 56 (expr -> expr LESS_EQUAL expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47

  ! DOT             [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! DIV             [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 56 (expr -> expr LESS_EQUAL expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 95

    (57) expr -> expr GREATER_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    UPDATE          reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    PLUS_EQUAL      reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    MINUS_EQUAL     reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    OR_EQUAL        reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    XOR_EQUAL       reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    AND_EQUAL       reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    COLON           reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    QUEST           reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    INC             reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    DEC             reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    BITWISE_AND     reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    BITWISE_OR      reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    BITWISE_XOR     reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    OP              reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    RSHIFT_EQUAL    reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    LSHIFT_EQUAL    reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    GREATER         reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    LESS            reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    LESS_EQUAL      reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    EQUAL           reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    SEMICOLON       reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    BREAK           reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    TYPE            reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    IF              reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    FOR             reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    ID              reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    MODULE          reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    NOT             reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    BITWISE_NOT     reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    LPAREN          reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    NOP             reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    NUMBER          reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    $end            reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    RPAREN          reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    RBRACE          reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    RBRACKET        reduce using rule 57 (expr -> expr GREATER_EQUAL expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47

  ! DOT             [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! DIV             [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! MOD             [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 57 (expr -> expr GREATER_EQUAL expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! GREATER         [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]
  ! GREATER_EQUAL   [ shift and go to state 51 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 96

    (58) expr -> expr EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 58 (expr -> expr EQUAL expr .)
    UPDATE          reduce using rule 58 (expr -> expr EQUAL expr .)
    PLUS_EQUAL      reduce using rule 58 (expr -> expr EQUAL expr .)
    MINUS_EQUAL     reduce using rule 58 (expr -> expr EQUAL expr .)
    OR_EQUAL        reduce using rule 58 (expr -> expr EQUAL expr .)
    XOR_EQUAL       reduce using rule 58 (expr -> expr EQUAL expr .)
    AND_EQUAL       reduce using rule 58 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 58 (expr -> expr EQUAL expr .)
    QUEST           reduce using rule 58 (expr -> expr EQUAL expr .)
    INC             reduce using rule 58 (expr -> expr EQUAL expr .)
    DEC             reduce using rule 58 (expr -> expr EQUAL expr .)
    BITWISE_AND     reduce using rule 58 (expr -> expr EQUAL expr .)
    BITWISE_OR      reduce using rule 58 (expr -> expr EQUAL expr .)
    BITWISE_XOR     reduce using rule 58 (expr -> expr EQUAL expr .)
    OP              reduce using rule 58 (expr -> expr EQUAL expr .)
    AND             reduce using rule 58 (expr -> expr EQUAL expr .)
    OR              reduce using rule 58 (expr -> expr EQUAL expr .)
    RSHIFT_EQUAL    reduce using rule 58 (expr -> expr EQUAL expr .)
    LSHIFT_EQUAL    reduce using rule 58 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 58 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 58 (expr -> expr EQUAL expr .)
    SEMICOLON       reduce using rule 58 (expr -> expr EQUAL expr .)
    BREAK           reduce using rule 58 (expr -> expr EQUAL expr .)
    TYPE            reduce using rule 58 (expr -> expr EQUAL expr .)
    IF              reduce using rule 58 (expr -> expr EQUAL expr .)
    FOR             reduce using rule 58 (expr -> expr EQUAL expr .)
    ID              reduce using rule 58 (expr -> expr EQUAL expr .)
    MODULE          reduce using rule 58 (expr -> expr EQUAL expr .)
    NOT             reduce using rule 58 (expr -> expr EQUAL expr .)
    BITWISE_NOT     reduce using rule 58 (expr -> expr EQUAL expr .)
    LPAREN          reduce using rule 58 (expr -> expr EQUAL expr .)
    NOP             reduce using rule 58 (expr -> expr EQUAL expr .)
    NUMBER          reduce using rule 58 (expr -> expr EQUAL expr .)
    $end            reduce using rule 58 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 58 (expr -> expr EQUAL expr .)
    RBRACE          reduce using rule 58 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 58 (expr -> expr EQUAL expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51

  ! DOT             [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! DIV             [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! MOD             [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! GREATER         [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! LESS            [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (expr -> expr EQUAL expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 97

    (59) expr -> expr NOT_EQUAL expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    COMMA           reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    UPDATE          reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    PLUS_EQUAL      reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    MINUS_EQUAL     reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    OR_EQUAL        reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    XOR_EQUAL       reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    AND_EQUAL       reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    QUEST           reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    INC             reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    DEC             reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    BITWISE_AND     reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    BITWISE_OR      reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    BITWISE_XOR     reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    OP              reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    RSHIFT_EQUAL    reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    LSHIFT_EQUAL    reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    SEMICOLON       reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    BREAK           reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    TYPE            reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    IF              reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    FOR             reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    ID              reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    MODULE          reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    NOT             reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    BITWISE_NOT     reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    LPAREN          reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    NOP             reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    NUMBER          reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    $end            reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    RBRACE          reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 59 (expr -> expr NOT_EQUAL expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51

  ! DOT             [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! LBRACE          [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! DIV             [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! MOD             [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! RSHIFT          [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! GREATER         [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! LESS            [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 59 (expr -> expr NOT_EQUAL expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! BITWISE_AND     [ shift and go to state 31 ]
  ! BITWISE_OR      [ shift and go to state 32 ]
  ! BITWISE_XOR     [ shift and go to state 33 ]
  ! OP              [ shift and go to state 34 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]
  ! EQUAL           [ shift and go to state 52 ]
  ! NOT_EQUAL       [ shift and go to state 53 ]


state 98

    (7) stmt -> TYPE ID UPDATE . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 111

state 99

    (22) expr -> ID LPAREN args . RPAREN
    (27) args -> args . COMMA expr

    RPAREN          shift and go to state 112
    COMMA           shift and go to state 113


state 100

    (24) expr -> ID LPAREN RPAREN .

    COMMA           reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    UPDATE          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    PLUS_EQUAL      reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    MINUS_EQUAL     reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    OR_EQUAL        reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    XOR_EQUAL       reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    AND_EQUAL       reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    DOT             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    LBRACE          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    COLON           reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    QUEST           reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    INC             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    DEC             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    BITWISE_AND     reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    BITWISE_OR      reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    BITWISE_XOR     reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    OP              reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    DIV             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    MOD             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    AND             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    OR              reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    LSHIFT          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    RSHIFT          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    RSHIFT_EQUAL    reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    LSHIFT_EQUAL    reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    LSHIFT_LOGICAL  reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    RSHIFT_LOGICAL  reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    GREATER         reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    LESS            reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    LESS_EQUAL      reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    GREATER_EQUAL   reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    EQUAL           reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    TYPE            reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    IF              reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    FOR             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    ID              reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    MODULE          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    NOT             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    BITWISE_NOT     reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    NOP             reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    $end            reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 24 (expr -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 24 (expr -> ID LPAREN RPAREN .)


state 101

    (26) args -> expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    RPAREN          reduce using rule 26 (args -> expr .)
    COMMA           reduce using rule 26 (args -> expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 102

    (17) stmt -> IF LPAREN expr . RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> IF LPAREN expr . RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> IF LPAREN expr . RPAREN stmt
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    RPAREN          shift and go to state 114
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 103

    (60) expr -> LPAREN expr RPAREN .

    COMMA           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    UPDATE          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    PLUS_EQUAL      reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    MINUS_EQUAL     reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    OR_EQUAL        reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    XOR_EQUAL       reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    AND_EQUAL       reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    QUEST           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    INC             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    DEC             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    BITWISE_AND     reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    BITWISE_OR      reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    BITWISE_XOR     reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    OP              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LSHIFT          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RSHIFT          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RSHIFT_EQUAL    reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LSHIFT_EQUAL    reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LSHIFT_LOGICAL  reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RSHIFT_LOGICAL  reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    GREATER         reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LESS            reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    GREATER_EQUAL   reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    TYPE            reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    MODULE          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    BITWISE_NOT     reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    NOP             reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 60 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 60 (expr -> LPAREN expr RPAREN .)


state 104

    (20) stmt -> FOR LPAREN expr_empty . SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> FOR LPAREN expr_empty . SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt

    SEMICOLON       shift and go to state 115


state 105

    (15) expr_empty -> expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    SEMICOLON       reduce using rule 15 (expr_empty -> expr .)
    RPAREN          reduce using rule 15 (expr_empty -> expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 106

    (23) expr -> MODULE DOT ID . LPAREN args RPAREN

    LPAREN          shift and go to state 116


state 107

    (9) stmt -> expr COMMA expr UPDATE . expr
    (8) expr -> expr UPDATE . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 117

state 108

    (28) expr -> expr LBRACE expr RBRACE .

    COMMA           reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    UPDATE          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    PLUS_EQUAL      reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    MINUS_EQUAL     reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    OR_EQUAL        reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    XOR_EQUAL       reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    AND_EQUAL       reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    DOT             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    LBRACE          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    COLON           reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    QUEST           reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    INC             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    DEC             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    BITWISE_AND     reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    BITWISE_OR      reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    BITWISE_XOR     reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    OP              reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    PLUS            reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    MINUS           reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    TIMES           reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    DIV             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    MOD             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    AND             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    OR              reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    LSHIFT          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    RSHIFT          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    RSHIFT_EQUAL    reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    LSHIFT_EQUAL    reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    LSHIFT_LOGICAL  reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    RSHIFT_LOGICAL  reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    GREATER         reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    LESS            reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    LESS_EQUAL      reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    GREATER_EQUAL   reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    EQUAL           reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    NOT_EQUAL       reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    SEMICOLON       reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    BREAK           reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    TYPE            reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    IF              reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    FOR             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    ID              reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    MODULE          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    NOT             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    BITWISE_NOT     reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    LPAREN          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    NOP             reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    NUMBER          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    $end            reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    RPAREN          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    RBRACE          reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)
    RBRACKET        reduce using rule 28 (expr -> expr LBRACE expr RBRACE .)


state 109

    (30) expr -> expr LBRACE expr COLON . expr RBRACE
    (29) expr -> expr COLON . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 118

state 110

    (31) expr -> expr QUEST expr COLON . expr
    (29) expr -> expr COLON . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 119

state 111

    (7) stmt -> TYPE ID UPDATE expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    SEMICOLON       reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    BREAK           reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    TYPE            reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    IF              reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    FOR             reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    ID              reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    MODULE          reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    NOT             reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    BITWISE_NOT     reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    LPAREN          reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    NOP             reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    NUMBER          reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    $end            reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    RBRACKET        reduce using rule 7 (stmt -> TYPE ID UPDATE expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! MINUS           [ reduce using rule 7 (stmt -> TYPE ID UPDATE expr .) ]


state 112

    (22) expr -> ID LPAREN args RPAREN .

    COMMA           reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    UPDATE          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    PLUS_EQUAL      reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    MINUS_EQUAL     reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    OR_EQUAL        reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    XOR_EQUAL       reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    AND_EQUAL       reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    DOT             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    LBRACE          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    COLON           reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    QUEST           reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    INC             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    DEC             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    BITWISE_AND     reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    BITWISE_OR      reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    BITWISE_XOR     reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    OP              reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    DIV             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    MOD             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    AND             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    OR              reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    LSHIFT          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    RSHIFT          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    RSHIFT_EQUAL    reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    LSHIFT_EQUAL    reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    LSHIFT_LOGICAL  reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    RSHIFT_LOGICAL  reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    LESS_EQUAL      reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    GREATER_EQUAL   reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    EQUAL           reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    NOT_EQUAL       reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    BREAK           reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    TYPE            reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    IF              reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    FOR             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    ID              reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    MODULE          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    NOT             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    BITWISE_NOT     reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    LPAREN          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    NOP             reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    NUMBER          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    $end            reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    RBRACE          reduce using rule 22 (expr -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 22 (expr -> ID LPAREN args RPAREN .)


state 113

    (27) args -> args COMMA . expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 120

state 114

    (17) stmt -> IF LPAREN expr RPAREN . LBRACKET stmts RBRACKET
    (18) stmt -> IF LPAREN expr RPAREN . LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> IF LPAREN expr RPAREN . stmt
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    LBRACKET        shift and go to state 121
    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 4
    stmt                           shift and go to state 122

state 115

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON . expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> FOR LPAREN expr_empty SEMICOLON . expr_empty SEMICOLON expr_empty RPAREN stmt
    (15) expr_empty -> . expr
    (16) expr_empty -> .
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    SEMICOLON       reduce using rule 16 (expr_empty -> .)
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr_empty                     shift and go to state 123
    expr                           shift and go to state 105

state 116

    (23) expr -> MODULE DOT ID LPAREN . args RPAREN
    (26) args -> . expr
    (27) args -> . args COMMA expr
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    args                           shift and go to state 124
    expr                           shift and go to state 101

state 117

    (9) stmt -> expr COMMA expr UPDATE expr .
    (8) expr -> expr UPDATE expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! reduce/reduce conflict for MINUS resolved using rule 8 (expr -> expr UPDATE expr .)
    SEMICOLON       reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    BREAK           reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    TYPE            reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    IF              reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    FOR             reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    ID              reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    MODULE          reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    NOT             reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    BITWISE_NOT     reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    LPAREN          reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    NOP             reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    NUMBER          reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    $end            reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    RBRACKET        reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .)
    PLUS_EQUAL      reduce using rule 8 (expr -> expr UPDATE expr .)
    MINUS_EQUAL     reduce using rule 8 (expr -> expr UPDATE expr .)
    OR_EQUAL        reduce using rule 8 (expr -> expr UPDATE expr .)
    XOR_EQUAL       reduce using rule 8 (expr -> expr UPDATE expr .)
    AND_EQUAL       reduce using rule 8 (expr -> expr UPDATE expr .)
    INC             reduce using rule 8 (expr -> expr UPDATE expr .)
    DEC             reduce using rule 8 (expr -> expr UPDATE expr .)
    OP              reduce using rule 8 (expr -> expr UPDATE expr .)
    RSHIFT_EQUAL    reduce using rule 8 (expr -> expr UPDATE expr .)
    LSHIFT_EQUAL    reduce using rule 8 (expr -> expr UPDATE expr .)
    UPDATE          shift and go to state 19
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! MINUS           [ reduce using rule 9 (stmt -> expr COMMA expr UPDATE expr .) ]
  ! UPDATE          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! DOT             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LBRACE          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! COLON           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! QUEST           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! BITWISE_AND     [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! BITWISE_OR      [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! BITWISE_XOR     [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! PLUS            [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! MINUS           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! TIMES           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! DIV             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! MOD             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! AND             [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! OR              [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LSHIFT          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! RSHIFT          [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! GREATER         [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LESS            [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! EQUAL           [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! NOT_EQUAL       [ reduce using rule 8 (expr -> expr UPDATE expr .) ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 118

    (30) expr -> expr LBRACE expr COLON expr . RBRACE
    (29) expr -> expr COLON expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    RBRACE          shift and go to state 125
    COLON           reduce using rule 29 (expr -> expr COLON expr .)
    UPDATE          reduce using rule 29 (expr -> expr COLON expr .)
    PLUS_EQUAL      reduce using rule 29 (expr -> expr COLON expr .)
    MINUS_EQUAL     reduce using rule 29 (expr -> expr COLON expr .)
    OR_EQUAL        reduce using rule 29 (expr -> expr COLON expr .)
    XOR_EQUAL       reduce using rule 29 (expr -> expr COLON expr .)
    AND_EQUAL       reduce using rule 29 (expr -> expr COLON expr .)
    QUEST           reduce using rule 29 (expr -> expr COLON expr .)
    INC             reduce using rule 29 (expr -> expr COLON expr .)
    DEC             reduce using rule 29 (expr -> expr COLON expr .)
    OP              reduce using rule 29 (expr -> expr COLON expr .)
    RSHIFT_EQUAL    reduce using rule 29 (expr -> expr COLON expr .)
    LSHIFT_EQUAL    reduce using rule 29 (expr -> expr COLON expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! RBRACE          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! DOT             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_AND     [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_OR      [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_XOR     [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! OR              [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LSHIFT          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! RSHIFT          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! GREATER         [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LESS            [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! NOT_EQUAL       [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 119

    (31) expr -> expr QUEST expr COLON expr .
    (29) expr -> expr COLON expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

  ! reduce/reduce conflict for COLON resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for UPDATE resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for PLUS_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for MINUS_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for OR_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for XOR_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for AND_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for DOT resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LBRACE resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for QUEST resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for INC resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for DEC resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for BITWISE_AND resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for BITWISE_OR resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for BITWISE_XOR resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for OP resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for DIV resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for MOD resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for AND resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for OR resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LSHIFT resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for RSHIFT resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for RSHIFT_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LSHIFT_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LSHIFT_LOGICAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for RSHIFT_LOGICAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for GREATER resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LESS resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for LESS_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for GREATER_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for EQUAL resolved using rule 29 (expr -> expr COLON expr .)
  ! reduce/reduce conflict for NOT_EQUAL resolved using rule 29 (expr -> expr COLON expr .)
    COMMA           reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    SEMICOLON       reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    BREAK           reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    TYPE            reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    IF              reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    FOR             reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    ID              reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    MODULE          reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    NOT             reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    BITWISE_NOT     reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    LPAREN          reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    NOP             reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    NUMBER          reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    $end            reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    RPAREN          reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    RBRACE          reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    RBRACKET        reduce using rule 31 (expr -> expr QUEST expr COLON expr .)
    COLON           reduce using rule 29 (expr -> expr COLON expr .)
    UPDATE          reduce using rule 29 (expr -> expr COLON expr .)
    PLUS_EQUAL      reduce using rule 29 (expr -> expr COLON expr .)
    MINUS_EQUAL     reduce using rule 29 (expr -> expr COLON expr .)
    OR_EQUAL        reduce using rule 29 (expr -> expr COLON expr .)
    XOR_EQUAL       reduce using rule 29 (expr -> expr COLON expr .)
    AND_EQUAL       reduce using rule 29 (expr -> expr COLON expr .)
    QUEST           reduce using rule 29 (expr -> expr COLON expr .)
    INC             reduce using rule 29 (expr -> expr COLON expr .)
    DEC             reduce using rule 29 (expr -> expr COLON expr .)
    OP              reduce using rule 29 (expr -> expr COLON expr .)
    RSHIFT_EQUAL    reduce using rule 29 (expr -> expr COLON expr .)
    LSHIFT_EQUAL    reduce using rule 29 (expr -> expr COLON expr .)
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53

  ! UPDATE          [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! PLUS_EQUAL      [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! MINUS_EQUAL     [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! OR_EQUAL        [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! XOR_EQUAL       [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! AND_EQUAL       [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! DOT             [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! COLON           [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! QUEST           [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! INC             [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! DEC             [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! BITWISE_AND     [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! BITWISE_OR      [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! BITWISE_XOR     [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! OP              [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! DIV             [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! AND             [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! OR              [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! LSHIFT          [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! RSHIFT          [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! RSHIFT_EQUAL    [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! LSHIFT_EQUAL    [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! GREATER         [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! LESS            [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! NOT_EQUAL       [ reduce using rule 31 (expr -> expr QUEST expr COLON expr .) ]
  ! DOT             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_AND     [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_OR      [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! BITWISE_XOR     [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! OR              [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LSHIFT          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! RSHIFT          [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LSHIFT_LOGICAL  [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! RSHIFT_LOGICAL  [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! GREATER         [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LESS            [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! NOT_EQUAL       [ reduce using rule 29 (expr -> expr COLON expr .) ]
  ! UPDATE          [ shift and go to state 19 ]
  ! PLUS_EQUAL      [ shift and go to state 20 ]
  ! MINUS_EQUAL     [ shift and go to state 21 ]
  ! OR_EQUAL        [ shift and go to state 22 ]
  ! XOR_EQUAL       [ shift and go to state 23 ]
  ! AND_EQUAL       [ shift and go to state 24 ]
  ! COLON           [ shift and go to state 27 ]
  ! QUEST           [ shift and go to state 28 ]
  ! INC             [ shift and go to state 29 ]
  ! DEC             [ shift and go to state 30 ]
  ! OP              [ shift and go to state 34 ]
  ! RSHIFT_EQUAL    [ shift and go to state 44 ]
  ! LSHIFT_EQUAL    [ shift and go to state 45 ]


state 120

    (27) args -> args COMMA expr .
    (8) expr -> expr . UPDATE expr
    (10) expr -> expr . PLUS_EQUAL expr
    (11) expr -> expr . MINUS_EQUAL expr
    (12) expr -> expr . OR_EQUAL expr
    (13) expr -> expr . XOR_EQUAL expr
    (14) expr -> expr . AND_EQUAL expr
    (25) expr -> expr . DOT ID
    (28) expr -> expr . LBRACE expr RBRACE
    (29) expr -> expr . COLON expr
    (30) expr -> expr . LBRACE expr COLON expr RBRACE
    (31) expr -> expr . QUEST expr COLON expr
    (32) expr -> expr . INC
    (33) expr -> expr . DEC
    (37) expr -> expr . BITWISE_AND expr
    (38) expr -> expr . BITWISE_OR expr
    (39) expr -> expr . BITWISE_XOR expr
    (40) expr -> expr . OP expr
    (41) expr -> expr . PLUS expr
    (42) expr -> expr . MINUS expr
    (43) expr -> expr . TIMES expr
    (44) expr -> expr . DIV expr
    (45) expr -> expr . MOD expr
    (46) expr -> expr . AND expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . LSHIFT expr
    (49) expr -> expr . RSHIFT expr
    (50) expr -> expr . RSHIFT_EQUAL expr
    (51) expr -> expr . LSHIFT_EQUAL expr
    (52) expr -> expr . LSHIFT_LOGICAL expr
    (53) expr -> expr . RSHIFT_LOGICAL expr
    (54) expr -> expr . GREATER expr
    (55) expr -> expr . LESS expr
    (56) expr -> expr . LESS_EQUAL expr
    (57) expr -> expr . GREATER_EQUAL expr
    (58) expr -> expr . EQUAL expr
    (59) expr -> expr . NOT_EQUAL expr

    RPAREN          reduce using rule 27 (args -> args COMMA expr .)
    COMMA           reduce using rule 27 (args -> args COMMA expr .)
    UPDATE          shift and go to state 19
    PLUS_EQUAL      shift and go to state 20
    MINUS_EQUAL     shift and go to state 21
    OR_EQUAL        shift and go to state 22
    XOR_EQUAL       shift and go to state 23
    AND_EQUAL       shift and go to state 24
    DOT             shift and go to state 25
    LBRACE          shift and go to state 26
    COLON           shift and go to state 27
    QUEST           shift and go to state 28
    INC             shift and go to state 29
    DEC             shift and go to state 30
    BITWISE_AND     shift and go to state 31
    BITWISE_OR      shift and go to state 32
    BITWISE_XOR     shift and go to state 33
    OP              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    MOD             shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    RSHIFT_EQUAL    shift and go to state 44
    LSHIFT_EQUAL    shift and go to state 45
    LSHIFT_LOGICAL  shift and go to state 46
    RSHIFT_LOGICAL  shift and go to state 47
    GREATER         shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50
    GREATER_EQUAL   shift and go to state 51
    EQUAL           shift and go to state 52
    NOT_EQUAL       shift and go to state 53


state 121

    (17) stmt -> IF LPAREN expr RPAREN LBRACKET . stmts RBRACKET
    (18) stmt -> IF LPAREN expr RPAREN LBRACKET . stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (1) stmts -> . stmt
    (2) stmts -> . stmt SEMICOLON
    (3) stmts -> . stmts stmt
    (4) stmts -> . stmts stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 4
    stmts                          shift and go to state 126
    stmt                           shift and go to state 2

state 122

    (19) stmt -> IF LPAREN expr RPAREN stmt .

    SEMICOLON       reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    BREAK           reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    TYPE            reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    IF              reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    ID              reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    MODULE          reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    BITWISE_NOT     reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    NOP             reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    $end            reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)
    RBRACKET        reduce using rule 19 (stmt -> IF LPAREN expr RPAREN stmt .)


state 123

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty . SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty . SEMICOLON expr_empty RPAREN stmt

    SEMICOLON       shift and go to state 127


state 124

    (23) expr -> MODULE DOT ID LPAREN args . RPAREN
    (27) args -> args . COMMA expr

    RPAREN          shift and go to state 128
    COMMA           shift and go to state 113


state 125

    (30) expr -> expr LBRACE expr COLON expr RBRACE .

    COMMA           reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    UPDATE          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    PLUS_EQUAL      reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    MINUS_EQUAL     reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    OR_EQUAL        reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    XOR_EQUAL       reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    AND_EQUAL       reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    DOT             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    LBRACE          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    COLON           reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    QUEST           reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    INC             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    DEC             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    BITWISE_AND     reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    BITWISE_OR      reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    BITWISE_XOR     reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    OP              reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    PLUS            reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    MINUS           reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    TIMES           reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    DIV             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    MOD             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    AND             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    OR              reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    LSHIFT          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    RSHIFT          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    RSHIFT_EQUAL    reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    LSHIFT_EQUAL    reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    LSHIFT_LOGICAL  reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    RSHIFT_LOGICAL  reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    GREATER         reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    LESS            reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    LESS_EQUAL      reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    GREATER_EQUAL   reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    EQUAL           reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    NOT_EQUAL       reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    SEMICOLON       reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    BREAK           reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    TYPE            reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    IF              reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    FOR             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    ID              reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    MODULE          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    NOT             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    BITWISE_NOT     reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    LPAREN          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    NOP             reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    NUMBER          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    $end            reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    RPAREN          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    RBRACE          reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)
    RBRACKET        reduce using rule 30 (expr -> expr LBRACE expr COLON expr RBRACE .)


state 126

    (17) stmt -> IF LPAREN expr RPAREN LBRACKET stmts . RBRACKET
    (18) stmt -> IF LPAREN expr RPAREN LBRACKET stmts . RBRACKET ELSE LBRACKET stmts RBRACKET
    (3) stmts -> stmts . stmt
    (4) stmts -> stmts . stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    RBRACKET        shift and go to state 129
    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 4
    stmt                           shift and go to state 16

state 127

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON . expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON . expr_empty RPAREN stmt
    (15) expr_empty -> . expr
    (16) expr_empty -> .
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    RPAREN          reduce using rule 16 (expr_empty -> .)
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr_empty                     shift and go to state 130
    expr                           shift and go to state 105

state 128

    (23) expr -> MODULE DOT ID LPAREN args RPAREN .

    COMMA           reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    UPDATE          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    PLUS_EQUAL      reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    MINUS_EQUAL     reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    OR_EQUAL        reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    XOR_EQUAL       reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    AND_EQUAL       reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    DOT             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    LBRACE          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    COLON           reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    QUEST           reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    INC             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    DEC             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    BITWISE_AND     reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    BITWISE_OR      reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    BITWISE_XOR     reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    OP              reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    PLUS            reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    MINUS           reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    TIMES           reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    DIV             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    MOD             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    AND             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    OR              reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    LSHIFT          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    RSHIFT          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    RSHIFT_EQUAL    reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    LSHIFT_EQUAL    reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    LSHIFT_LOGICAL  reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    RSHIFT_LOGICAL  reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    GREATER         reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    LESS            reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    LESS_EQUAL      reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    GREATER_EQUAL   reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    EQUAL           reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    NOT_EQUAL       reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    BREAK           reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    TYPE            reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    IF              reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    FOR             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    ID              reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    MODULE          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    NOT             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    BITWISE_NOT     reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    LPAREN          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    NOP             reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    NUMBER          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    $end            reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    RBRACE          reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 23 (expr -> MODULE DOT ID LPAREN args RPAREN .)


state 129

    (17) stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .
    (18) stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET . ELSE LBRACKET stmts RBRACKET

    SEMICOLON       reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    BREAK           reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    TYPE            reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    IF              reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    FOR             reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    ID              reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    MODULE          reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    NOT             reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    MINUS           reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    BITWISE_NOT     reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    LPAREN          reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    NOP             reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    NUMBER          reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    $end            reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    RBRACKET        reduce using rule 17 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET .)
    ELSE            shift and go to state 131


state 130

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty . RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty . RPAREN stmt

    RPAREN          shift and go to state 132


state 131

    (18) stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE . LBRACKET stmts RBRACKET

    LBRACKET        shift and go to state 133


state 132

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN . LBRACKET stmts RBRACKET
    (21) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN . stmt
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    LBRACKET        shift and go to state 134
    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    stmt                           shift and go to state 135
    expr                           shift and go to state 4

state 133

    (18) stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET . stmts RBRACKET
    (1) stmts -> . stmt
    (2) stmts -> . stmt SEMICOLON
    (3) stmts -> . stmts stmt
    (4) stmts -> . stmts stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 4
    stmts                          shift and go to state 136
    stmt                           shift and go to state 2

state 134

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET . stmts RBRACKET
    (1) stmts -> . stmt
    (2) stmts -> . stmt SEMICOLON
    (3) stmts -> . stmts stmt
    (4) stmts -> . stmts stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    stmts                          shift and go to state 137
    stmt                           shift and go to state 2
    expr                           shift and go to state 4

state 135

    (21) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .

    SEMICOLON       reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    BREAK           reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    TYPE            reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    IF              reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    FOR             reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    ID              reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    MODULE          reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    NOT             reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    MINUS           reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    BITWISE_NOT     reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    LPAREN          reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    NOP             reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    NUMBER          reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    $end            reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)
    RBRACKET        reduce using rule 21 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt .)


state 136

    (18) stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts . RBRACKET
    (3) stmts -> stmts . stmt
    (4) stmts -> stmts . stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    RBRACKET        shift and go to state 138
    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    expr                           shift and go to state 4
    stmt                           shift and go to state 16

state 137

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts . RBRACKET
    (3) stmts -> stmts . stmt
    (4) stmts -> stmts . stmt SEMICOLON
    (5) stmt -> . BREAK
    (6) stmt -> . expr
    (7) stmt -> . TYPE ID UPDATE expr
    (9) stmt -> . expr COMMA expr UPDATE expr
    (17) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET
    (18) stmt -> . IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET
    (19) stmt -> . IF LPAREN expr RPAREN stmt
    (20) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET
    (21) stmt -> . FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN stmt
    (8) expr -> . expr UPDATE expr
    (10) expr -> . expr PLUS_EQUAL expr
    (11) expr -> . expr MINUS_EQUAL expr
    (12) expr -> . expr OR_EQUAL expr
    (13) expr -> . expr XOR_EQUAL expr
    (14) expr -> . expr AND_EQUAL expr
    (22) expr -> . ID LPAREN args RPAREN
    (23) expr -> . MODULE DOT ID LPAREN args RPAREN
    (24) expr -> . ID LPAREN RPAREN
    (25) expr -> . expr DOT ID
    (28) expr -> . expr LBRACE expr RBRACE
    (29) expr -> . expr COLON expr
    (30) expr -> . expr LBRACE expr COLON expr RBRACE
    (31) expr -> . expr QUEST expr COLON expr
    (32) expr -> . expr INC
    (33) expr -> . expr DEC
    (34) expr -> . NOT expr
    (35) expr -> . MINUS expr
    (36) expr -> . BITWISE_NOT expr
    (37) expr -> . expr BITWISE_AND expr
    (38) expr -> . expr BITWISE_OR expr
    (39) expr -> . expr BITWISE_XOR expr
    (40) expr -> . expr OP expr
    (41) expr -> . expr PLUS expr
    (42) expr -> . expr MINUS expr
    (43) expr -> . expr TIMES expr
    (44) expr -> . expr DIV expr
    (45) expr -> . expr MOD expr
    (46) expr -> . expr AND expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr LSHIFT expr
    (49) expr -> . expr RSHIFT expr
    (50) expr -> . expr RSHIFT_EQUAL expr
    (51) expr -> . expr LSHIFT_EQUAL expr
    (52) expr -> . expr LSHIFT_LOGICAL expr
    (53) expr -> . expr RSHIFT_LOGICAL expr
    (54) expr -> . expr GREATER expr
    (55) expr -> . expr LESS expr
    (56) expr -> . expr LESS_EQUAL expr
    (57) expr -> . expr GREATER_EQUAL expr
    (58) expr -> . expr EQUAL expr
    (59) expr -> . expr NOT_EQUAL expr
    (60) expr -> . LPAREN expr RPAREN
    (61) expr -> . NOP
    (62) expr -> . ID
    (63) expr -> . NUMBER

    RBRACKET        shift and go to state 139
    BREAK           shift and go to state 3
    TYPE            shift and go to state 5
    IF              shift and go to state 7
    FOR             shift and go to state 9
    ID              shift and go to state 6
    MODULE          shift and go to state 10
    NOT             shift and go to state 11
    MINUS           shift and go to state 12
    BITWISE_NOT     shift and go to state 13
    LPAREN          shift and go to state 8
    NOP             shift and go to state 14
    NUMBER          shift and go to state 15

    stmt                           shift and go to state 16
    expr                           shift and go to state 4

state 138

    (18) stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .

    SEMICOLON       reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    BREAK           reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    TYPE            reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    IF              reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    FOR             reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    ID              reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    MODULE          reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    NOT             reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    MINUS           reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    BITWISE_NOT     reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    LPAREN          reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    NOP             reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    NUMBER          reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    $end            reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)
    RBRACKET        reduce using rule 18 (stmt -> IF LPAREN expr RPAREN LBRACKET stmts RBRACKET ELSE LBRACKET stmts RBRACKET .)


state 139

    (20) stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .

    SEMICOLON       reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    BREAK           reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    TYPE            reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    IF              reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    FOR             reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    ID              reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    MODULE          reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    NOT             reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    MINUS           reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    BITWISE_NOT     reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    LPAREN          reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    NOP             reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    NUMBER          reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    $end            reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)
    RBRACKET        reduce using rule 20 (stmt -> FOR LPAREN expr_empty SEMICOLON expr_empty SEMICOLON expr_empty RPAREN LBRACKET stmts RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 4 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 6 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for DOT in state 66 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 66 resolved as shift
WARNING: shift/reduce conflict for COLON in state 66 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 66 resolved as shift
WARNING: shift/reduce conflict for INC in state 66 resolved as shift
WARNING: shift/reduce conflict for DEC in state 66 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 66 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 66 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 66 resolved as shift
WARNING: shift/reduce conflict for OP in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIV in state 66 resolved as shift
WARNING: shift/reduce conflict for MOD in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 66 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 66 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 66 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 66 resolved as shift
WARNING: shift/reduce conflict for LESS in state 66 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for DOT in state 67 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 67 resolved as shift
WARNING: shift/reduce conflict for COLON in state 67 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 67 resolved as shift
WARNING: shift/reduce conflict for INC in state 67 resolved as shift
WARNING: shift/reduce conflict for DEC in state 67 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 67 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 67 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 67 resolved as shift
WARNING: shift/reduce conflict for OP in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIV in state 67 resolved as shift
WARNING: shift/reduce conflict for MOD in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 67 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 67 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 67 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for DOT in state 68 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 68 resolved as shift
WARNING: shift/reduce conflict for COLON in state 68 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 68 resolved as shift
WARNING: shift/reduce conflict for INC in state 68 resolved as shift
WARNING: shift/reduce conflict for DEC in state 68 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 68 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 68 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 68 resolved as shift
WARNING: shift/reduce conflict for OP in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 68 resolved as shift
WARNING: shift/reduce conflict for DIV in state 68 resolved as shift
WARNING: shift/reduce conflict for MOD in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 68 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 68 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 68 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for DOT in state 69 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 69 resolved as shift
WARNING: shift/reduce conflict for COLON in state 69 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 69 resolved as shift
WARNING: shift/reduce conflict for INC in state 69 resolved as shift
WARNING: shift/reduce conflict for DEC in state 69 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 69 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 69 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 69 resolved as shift
WARNING: shift/reduce conflict for OP in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 69 resolved as shift
WARNING: shift/reduce conflict for DIV in state 69 resolved as shift
WARNING: shift/reduce conflict for MOD in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 69 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 69 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 69 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for DOT in state 70 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 70 resolved as shift
WARNING: shift/reduce conflict for COLON in state 70 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 70 resolved as shift
WARNING: shift/reduce conflict for INC in state 70 resolved as shift
WARNING: shift/reduce conflict for DEC in state 70 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 70 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 70 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 70 resolved as shift
WARNING: shift/reduce conflict for OP in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIV in state 70 resolved as shift
WARNING: shift/reduce conflict for MOD in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 70 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 70 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 70 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for DOT in state 78 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 78 resolved as shift
WARNING: shift/reduce conflict for COLON in state 78 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 78 resolved as shift
WARNING: shift/reduce conflict for INC in state 78 resolved as shift
WARNING: shift/reduce conflict for DEC in state 78 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 78 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 78 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 78 resolved as shift
WARNING: shift/reduce conflict for OP in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 78 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 78 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 78 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for DOT in state 88 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 88 resolved as shift
WARNING: shift/reduce conflict for COLON in state 88 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 88 resolved as shift
WARNING: shift/reduce conflict for INC in state 88 resolved as shift
WARNING: shift/reduce conflict for DEC in state 88 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 88 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 88 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 88 resolved as shift
WARNING: shift/reduce conflict for OP in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 88 resolved as shift
WARNING: shift/reduce conflict for DIV in state 88 resolved as shift
WARNING: shift/reduce conflict for MOD in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 88 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 88 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 88 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for UPDATE in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for OR_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for XOR_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for AND_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for DOT in state 89 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 89 resolved as shift
WARNING: shift/reduce conflict for COLON in state 89 resolved as shift
WARNING: shift/reduce conflict for QUEST in state 89 resolved as shift
WARNING: shift/reduce conflict for INC in state 89 resolved as shift
WARNING: shift/reduce conflict for DEC in state 89 resolved as shift
WARNING: shift/reduce conflict for BITWISE_AND in state 89 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 89 resolved as shift
WARNING: shift/reduce conflict for BITWISE_XOR in state 89 resolved as shift
WARNING: shift/reduce conflict for OP in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 89 resolved as shift
WARNING: shift/reduce conflict for DIV in state 89 resolved as shift
WARNING: shift/reduce conflict for MOD in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 89 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 89 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for LSHIFT_LOGICAL in state 89 resolved as shift
WARNING: shift/reduce conflict for RSHIFT_LOGICAL in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 89 resolved as shift
WARNING: reduce/reduce conflict in state 117 resolved using rule (expr -> expr UPDATE expr)
WARNING: rejected rule (stmt -> expr COMMA expr UPDATE expr) in state 117
WARNING: reduce/reduce conflict in state 119 resolved using rule (expr -> expr COLON expr)
WARNING: rejected rule (expr -> expr QUEST expr COLON expr) in state 119
