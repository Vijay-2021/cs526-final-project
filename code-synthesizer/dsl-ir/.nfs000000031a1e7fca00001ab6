============================================================
                     vector-load                          
============================================================
SIMD:  False
============================================================
--- vector_load_S64_N4_T8
---------> v0	| Symbolic Bitvector 64
---------> lane_size	| Lane Size 64
--------->	| Index Variable idx-i
---------> num_3	| Integer 4
---------> prec_i_o	| Precision 8 bits , Is Input  = True, Is Output = True
--- vector_load_S256_N8_T8
---------> v0	| Symbolic Bitvector 256
---------> lane_size	| Lane Size 256
--------->	| Index Variable idx-i
---------> num_3	| Integer 8
---------> prec_i_o	| Precision 8 bits , Is Input  = True, Is Output = True
--- vector_load_S1024_N16_T8
---------> v0	| Symbolic Bitvector 1024
---------> lane_size	| Lane Size 1024
--------->	| Index Variable idx-i
---------> num_3	| Integer 16
---------> prec_i_o	| Precision 8 bits , Is Input  = True, Is Output = True
============================================================
semantics:
(define (vector-load mem mem_size start num_elems type_size)
(define result
(apply
  concat
(for/list ([i (range num_elems)])
(scalar-load mem mem_size (+ i start) type_size))
))
result
)
============================================================
[]
============================================================
(define (grammar_layer vars #:depth k)
	(assert (> k 0))
	(cond
	[(choose* #t #f) (apply choose* vars)]
	[(choose* #t #f)
	(
		_mm256_set1_epi64x_dsl
		(grammar_layer vars #:depth (- k 1)) ;; 64-bit Bitvector operand
		256				;; Integer Operand 
		256				;; Lane Size 
		256				;; Integer Operand 
		64				;; Precision Operand 
		0				;; Integer Operand 
		0				;; Integer Operand 
	)]
	[(choose* #t #f)
	(
		_mm256_maskz_madd52lo_epu64_dsl
		(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))				;; 256-bit Constant Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 8-bit Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 256-bit Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 256-bit Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 256-bit Bitvector operand
		256				;; Integer Operand 
		256				;; Lane Size 
		208				;; Integer Operand 
		52				;; Integer Operand 
		0				;; Integer Operand 
		64				;; Precision Operand 
		52				;; Integer Operand 
		0				;; Integer Operand 
		128				;; Integer Operand 
	)]
	[(choose* #t #f)
	(
		_mm256_maskz_abs_epi32_dsl
		(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 256)))				;; 256-bit Constant Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 8-bit Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 256-bit Bitvector operand
		256				;; Integer Operand 
		256				;; Lane Size 
		256				;; Integer Operand 
		32				;; Precision Operand 
		0				;; Integer Operand 
	)]
	[(choose* #t #f)
	(
		_mm_maskz_cvtepu16_epi32_dsl
		(lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128)))				;; 128-bit Constant Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 8-bit Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 128-bit Bitvector operand
		128				;; Integer Operand 
		128				;; Lane Size 
		64				;; Integer Operand 
		16				;; Integer Operand 
		0				;; Integer Operand 
		32				;; Precision Operand 
	)]
	[(choose* #t #f)
	(
		_mm_adds_pi8_dsl
		(grammar_layer vars #:depth (- k 1)) ;; 64-bit Bitvector operand
		(grammar_layer vars #:depth (- k 1)) ;; 64-bit Bitvector operand
		64				;; Integer Operand 
		64				;; Lane Size 
		64				;; Integer Operand 
		8				;; Precision Operand 
		0				;; Integer Operand 
	)]
	)
)

