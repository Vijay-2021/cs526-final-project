;#============================== Hydride File =================================
;#
;# Part of the Hydride Compiler Infrastructure.
;# <Placeholder for license information>
;#
;#=============================================================================
;#
;# Do NOT modify this file. It is automatically generated.
;#
;#=============================================================================

#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require rosette/lib/destruct)

(require hydride/utils/bvops)
(require hydride/utils/misc)


(require hydride/ir/hydride/definition)
(require hydride/ir/arm/definition)
(require hydride/ir/arm/printer)

(provide (all-defined-out))
;; ================================================================================
;;                                DSL Get Variants
;; ================================================================================
(define (arm:get-variants prog input-sizes input-precs)
 (cond 
		[(equal? prog vector-two-input-swizzle_dsl)
		(define input-precs-dsl (list  8  ))
		(define input-size-dsl (list   (list 64 64 ) ) )
		(define variants (list (vector-two-input-swizzle_dsl (reg (bv 0 8)) (reg (bv 1 8)) 6 8 0 3 3 1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog interleave-vectors_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog interleave-vector_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 ) ) )
		(define variants (list (interleave-vector_dsl (reg (bv 0 8)) 128 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog deinterleave-vector_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 ) ) )
		(define variants (list (deinterleave-vector_dsl (reg (bv 0 8)) 128 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm_shuffle_vectors_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 128 ) ) )
		(define variants (list (llvm_shuffle_vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 (reg (bv 2 8)) 4 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-add_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-add_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-sub_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-sub_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-mul_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-mul_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-sdiv_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-sdiv_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-udiv_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-udiv_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vraddhn_s32_dsl)
		(define input-precs-dsl (list  32 16 16 16 64 32 16 32 64 64 64 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vraddhn_s32_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vraddhn_s32_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vraddhn_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vraddhn_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmla_n_s32_dsl)
		(define input-precs-dsl (list  32 32 32 32  ))
		(define input-size-dsl (list   (list 64 64 32 ) (list 128 128 32 ) (list 128 128 32 ) (list 64 64 32 ) ) )
		(define variants (list (vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmull_n_u16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 64 16 ) (list 64 16 ) ) )
		(define variants (list (vmull_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 32 2 0 0 ) 
(vmull_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 32 2 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlaq_n_u16_dsl)
		(define input-precs-dsl (list  16 16 16 16  ))
		(define input-size-dsl (list   (list 128 128 16 ) (list 64 64 16 ) (list 64 64 16 ) (list 128 128 16 ) ) )
		(define variants (list (vmlaq_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vmlaq_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vmlaq_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vmlaq_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqsub_u8_dsl)
		(define input-precs-dsl (list  8 16 64 64 16 64 32 64 16 32 8 8 64 8 16 32 64 16 16 8 32 8 32 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 16 16 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 8 8 ) (list 128 128 ) (list 8 8 ) (list 64 64 ) (list 32 32 ) (list 64 64 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vqsub_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpminq_s32_dsl)
		(define input-precs-dsl (list  32 32 8 8 8 16 32 16 32 16 8 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 8 8 1 4 1 8 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 16 16 1 8 1 16 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 8 8 1 4 1 8 2 ) 
(vpminq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 16 16 1 8 1 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmull_n_s16_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 64 16 ) ) )
		(define variants (list (vqdmull_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 32 2 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vuqaddq_s8_dsl)
		(define input-precs-dsl (list  8 32 64 32 8 64 16 16 8 64 16 16 64 64 32 64 32 8 8 32 8 16 16 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 128 128 ) (list 8 8 ) (list 64 64 ) (list 16 16 ) (list 64 64 ) (list 8 8 ) (list 64 64 ) (list 128 128 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 0 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 1 ) 
(vuqaddq_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcgtzq_s64_dsl)
		(define input-precs-dsl (list  64 32 16 8 64 32 8 16 64  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 64 ) ) )
		(define variants (list (vcgtzq_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vcgtzq_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmulhq_n_s32_dsl)
		(define input-precs-dsl (list  32 32 32 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) ) )
		(define variants (list (vqdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 -1 1 ) 
(vqdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 -1 1 ) 
(vqdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 -1 1 ) 
(vqdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqabs_s8_dsl)
		(define input-precs-dsl (list  8 64 64 8 32 32 32 16 16 8 64 16  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 128 ) (list 8 ) (list 128 ) (list 64 ) (list 32 ) (list 16 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 8 8 0 8 8 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 32 32 0 32 32 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 16 16 0 16 16 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmovn_u64_dsl)
		(define input-precs-dsl (list  32 32 16 16 8 8  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) ) )
		(define variants (list (vmovn_u64_dsl (reg (bv 0 8)) 64 64 0 64 32 2 ) 
(vmovn_u64_dsl (reg (bv 0 8)) 64 64 0 64 32 2 ) 
(vmovn_u64_dsl (reg (bv 0 8)) 64 64 0 64 16 2 ) 
(vmovn_u64_dsl (reg (bv 0 8)) 64 64 0 64 16 2 ) 
(vmovn_u64_dsl (reg (bv 0 8)) 64 64 0 64 8 2 ) 
(vmovn_u64_dsl (reg (bv 0 8)) 64 64 0 64 8 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vabd_u16_dsl)
		(define input-precs-dsl (list  16 32 16 16 32 8 8 16 8 32 32 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vabd_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 -1 0 0 ) 
(vabd_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 0 -1 0 0 ) 
(vabd_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 0 -1 0 0 ) 
(vabd_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 0 -1 1 1 ) 
(vabd_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 0 -1 1 1 ) 
(vabd_u16_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 -1 1 1 ) 
(vabd_u16_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 0 -1 1 1 ) 
(vabd_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 -1 1 1 ) 
(vabd_u16_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 -1 0 0 ) 
(vabd_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 -1 0 0 ) 
(vabd_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 -1 1 1 ) 
(vabd_u16_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlals_s32_dsl)
		(define input-precs-dsl (list  32 16 16 32  ))
		(define input-size-dsl (list   (list 64 32 32 ) (list 32 16 16 ) (list 128 64 64 ) (list 128 64 64 ) ) )
		(define variants (list (vqdmlals_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 64 1 -1 1 1 2 1 64 1 1 ) 
(vqdmlals_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 16 32 1 -1 1 1 2 1 32 1 1 ) 
(vqdmlals_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 1 -1 1 1 2 1 32 1 1 ) 
(vqdmlals_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 1 -1 1 1 2 1 64 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmul_n_s32_dsl)
		(define input-precs-dsl (list  32 32 32 32  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vmul_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmul_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmul_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
(vmul_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsubl_s8_dsl)
		(define input-precs-dsl (list  8 32 16 16 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vsubl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 1 1 ) 
(vsubl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 0 0 ) 
(vsubl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 1 1 ) 
(vsubl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 0 0 ) 
(vsubl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 0 0 ) 
(vsubl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmvnq_s8_dsl)
		(define input-precs-dsl (list  8 8 8 8 8 8 8 8 8 8 8 8  ))
		(define input-size-dsl (list   (list 128 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vmvnq_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvnq_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsraq_n_s32_dsl)
		(define input-precs-dsl (list  32 8 16 32 64 64 64 16 8  ))
		(define input-size-dsl (list   (list 128 128 192 ) (list 64 64 192 ) (list 64 64 192 ) (list 64 64 192 ) (list 64 64 192 ) (list 64 64 192 ) (list 128 128 192 ) (list 128 128 192 ) (list 128 128 192 ) ) )
		(define variants (list (vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 64 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 -1 1 ) 
(vsraq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsubhn_s32_dsl)
		(define input-precs-dsl (list  32 16 16 32 64 64 32 16 64 64 32 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vsubhn_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vsubhn_s32_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vsubhn_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vsubhn_s32_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vsubhn_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vclt_u32_dsl)
		(define input-precs-dsl (list  32 16 32 8 64 32 64 64 8 16 64 64 16 64 8 16 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vclt_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vclt_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vclt_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqmovn_s32_dsl)
		(define input-precs-dsl (list  32 64 32 64 64 16 32 16 16 32 64 16 32 16 64 16 32 64  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 32 ) (list 64 ) (list 128 ) (list 16 ) (list 32 ) (list 16 ) (list 128 ) (list 128 ) (list 128 ) (list 16 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) (list 32 ) (list 64 ) ) )
		(define variants (list (vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 16 1 1 32 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 32 0 0 64 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 16 16 0 16 16 0 0 32 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 32 32 0 32 32 0 0 64 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 32 0 1 64 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 8 8 0 8 8 0 0 16 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 16 16 0 16 16 0 1 32 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 8 8 0 8 8 0 1 16 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 8 0 0 16 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 16 0 0 32 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 32 1 1 64 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 8 8 0 8 8 1 1 16 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 16 0 1 32 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 8 0 1 16 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 32 32 0 32 32 1 1 64 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 64 64 0 64 8 1 1 16 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 16 16 0 16 16 1 1 32 2 ) 
(vqmovn_s32_dsl (reg (bv 0 8)) 32 32 0 32 32 0 1 64 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vceqzq_s64_dsl)
		(define input-precs-dsl (list  64 16 32 8 64 8 32 64 32 64 16 16 8 64 32 16 8 64  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) 128 128 0 128 64 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) 128 128 0 128 16 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) 64 64 0 64 32 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) 64 64 0 64 8 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) 64 64 0 64 64 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) 128 128 0 128 8 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) 64 64 0 64 32 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) 128 128 0 128 64 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) 128 128 0 128 32 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) 64 64 0 64 64 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) 64 64 0 64 16 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) 128 128 0 128 16 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) 128 128 0 128 8 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) 64 64 0 64 64 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) 128 128 0 128 32 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) 64 64 0 64 16 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) 64 64 0 64 8 1 ) 
(vceqzq_s64_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) 64 64 0 64 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlal_s32_dsl)
		(define input-precs-dsl (list  32 16 8 8 16 32  ))
		(define input-size-dsl (list   (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) ) )
		(define variants (list (vmlal_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 1 1 ) 
(vmlal_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 1 1 ) 
(vmlal_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 0 0 ) 
(vmlal_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 1 1 ) 
(vmlal_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 0 0 ) 
(vmlal_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmovq_n_u8_dsl)
		(define input-precs-dsl (list  8 8 32 32 8 32 16 8 16 32 32 32 64 16 16 16 64 64 32 8 32 8 16 64 8 16 8 16  ))
		(define input-size-dsl (list   (list 8 ) (list 8 ) (list 32 ) (list 32 ) (list 8 ) (list 32 ) (list 16 ) (list 8 ) (list 16 ) (list 32 ) (list 32 ) (list 32 ) (list 64 ) (list 16 ) (list 16 ) (list 16 ) (list 64 ) (list 64 ) (list 32 ) (list 8 ) (list 32 ) (list 8 ) (list 16 ) (list 64 ) (list 8 ) (list 16 ) (list 8 ) (list 16 ) ) )
		(define variants (list (vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmovq_n_u8_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 28)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrhaddq_s8_dsl)
		(define input-precs-dsl (list  8 16 8 32 8 16 32 16 8 32 32 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 -1 1 1 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 -1 1 1 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 -1 1 1 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 -1 0 0 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 -1 0 0 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 -1 0 0 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 -1 1 1 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 -1 0 0 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 -1 0 0 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 -1 0 0 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 -1 1 1 ) 
(vrhaddq_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vtst_s8_dsl)
		(define input-precs-dsl (list  8 8 32 8 64 64 32 16 8 64 16 64 32 16 16 64 64 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vtst_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(vtst_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(vtst_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(vtst_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 ) 
(vtst_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(vtst_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vtst_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vtst_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vtst_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmls_n_s16_dsl)
		(define input-precs-dsl (list  16 16 16 16  ))
		(define input-size-dsl (list   (list 64 64 16 ) (list 128 128 16 ) (list 64 64 16 ) (list 128 128 16 ) ) )
		(define variants (list (vmls_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vmls_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vmls_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vmls_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcgt_u16_dsl)
		(define input-precs-dsl (list  16 8 64 64 64 64 64 32 32 32 8 16 64 8 16 16 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vcgt_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vcgt_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
(vcgt_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsub_s64_dsl)
		(define input-precs-dsl (list  64 8 8 16 32 16 64 8 64 8 16 32 32 64 64 64 16 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(vsub_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vceq_s8_dsl)
		(define input-precs-dsl (list  8 8 64 8 64 16 16 64 32 64 32 16 64 8 32 32 16 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) (lit (bv #x00000000 (bitvector 8))) 64 64 0 64 8 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) (lit (bv #x00000000 (bitvector 8))) 64 64 0 64 8 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) 128 128 0 128 64 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) (lit (bv #x00000000 (bitvector 8))) 128 128 0 128 8 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) 64 64 0 64 64 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) (lit (bv #x0000000000000000 (bitvector 16))) 128 128 0 128 16 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) (lit (bv #x0000000000000000 (bitvector 16))) 64 64 0 64 16 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) 64 64 0 64 64 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) 64 64 0 64 32 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) 64 64 0 64 64 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) 128 128 0 128 32 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) (lit (bv #x0000000000000000 (bitvector 16))) 64 64 0 64 16 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) 128 128 0 128 64 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) (lit (bv #x00000000 (bitvector 8))) 128 128 0 128 8 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) 64 64 0 64 32 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) 128 128 0 128 32 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) (lit (bv #x0000000000000000 (bitvector 16))) 128 128 0 128 16 ) 
(vceq_s8_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) 64 64 0 64 64 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlaq_s32_dsl)
		(define input-precs-dsl (list  32 8 8 16 16 8 16 32 32 32 8 16  ))
		(define input-size-dsl (list   (list 128 128 128 ) (list 128 128 128 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 64 64 64 ) (list 64 64 64 ) ) )
		(define variants (list (vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmlaq_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vabdl_s8_dsl)
		(define input-precs-dsl (list  8 16 32 16 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vabdl_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 -1 2 0 -1 1 1 ) 
(vabdl_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 -1 2 0 -1 0 0 ) 
(vabdl_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 -1 2 0 -1 1 1 ) 
(vabdl_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 -1 2 0 -1 1 1 ) 
(vabdl_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 -1 2 0 -1 0 0 ) 
(vabdl_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 -1 2 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlsl_n_s32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 128 64 32 ) (list 128 64 32 ) ) )
		(define variants (list (vmlsl_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 -1 2 0 1 ) 
(vmlsl_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 64 -1 2 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrsra_n_u8_dsl)
		(define input-precs-dsl (list  8 64 64 32 64 16 16 8 32  ))
		(define input-size-dsl (list   (list 64 64 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) ) )
		(define variants (list (vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 64 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 1 -1 0 -1 0 -1 0 ) 
(vrsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 1 -1 0 -1 0 -1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vadd_u64_dsl)
		(define input-precs-dsl (list  64 8 16 64 64 64 32 32 8 16 8 64 32 8 16 16 64 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmull_n_s32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) ) )
		(define variants (list (vmull_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 64 2 0 1 ) 
(vmull_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 64 2 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vhadd_u8_dsl)
		(define input-precs-dsl (list  8 8 16 32 32 8 16 32 16 16 32 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 0 0 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 0 0 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 0 0 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 0 0 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 0 0 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 0 0 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vhadd_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vtrn1_u16_dsl)
		(define input-precs-dsl (list  16 8 8 64 8 16 64 16 32 32 32 8 32 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 2 16 1 8 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 2 8 1 4 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 2 8 1 4 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 2 64 1 32 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 2 8 1 4 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 2 16 1 8 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 2 64 1 32 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 2 16 1 8 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 2 32 1 16 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 2 32 1 16 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 2 32 1 16 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 2 8 1 4 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 2 32 1 16 ) 
(vtrn1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 2 16 1 8 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmull_u32_dsl)
		(define input-precs-dsl (list  32 16 8 8 16 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vmull_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 0 0 ) 
(vmull_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 1 1 ) 
(vmull_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 0 0 ) 
(vmull_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 1 1 ) 
(vmull_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 0 0 ) 
(vmull_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsra_n_u8_dsl)
		(define input-precs-dsl (list  8 64 32 64 16 32 64 8 16  ))
		(define input-size-dsl (list   (list 64 64 192 ) (list 64 64 192 ) (list 64 64 192 ) (list 128 128 192 ) (list 128 128 192 ) (list 128 128 192 ) (list 64 64 192 ) (list 128 128 192 ) (list 64 64 192 ) ) )
		(define variants (list (vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 64 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 -1 0 ) 
(vsra_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 -1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmull_s32_dsl)
		(define input-precs-dsl (list  32 32 16 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 32 32 ) (list 16 16 ) (list 64 64 ) ) )
		(define variants (list (vqdmull_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 2 1 1 1 ) 
(vqdmull_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 64 2 1 1 1 ) 
(vqdmull_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 32 2 1 1 1 ) 
(vqdmull_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 2 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmaxq_u16_dsl)
		(define input-precs-dsl (list  16 16 8 16 8 32 32 8 8 32 16 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 0 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 1 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 0 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 0 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 1 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 1 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 0 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 0 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 1 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 0 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 1 ) 
(vmaxq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vzip1_s32_dsl)
		(define input-precs-dsl (list  32 64 32 8 16 16 8 16 8 8 32 64 16 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 32 1 16 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 64 1 32 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 32 1 16 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 8 1 4 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 16 1 8 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 16 1 8 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 8 1 4 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 16 1 8 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 8 1 4 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 8 1 4 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 32 1 16 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 64 1 32 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 16 1 8 ) 
(vzip1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 32 1 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcgeq_u32_dsl)
		(define input-precs-dsl (list  32 16 8 8 16 32 32 64 64 16 64 16 64 8 64 32 8 64  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vcgeq_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vcgeq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqneg_s32_dsl)
		(define input-precs-dsl (list  32 64 32 16 64 8 16 32 8 64 16 8  ))
		(define input-size-dsl (list   (list 64 ) (list 128 ) (list 32 ) (list 16 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) (list 8 ) ) )
		(define variants (list (vqneg_s32_dsl (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 32 32 0 32 32 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 16 16 0 16 16 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vqneg_s32_dsl (reg (bv 0 8)) 8 8 0 8 8 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlsl_n_s16_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 64 16 ) ) )
		(define variants (list (vqdmlsl_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 1 -1 1 1 2 1 32 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmulq_u8_dsl)
		(define input-precs-dsl (list  8 8 32 8 32 16 16 16 32 16 32 8  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmulq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vtrn2_s32_dsl)
		(define input-precs-dsl (list  32 32 16 16 8 16 8 16 8 64 32 64 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 16 2 32 1 16 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 16 2 32 1 16 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 32 2 64 1 32 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 1 16 2 32 1 16 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 32 2 64 1 32 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 1 16 2 32 1 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcltz_s32_dsl)
		(define input-precs-dsl (list  32 64 32 16 16 8 64 8 64  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vcltz_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vcltz_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcltz_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vcltz_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vcltz_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vcltz_s32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vcltz_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcltz_s32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vcltz_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmulh_s16_dsl)
		(define input-precs-dsl (list  16 32 16 16 32 32 32 32 32 16 16 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 32 32 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 32 32 ) (list 16 16 ) (list 16 16 ) (list 64 64 ) ) )
		(define variants (list (vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpaddq_u64_dsl)
		(define input-precs-dsl (list  64 8 32 8 16 32 32 64 16 16 8 16 8 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 64 0 128 64 -1 64 32 64 ) 
(vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 8 0 16 8 -1 8 4 8 ) 
(vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 32 0 64 32 -1 32 16 32 ) 
(vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 8 0 16 8 -1 8 4 8 ) 
(vpaddq_u64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 32 0 64 32 -1 32 16 32 ) 
(vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 32 0 64 32 -1 32 16 32 ) 
(vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 64 0 128 64 -1 64 32 64 ) 
(vpaddq_u64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 8 0 16 8 -1 8 4 8 ) 
(vpaddq_u64_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 8 0 16 8 -1 8 4 8 ) 
(vpaddq_u64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 32 0 64 32 -1 32 16 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlal_n_u32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 128 64 32 ) (list 128 64 32 ) ) )
		(define variants (list (vmlal_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 64 -1 2 0 0 ) 
(vmlal_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 -1 2 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlsq_u16_dsl)
		(define input-precs-dsl (list  16 32 32 16 8 16 32 8 8 32 16 8  ))
		(define input-size-dsl (list   (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) ) )
		(define variants (list (vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
(vmlsq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vuzp2_s16_dsl)
		(define input-precs-dsl (list  16 16 64 8 8 32 32 32 8 16 32 64 8 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 1 8 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 1 8 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 64 1 32 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 8 1 4 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 1 4 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 32 1 16 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 1 16 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 32 1 16 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 8 1 4 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 16 1 8 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 1 16 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 64 1 32 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 1 4 ) 
(vuzp2_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 16 1 8 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vclezq_s8_dsl)
		(define input-precs-dsl (list  8 16 32 64 64 64 32 8 16  ))
		(define input-size-dsl (list   (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vclezq_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vclezq_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vclezq_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vclezq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vclezq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vclezq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vclezq_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vclezq_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vclezq_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vhsubq_u16_dsl)
		(define input-precs-dsl (list  16 32 8 32 8 8 32 32 16 8 16 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 0 0 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 0 0 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 0 0 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 0 0 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 0 0 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 0 0 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vhsubq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlal_n_s16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 128 64 16 ) (list 128 64 16 ) ) )
		(define variants (list (vmlal_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 -1 2 0 1 ) 
(vmlal_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 32 -1 2 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vuzp1_u16_dsl)
		(define input-precs-dsl (list  16 16 32 8 8 64 8 32 64 32 8 32 16 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 2 ) 
(vuzp1_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmulhq_n_s16_dsl)
		(define input-precs-dsl (list  16 16 16 16  ))
		(define input-size-dsl (list   (list 128 16 ) (list 64 16 ) (list 64 16 ) (list 128 16 ) ) )
		(define variants (list (vqdmulhq_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 -1 1 ) 
(vqdmulhq_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 -1 1 ) 
(vqdmulhq_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 -1 1 ) 
(vqdmulhq_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vabs_s32_dsl)
		(define input-precs-dsl (list  32 64 64 16 16 64 32 8 8  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) ) )
		(define variants (list (vabs_s32_dsl (reg (bv 0 8)) 64 64 0 64 32 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 64 64 0 64 16 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 128 128 0 128 16 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 128 128 0 128 64 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 128 128 0 128 32 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 128 128 0 128 8 0 1 ) 
(vabs_s32_dsl (reg (bv 0 8)) 64 64 0 64 8 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vaddl_u8_dsl)
		(define input-precs-dsl (list  8 16 32 16 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vaddl_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 0 0 ) 
(vaddl_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 1 1 ) 
(vaddl_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 0 0 ) 
(vaddl_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 0 0 ) 
(vaddl_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 1 1 ) 
(vaddl_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vneg_s8_dsl)
		(define input-precs-dsl (list  8 16 32 64 8 32 16 64 64  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vneg_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 64 64 0 64 16 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 128 128 0 128 32 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 64 64 0 64 32 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 128 128 0 128 16 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
(vneg_s8_dsl (reg (bv 0 8)) 128 128 0 128 64 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlsls_s32_dsl)
		(define input-precs-dsl (list  32 16 32 16  ))
		(define input-size-dsl (list   (list 64 32 32 ) (list 32 16 16 ) (list 128 64 64 ) (list 128 64 64 ) ) )
		(define variants (list (vqdmlsls_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 64 1 -1 1 1 2 1 64 1 1 ) 
(vqdmlsls_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 16 32 1 -1 1 1 2 1 32 1 1 ) 
(vqdmlsls_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 1 -1 1 1 2 1 64 1 1 ) 
(vqdmlsls_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 1 -1 1 1 2 1 32 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpmax_u32_dsl)
		(define input-precs-dsl (list  32 16 16 32 8 8 16 8 8 32 32 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 16 16 1 8 1 16 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 8 8 1 4 1 8 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 8 8 1 4 1 8 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpmax_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 16 16 1 8 1 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmull_n_s32_dsl)
		(define input-precs-dsl (list  32  ))
		(define input-size-dsl (list   (list 64 32 ) ) )
		(define variants (list (vqdmull_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 64 2 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsubw_s8_dsl)
		(define input-precs-dsl (list  16 32 64 16 32 64  ))
		(define input-size-dsl (list   (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) ) )
		(define variants (list (vsubw_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 1 1 2 ) 
(vsubw_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 1 1 2 ) 
(vsubw_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 1 1 2 ) 
(vsubw_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 0 0 2 ) 
(vsubw_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 0 0 2 ) 
(vsubw_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 0 0 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcle_s64_dsl)
		(define input-precs-dsl (list  64 32 8 16 64 16 64 32 16 8 32 64 16 8 32 64 64 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vcle_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcle_s64_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqadd_u64_dsl)
		(define input-precs-dsl (list  64 64 16 32 64 32 8 32 16 16 8 8 16 32 64 16 64 32 16 8 64 8 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 16 16 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 8 8 ) (list 64 64 ) (list 128 128 ) (list 16 16 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 8 8 ) (list 64 64 ) ) )
		(define variants (list (vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 0 0 ) 
(vqadd_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlal_n_s16_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 64 16 ) ) )
		(define variants (list (vqdmlal_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 1 -1 1 1 2 1 32 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlsl_n_s32_dsl)
		(define input-precs-dsl (list  32  ))
		(define input-size-dsl (list   (list 128 64 32 ) ) )
		(define variants (list (vqdmlsl_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 1 -1 1 1 2 1 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlsl_n_u16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 128 64 16 ) (list 128 64 16 ) ) )
		(define variants (list (vmlsl_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 32 -1 2 0 0 ) 
(vmlsl_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 -1 2 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vminq_u16_dsl)
		(define input-precs-dsl (list  16 16 8 32 16 8 16 8 8 32 32 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 0 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 0 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 0 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 1 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 1 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 0 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 1 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 1 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 1 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 0 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 0 ) 
(vminq_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlsl_u16_dsl)
		(define input-precs-dsl (list  16 8 32 16 8 32  ))
		(define input-size-dsl (list   (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) ) )
		(define variants (list (vmlsl_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 0 0 ) 
(vmlsl_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 0 0 ) 
(vmlsl_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 0 0 ) 
(vmlsl_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 1 1 ) 
(vmlsl_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 1 1 ) 
(vmlsl_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcgez_s16_dsl)
		(define input-precs-dsl (list  16 64 32 64 64 32 8 16 8  ))
		(define input-size-dsl (list   (list 64 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) ) )
		(define variants (list (vcgez_s16_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vcgez_s16_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmulq_n_s16_dsl)
		(define input-precs-dsl (list  16 16 16 16  ))
		(define input-size-dsl (list   (list 128 16 ) (list 64 16 ) (list 128 16 ) (list 64 16 ) ) )
		(define variants (list (vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
(vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
(vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
(vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlal_n_s32_dsl)
		(define input-precs-dsl (list  32  ))
		(define input-size-dsl (list   (list 128 64 32 ) ) )
		(define variants (list (vqdmlal_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 1 -1 1 1 2 1 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmls_n_s32_dsl)
		(define input-precs-dsl (list  32 32 32 32  ))
		(define input-size-dsl (list   (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 128 128 32 ) ) )
		(define variants (list (vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vaddw_s16_dsl)
		(define input-precs-dsl (list  32 16 16 64 64 32  ))
		(define input-size-dsl (list   (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) ) )
		(define variants (list (vaddw_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 1 1 2 ) 
(vaddw_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 0 0 2 ) 
(vaddw_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 1 1 2 ) 
(vaddw_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 0 0 2 ) 
(vaddw_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 1 1 2 ) 
(vaddw_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 0 0 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmovl_s16_dsl)
		(define input-precs-dsl (list  16 8 32 16 8 32  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vmovl_s16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) 64 64 0 64 16 32 0 2 -1 1 1 ) 
(vmovl_s16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) 64 64 0 64 8 16 0 2 -1 1 1 ) 
(vmovl_s16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) 64 64 0 64 32 64 0 2 -1 1 0 ) 
(vmovl_s16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) 64 64 0 64 16 32 0 2 -1 1 0 ) 
(vmovl_s16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) 64 64 0 64 8 16 0 2 -1 1 0 ) 
(vmovl_s16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) 64 64 0 64 32 64 0 2 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vzip2_s8_dsl)
		(define input-precs-dsl (list  8 32 16 32 16 16 32 32 64 8 16 8 64 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 4 2 8 8 4 8 1 4 8 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 2 2 32 32 2 32 1 16 32 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 4 2 16 16 4 16 1 8 16 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 2 32 32 1 32 1 16 32 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 2 2 16 16 2 16 1 8 16 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 4 2 16 16 4 16 1 8 16 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 2 32 32 1 32 1 16 32 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 2 2 32 32 2 32 1 16 32 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 2 64 64 1 64 1 32 64 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 8 2 8 8 8 8 1 4 8 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 2 2 16 16 2 16 1 8 16 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 8 2 8 8 8 8 1 4 8 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 2 64 64 1 64 1 32 64 ) 
(vzip2_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 4 2 8 8 4 8 1 4 8 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshr_n_s8_dsl)
		(define input-precs-dsl (list  8 64 32 64 16 8 16 64 32  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 128 64 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) (list 64 32 ) (list 64 32 ) ) )
		(define variants (list (vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 1 ) 
(vshr_n_s8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrshrnd_n_s64_dsl)
		(define input-precs-dsl (list  64 32 16 64 16 64 16 32 64 32 32 16  ))
		(define input-size-dsl (list   (list 64 32 ) (list 128 32 ) (list 16 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 16 32 ) (list 128 32 ) (list 64 32 ) (list 32 32 ) (list 32 32 ) (list 128 32 ) ) )
		(define variants (list (vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 1 -1 0 1 -1 1 64 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 1 -1 0 1 -1 1 32 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 1 -1 0 0 -1 1 16 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 1 -1 0 0 -1 1 64 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 1 -1 0 1 -1 1 16 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 1 -1 0 1 -1 1 64 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 1 -1 0 1 -1 1 16 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 1 -1 0 0 -1 1 32 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 1 -1 0 0 -1 1 64 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 1 -1 0 1 -1 1 32 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 1 -1 0 0 -1 1 32 2 ) 
(vqrshrnd_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 1 -1 0 0 -1 1 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshrunh_n_s16_dsl)
		(define input-precs-dsl (list  16 64 64 64 32 64 32 32 32 16 16 16  ))
		(define input-size-dsl (list   (list 16 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 32 32 ) (list 64 32 ) (list 32 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 16 32 ) ) )
		(define variants (list (vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 0 -1 1 16 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 -1 1 64 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 0 -1 1 64 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 -1 1 64 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 1 -1 1 32 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 1 -1 1 64 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 0 -1 1 32 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 -1 1 32 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 -1 1 32 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 -1 1 16 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 -1 1 16 2 ) 
(vqshrunh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 1 -1 1 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshr_n_u32_dsl)
		(define input-precs-dsl (list  32 16 16 64 8 8 64 32 64  ))
		(define input-size-dsl (list   (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) ) )
		(define variants (list (vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 -1 0 ) 
(vshr_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshr_n_s64_dsl)
		(define input-precs-dsl (list  64 64 8 32 32 64 16 8 16  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) (list 64 32 ) (list 64 32 ) (list 128 32 ) ) )
		(define variants (list (vrshr_n_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 1 -1 0 -1 0 -1 1 ) 
(vrshr_n_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 1 -1 0 -1 0 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshrn_n_s64_dsl)
		(define input-precs-dsl (list  64 16 16 64 32 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 1 -1 0 0 -1 0 64 2 ) 
(vrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 1 -1 0 0 -1 0 16 2 ) 
(vrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 1 -1 0 0 -1 0 16 2 ) 
(vrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 1 -1 0 0 -1 0 64 2 ) 
(vrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 1 -1 0 0 -1 0 32 2 ) 
(vrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 1 -1 0 0 -1 0 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshrn_n_u32_dsl)
		(define input-precs-dsl (list  32 16 16 32 64 64  ))
		(define input-size-dsl (list   (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 -1 0 32 2 ) 
(vshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 -1 0 16 2 ) 
(vshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 -1 0 16 2 ) 
(vshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 -1 0 32 2 ) 
(vshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 -1 0 64 2 ) 
(vshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 -1 0 64 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshrn_n_u32_dsl)
		(define input-precs-dsl (list  32 32 16 16 64 64  ))
		(define input-size-dsl (list   (list 128 32 ) (list 32 32 ) (list 128 32 ) (list 16 32 ) (list 128 32 ) (list 64 32 ) ) )
		(define variants (list (vqshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 -1 0 32 2 ) 
(vqshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 0 -1 0 32 2 ) 
(vqshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 -1 0 16 2 ) 
(vqshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 0 -1 0 16 2 ) 
(vqshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 -1 0 64 2 ) 
(vqshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 0 -1 0 64 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrshrns_n_u32_dsl)
		(define input-precs-dsl (list  32 64 16 64 16 32  ))
		(define input-size-dsl (list   (list 32 32 ) (list 128 32 ) (list 128 32 ) (list 64 32 ) (list 16 32 ) (list 128 32 ) ) )
		(define variants (list (vqrshrns_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 1 -1 0 0 -1 0 32 2 ) 
(vqrshrns_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 1 -1 0 0 -1 0 64 2 ) 
(vqrshrns_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 1 -1 0 0 -1 0 16 2 ) 
(vqrshrns_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 1 -1 0 0 -1 0 64 2 ) 
(vqrshrns_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 1 -1 0 0 -1 0 16 2 ) 
(vqrshrns_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 1 -1 0 0 -1 0 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshld_s64_dsl)
		(define input-precs-dsl (list  64 8 8 32 32 8 16 8 64 16 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 -1 1 -1 1 -1 1 -1 1 ) 
(vrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 1 -1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 11)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshls_s32_dsl)
		(define input-precs-dsl (list  32 16 16 64 8 32 32 64 64 16 8 8  ))
		(define input-size-dsl (list   (list 32 32 ) (list 64 64 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 8 8 ) ) )
		(define variants (list (vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 -1 1 1 ) 
(vqshls_s32_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshll_n_u16_dsl)
		(define input-precs-dsl (list  16 8 16 32 32 8  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 64 32 ) ) )
		(define variants (list (vshll_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 32 0 2 -1 1 0 ) 
(vshll_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 16 0 2 -1 1 0 ) 
(vshll_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 32 0 2 -1 1 1 ) 
(vshll_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 64 0 2 -1 1 1 ) 
(vshll_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 64 0 2 -1 1 0 ) 
(vshll_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 16 0 2 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshl_u16_dsl)
		(define input-precs-dsl (list  16 64 64 32 64 32 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vrshl_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshl_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshl_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshl_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshl_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshl_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 -1 1 -1 0 -1 1 -1 1 ) 
(vrshl_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 0 -1 1 -1 0 -1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 7)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshlq_u64_dsl)
		(define input-precs-dsl (list  64 32 16 8 64 8 32 32 16 8 64 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 8 8 ) (list 128 128 ) (list 32 32 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 16 16 ) ) )
		(define variants (list (vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 8 8 0 8 8 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 32 32 0 32 32 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 1 ) 
(vqshlq_u64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 16 16 0 16 16 0 -1 1 -1 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrshld_s64_dsl)
		(define input-precs-dsl (list  64 64 64 8 32 8 16 16 32 32 16 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 8 8 ) (list 32 32 ) (list 64 64 ) (list 16 16 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 -1 1 -1 1 -1 1 ) 
(vqrshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 -1 1 -1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshld_s64_dsl)
		(define input-precs-dsl (list  64 8 32 32 8 8 16 64 64 32 16 64 16 64 32 16 64 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 1 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 1 ) 
(vshld_s64_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 0 -1 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshlh_n_u16_dsl)
		(define input-precs-dsl (list  16 32 32 64 8 8 32 16 32 16 32 8 16 16 64 64 8 8  ))
		(define input-size-dsl (list   (list 16 32 ) (list 64 32 ) (list 32 32 ) (list 64 32 ) (list 8 32 ) (list 8 32 ) (list 32 32 ) (list 128 32 ) (list 128 32 ) (list 64 32 ) (list 32 32 ) (list 8 32 ) (list 16 32 ) (list 16 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) ) )
		(define variants (list (vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 16 16 0 16 16 0 0 -1 1 0 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 32 32 0 32 32 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 8 8 0 8 8 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 8 8 0 8 8 0 1 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 32 32 0 32 32 0 1 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 32 32 0 32 32 0 0 -1 1 0 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 8 8 0 8 8 0 0 -1 1 0 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 16 16 0 16 16 0 1 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 16 16 0 16 16 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 0 0 -1 1 1 ) 
(vqshlh_n_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 0 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrshlq_u16_dsl)
		(define input-precs-dsl (list  16 8 64 8 32 32 64 64 16 32 8 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 8 8 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 32 32 ) (list 64 64 ) (list 128 128 ) (list 16 16 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 16 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 8 8 0 8 8 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 8 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 32 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 32 32 0 32 32 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 64 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 16 16 0 16 16 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 128 128 0 128 32 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 8 0 -1 1 -1 0 -1 1 -1 1 ) 
(vqrshlq_u16_dsl (reg (bv 0 8)) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 1 8)) 64 64 0 64 16 0 -1 1 -1 0 -1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
 )
)
;; ================================================================================

