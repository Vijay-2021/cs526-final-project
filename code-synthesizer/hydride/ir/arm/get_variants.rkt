;#============================== Hydride File =================================
;#
;# Part of the Hydride Compiler Infrastructure.
;# <Placeholder for license information>
;#
;#=============================================================================
;#
;# Do NOT modify this file. It is automatically generated.
;#
;#=============================================================================

#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require rosette/lib/destruct)

(require hydride/utils/bvops)
(require hydride/utils/misc)


(require hydride/ir/hydride/definition)
(require hydride/ir/arm/definition)
(require hydride/ir/arm/printer)

(provide (all-defined-out))
;; ================================================================================
;;                                DSL Get Variants
;; ================================================================================
(define (arm:get-variants prog input-sizes input-precs)
 (cond 
		[(equal? prog vector-two-input-swizzle_dsl)
		(define input-precs-dsl (list  8  ))
		(define input-size-dsl (list   (list 64 64 ) ) )
		(define variants (list (vector-two-input-swizzle_dsl (reg (bv 0 8)) (reg (bv 1 8)) 6 8 0 3 3 1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog interleave-vectors_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (interleave-vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog interleave-vector_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 ) ) )
		(define variants (list (interleave-vector_dsl (reg (bv 0 8)) 128 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog deinterleave-vector_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 ) ) )
		(define variants (list (deinterleave-vector_dsl (reg (bv 0 8)) 128 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm_shuffle_vectors_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 128 ) ) )
		(define variants (list (llvm_shuffle_vectors_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 (reg (bv 2 8)) 4 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-add_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-add_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-sub_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-sub_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-mul_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-mul_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-sdiv_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-sdiv_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-vect-udiv_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 128 ) ) )
		(define variants (list (llvm-vect-udiv_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog llvm-zext_dsl)
		(define input-precs-dsl (list  8 16  ))
		(define input-size-dsl (list   (list 8 ) (list 16 ) ) )
		(define variants (list (llvm-zext_dsl (reg (bv 0 8)) 8 32 ) 
(llvm-zext_dsl (reg (bv 0 8)) 16 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
		[(equal? prog scalar_splat_dsl)
		(define input-precs-dsl (list  8 16  ))
		(define input-size-dsl (list   (list 8 ) (list 16 ) ) )
		(define variants (list (scalar_splat_dsl (reg (bv 0 8)) 8 32 ) 
(scalar_splat_dsl (reg (bv 0 8)) 16 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshrn_n_s64_dsl)
		(define input-precs-dsl (list  64 32 32 32 16 64 16 16 64 16 64 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 128 32 ) (list 32 32 ) (list 32 32 ) (list 16 32 ) (list 64 32 ) (list 16 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 64 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 1 32 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 1 1 32 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 0 1 32 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 1 1 16 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 0 1 64 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 0 1 16 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 1 16 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 1 1 64 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 16 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 1 64 2 ) 
(vqshrn_n_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmov_n_u16_dsl)
		(define input-precs-dsl (list  16 32 64 8 8 32 16 16 32 32 8 8 16 8 16 32 8 64 64 32 32 64 8 16 32 8 16 16  ))
		(define input-size-dsl (list   (list 16 ) (list 32 ) (list 64 ) (list 8 ) (list 8 ) (list 32 ) (list 16 ) (list 16 ) (list 32 ) (list 32 ) (list 8 ) (list 8 ) (list 16 ) (list 8 ) (list 16 ) (list 32 ) (list 8 ) (list 64 ) (list 64 ) (list 32 ) (list 32 ) (list 64 ) (list 8 ) (list 16 ) (list 32 ) (list 8 ) (list 16 ) (list 16 ) ) )
		(define variants (list (vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 64 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 16 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 64 64 0 64 32 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
(vmov_n_u16_dsl (reg (bv 0 8)) 128 128 0 128 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 28)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcltzq_s64_dsl)
		(define input-precs-dsl (list  64 16 64 32 8 8 32 64 16  ))
		(define input-size-dsl (list   (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vcltzq_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcltzq_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsub_s32_dsl)
		(define input-precs-dsl (list  32 8 16 64 32 16 64 32 8 64 16 64 64 64 32 16 8 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(vsub_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlsl_n_s16_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 64 16 ) ) )
		(define variants (list (vqdmlsl_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 1 -1 1 1 2 1 32 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vabal_u32_dsl)
		(define input-precs-dsl (list  32 16 8 8 32 16  ))
		(define input-size-dsl (list   (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) ) )
		(define variants (list (vabal_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 -1 0 0 ) 
(vabal_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 -1 1 1 ) 
(vabal_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 -1 0 0 ) 
(vabal_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 -1 1 1 ) 
(vabal_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 -1 1 1 ) 
(vabal_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vabdq_u8_dsl)
		(define input-precs-dsl (list  8 32 8 16 16 32 16 8 16 32 32 8  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vabdq_u8_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 0 -1 0 0 ) 
(vabdq_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 -1 0 0 ) 
(vabdq_u8_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 0 -1 1 1 ) 
(vabdq_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 -1 1 1 ) 
(vabdq_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 0 -1 1 1 ) 
(vabdq_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 0 -1 1 1 ) 
(vabdq_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 -1 0 0 ) 
(vabdq_u8_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 -1 1 1 ) 
(vabdq_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 0 -1 0 0 ) 
(vabdq_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 0 -1 0 0 ) 
(vabdq_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 -1 1 1 ) 
(vabdq_u8_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmull_u8_dsl)
		(define input-precs-dsl (list  8 16 32 8 32 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vmull_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 0 0 ) 
(vmull_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 1 1 ) 
(vmull_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 1 1 ) 
(vmull_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 1 1 ) 
(vmull_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 0 0 ) 
(vmull_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmovl_s8_dsl)
		(define input-precs-dsl (list  8 16 8 16 32 32  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vmovl_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 16 0 2 1 ) 
(vmovl_s8_dsl (reg (bv 0 8)) 64 64 0 64 16 32 0 2 1 ) 
(vmovl_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 16 0 2 0 ) 
(vmovl_s8_dsl (reg (bv 0 8)) 64 64 0 64 16 32 0 2 0 ) 
(vmovl_s8_dsl (reg (bv 0 8)) 64 64 0 64 32 64 0 2 0 ) 
(vmovl_s8_dsl (reg (bv 0 8)) 64 64 0 64 32 64 0 2 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrdmulhq_n_s32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 64 32 ) ) )
		(define variants (list (vqrdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 -1 1 ) 
(vqrdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vneg_s16_dsl)
		(define input-precs-dsl (list  16 8 64 16 32 64 64 8 32  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 128 ) ) )
		(define variants (list (vneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 16 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 8 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 16 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 32 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 64 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 8 0 1 ) 
(vneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 32 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsqaddq_u32_dsl)
		(define input-precs-dsl (list  32 16 16 8 32 64 8 32 32 8 16 16 64 64 16 64 32 8 8 32 64 8 64 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 8 8 ) (list 128 128 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) (list 16 16 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 8 8 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 1 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 0 ) 
(vsqaddq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcle_s32_dsl)
		(define input-precs-dsl (list  32 32 64 64 16 16 8 64 8 8 16 8 64 32 64 16 32 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vcle_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vcle_s32_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vcle_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlal_n_s32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 128 64 32 ) (list 128 64 32 ) ) )
		(define variants (list (vmlal_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 -1 2 0 1 ) 
(vmlal_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 64 -1 2 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vuzp1_s32_dsl)
		(define input-precs-dsl (list  32 64 32 16 16 8 32 8 16 32 8 16 8 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 2 ) 
(vuzp1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vhsubq_u32_dsl)
		(define input-precs-dsl (list  32 16 8 8 32 16 16 8 16 32 8 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 0 0 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 0 0 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 0 0 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 0 0 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 0 0 ) 
(vhsubq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmull_n_s32_dsl)
		(define input-precs-dsl (list  32  ))
		(define input-size-dsl (list   (list 64 32 ) ) )
		(define variants (list (vqdmull_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 64 2 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshrn_n_u64_dsl)
		(define input-precs-dsl (list  64 32 64 16 16 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vshrn_n_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 64 2 ) 
(vshrn_n_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 32 2 ) 
(vshrn_n_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 64 2 ) 
(vshrn_n_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 16 2 ) 
(vshrn_n_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 16 2 ) 
(vshrn_n_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrhaddq_s32_dsl)
		(define input-precs-dsl (list  32 16 8 16 32 8 8 32 16 32 8 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 -1 1 1 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 -1 0 0 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 -1 1 1 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 -1 0 0 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 -1 1 1 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 -1 0 0 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 -1 1 1 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 -1 0 0 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 -1 1 1 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 -1 0 0 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 -1 0 0 ) 
(vrhaddq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vhadd_u16_dsl)
		(define input-precs-dsl (list  16 8 16 32 32 8 32 16 16 8 32 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 0 0 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 0 0 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 0 0 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 0 0 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 0 0 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 0 0 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vhadd_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vdotq_u32_dsl)
		(define input-precs-dsl (list  8 8 8 8  ))
		(define input-size-dsl (list   (list 128 128 128 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) ) )
		(define variants (list (vdotq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 32 0 32 8 -1 0 0 ) 
(vdotq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 32 0 32 8 -1 1 1 ) 
(vdotq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 32 0 32 8 -1 0 0 ) 
(vdotq_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 32 0 32 8 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vtst_u16_dsl)
		(define input-precs-dsl (list  16 32 16 16 64 8 8 32 8 64 32 8 16 64 64 32 64 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vtst_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(vtst_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vtst_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(vtst_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(vtst_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(vtst_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 ) 
(vtst_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 ) 
(vtst_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vtst_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 ) 
(vtst_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vaba_u16_dsl)
		(define input-precs-dsl (list  16 8 8 32 32 32 32 8 8 16 16 16  ))
		(define input-size-dsl (list   (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 64 64 64 ) ) )
		(define variants (list (vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 -1 0 0 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 -1 1 1 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 -1 1 1 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 -1 0 0 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 -1 1 1 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 -1 0 0 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 -1 1 1 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 -1 0 0 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 -1 0 0 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 -1 1 1 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 -1 0 0 ) 
(vaba_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmullh_s16_dsl)
		(define input-precs-dsl (list  16 16 32 32  ))
		(define input-size-dsl (list   (list 16 16 ) (list 64 64 ) (list 64 64 ) (list 32 32 ) ) )
		(define variants (list (vqdmullh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 32 2 1 1 1 ) 
(vqdmullh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 2 1 1 1 ) 
(vqdmullh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 2 1 1 1 ) 
(vqdmullh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 64 2 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlalh_s16_dsl)
		(define input-precs-dsl (list  16 32 16 32  ))
		(define input-size-dsl (list   (list 32 16 16 ) (list 128 64 64 ) (list 128 64 64 ) (list 64 32 32 ) ) )
		(define variants (list (vqdmlalh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 16 32 1 -1 1 1 2 1 32 1 1 ) 
(vqdmlalh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 1 -1 1 1 2 1 64 1 1 ) 
(vqdmlalh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 1 -1 1 1 2 1 32 1 1 ) 
(vqdmlalh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 64 1 -1 1 1 2 1 64 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmulhq_n_s32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 64 32 ) ) )
		(define variants (list (vqdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vqdmulhq_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsraq_n_u8_dsl)
		(define input-precs-dsl (list  8 8 16 32 64 32 16  ))
		(define input-size-dsl (list   (list 128 128 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 128 128 32 ) (list 128 128 64 ) (list 64 64 32 ) (list 64 64 32 ) ) )
		(define variants (list (vsraq_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 0 -1 0 0 ) 
(vsraq_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 0 -1 0 0 ) 
(vsraq_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vsraq_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vsraq_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 64 0 -1 0 0 ) 
(vsraq_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vsraq_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 7)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcgez_s32_dsl)
		(define input-precs-dsl (list  32 8 16 8 32 64 16 64 64  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vcgez_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcgez_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vaddw_u32_dsl)
		(define input-precs-dsl (list  64 32 16 32 16 64  ))
		(define input-size-dsl (list   (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) ) )
		(define variants (list (vaddw_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 0 0 2 ) 
(vaddw_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 1 1 2 ) 
(vaddw_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 1 1 2 ) 
(vaddw_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 0 0 2 ) 
(vaddw_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 0 0 2 ) 
(vaddw_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 1 1 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsubhn_s16_dsl)
		(define input-precs-dsl (list  16 32 16 32 64 64  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vsubhn_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 16 2 ) 
(vsubhn_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 32 2 ) 
(vsubhn_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 16 2 ) 
(vsubhn_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 32 2 ) 
(vsubhn_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 64 2 ) 
(vsubhn_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 64 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmax_s16_dsl)
		(define input-precs-dsl (list  16 32 8 16 32 8 8 8 32 16 16 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 1 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 1 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 1 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 0 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 0 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 1 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 0 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 0 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 0 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 0 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 1 ) 
(vmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqsub_u64_dsl)
		(define input-precs-dsl (list  64 64 8 32 8 16 32 16 64 8 64 16 16 8 16 8 64 32 32 32 64 8 32 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 16 16 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 16 16 ) (list 8 8 ) (list 128 128 ) (list 8 8 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vqsub_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlal_s16_dsl)
		(define input-precs-dsl (list  16 8 32 8 32 16  ))
		(define input-size-dsl (list   (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) ) )
		(define variants (list (vmlal_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 1 1 ) 
(vmlal_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 0 0 ) 
(vmlal_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 1 1 ) 
(vmlal_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 1 1 ) 
(vmlal_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 0 0 ) 
(vmlal_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlal_n_s16_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 128 64 16 ) ) )
		(define variants (list (vqdmlal_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 1 -1 1 1 2 1 32 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vabdl_u8_dsl)
		(define input-precs-dsl (list  8 16 8 32 32 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vabdl_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 -1 2 0 -1 0 0 ) 
(vabdl_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 -1 2 0 -1 1 1 ) 
(vabdl_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 -1 2 0 -1 1 1 ) 
(vabdl_u8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 -1 2 0 -1 1 1 ) 
(vabdl_u8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 -1 2 0 -1 0 0 ) 
(vabdl_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 -1 2 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlsl_s32_dsl)
		(define input-precs-dsl (list  32 16 32 16  ))
		(define input-size-dsl (list   (list 128 64 64 ) (list 32 16 16 ) (list 64 32 32 ) (list 128 64 64 ) ) )
		(define variants (list (vqdmlsl_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 1 -1 1 1 2 1 64 1 1 ) 
(vqdmlsl_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 16 16 0 16 16 32 1 -1 1 1 2 1 32 1 1 ) 
(vqdmlsl_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 32 32 0 32 32 64 1 -1 1 1 2 1 64 1 1 ) 
(vqdmlsl_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 1 -1 1 1 2 1 32 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsra_n_s16_dsl)
		(define input-precs-dsl (list  16 16 64 64 64 8 32 8 32  ))
		(define input-size-dsl (list   (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 128 128 64 ) (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 64 64 32 ) (list 128 128 32 ) ) )
		(define variants (list (vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 64 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 0 -1 0 1 ) 
(vsra_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vzip2q_s32_dsl)
		(define input-precs-dsl (list  32 64 16 16 16 16 64 8 32 8 8 8 32 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 2 2 32 32 2 32 1 16 32 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 2 64 64 1 64 1 32 64 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 4 2 16 16 4 16 1 8 16 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 4 2 16 16 4 16 1 8 16 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 2 2 16 16 2 16 1 8 16 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 2 2 16 16 2 16 1 8 16 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 2 64 64 1 64 1 32 64 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 8 2 8 8 8 8 1 4 8 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 2 2 32 32 2 32 1 16 32 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 4 2 8 8 4 8 1 4 8 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 4 2 8 8 4 8 1 4 8 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 8 2 8 8 8 8 1 4 8 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 2 32 32 1 32 1 16 32 ) 
(vzip2q_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 2 32 32 1 32 1 16 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlsl_n_u32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 128 64 32 ) (list 128 64 32 ) ) )
		(define variants (list (vmlsl_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 64 -1 2 0 0 ) 
(vmlsl_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 -1 2 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vtrn1_s32_dsl)
		(define input-precs-dsl (list  32 32 16 8 8 8 32 16 16 8 64 16 64 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 2 32 1 16 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 2 32 1 16 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 2 16 1 8 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 2 8 1 4 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 2 8 1 4 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 2 8 1 4 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 2 32 1 16 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 2 16 1 8 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 2 16 1 8 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 2 8 1 4 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 2 64 1 32 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 2 16 1 8 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 2 64 1 32 ) 
(vtrn1_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 2 32 1 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmulh_n_s16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 64 16 ) (list 128 16 ) ) )
		(define variants (list (vqdmulh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vqdmulh_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqabs_s8_dsl)
		(define input-precs-dsl (list  8 64 8 32 16 64 32 64 32 16 8 16  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 8 ) (list 128 ) (list 64 ) (list 64 ) (list 32 ) (list 128 ) (list 64 ) (list 128 ) (list 128 ) (list 16 ) ) )
		(define variants (list (vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 8 8 0 8 8 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 32 32 0 32 32 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vqabs_s8_dsl (reg (bv 0 8)) 16 16 0 16 16 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcge_s32_dsl)
		(define input-precs-dsl (list  32 8 32 16 16 64 64 64 8 16 16 8 64 64 32 64 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vcge_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcge_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vcge_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vabs_s8_dsl)
		(define input-precs-dsl (list  8 8 32 16 64 64 16 32 64  ))
		(define input-size-dsl (list   (list 64 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) ) )
		(define variants (list (vabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 8 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 8 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 32 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 16 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 64 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 16 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 128 128 0 128 32 0 1 ) 
(vabs_s8_dsl (reg (bv 0 8)) 64 64 0 64 64 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmull_n_s16_dsl)
		(define input-precs-dsl (list  16  ))
		(define input-size-dsl (list   (list 64 16 ) ) )
		(define variants (list (vqdmull_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 32 2 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshrnh_n_u16_dsl)
		(define input-precs-dsl (list  16 32 16 64 32 64  ))
		(define input-size-dsl (list   (list 16 32 ) (list 32 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vqshrnh_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 0 0 16 2 ) 
(vqshrnh_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 0 0 32 2 ) 
(vqshrnh_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 16 2 ) 
(vqshrnh_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 0 0 64 2 ) 
(vqshrnh_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 32 2 ) 
(vqshrnh_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 64 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpmin_s32_dsl)
		(define input-precs-dsl (list  32 16 16 8 16 8 32 32 16 32 8 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 16 16 1 8 1 16 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 16 16 1 8 1 16 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 8 8 1 4 1 8 2 ) 
(vpmin_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 8 8 1 4 1 8 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlsl_n_s32_dsl)
		(define input-precs-dsl (list  32  ))
		(define input-size-dsl (list   (list 128 64 32 ) ) )
		(define variants (list (vqdmlsl_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 1 -1 1 1 2 1 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcgtq_s8_dsl)
		(define input-precs-dsl (list  8 32 32 8 32 16 64 16 64 64 64 8 8 16 32 64 16 64  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vcgtq_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vcgtq_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vadd_s8_dsl)
		(define input-precs-dsl (list  8 8 32 8 16 64 64 8 32 32 64 64 32 16 64 16 64 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 ) 
(vadd_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrsubhn_s16_dsl)
		(define input-precs-dsl (list  16 32 16 64 64 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vrsubhn_s16_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vrsubhn_s16_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vrsubhn_s16_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vrsubhn_s16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vrsubhn_s16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vrsubhn_s16_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmls_n_s32_dsl)
		(define input-precs-dsl (list  32 32 32 32  ))
		(define input-size-dsl (list   (list 64 64 32 ) (list 128 128 32 ) (list 128 128 32 ) (list 64 64 32 ) ) )
		(define variants (list (vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vmls_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vraddhn_s32_dsl)
		(define input-precs-dsl (list  32 16 64 32 64 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vraddhn_s32_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vraddhn_s32_dsl (lit (bv #x00000000000000000000000000008000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 -1 32 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000080000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 -1 64 2 ) 
(vraddhn_s32_dsl (lit (bv #x0000000000000080 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 -1 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcltq_s32_dsl)
		(define input-precs-dsl (list  32 8 8 32 64 16 64 64 16 32 8 64 16 64 8 16 32 64  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vcltq_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
(vcltq_s32_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 0 0 ) 
(vcltq_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlal_n_s16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 128 64 16 ) (list 128 64 16 ) ) )
		(define variants (list (vmlal_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 -1 2 0 1 ) 
(vmlal_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 32 -1 2 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vminq_u8_dsl)
		(define input-precs-dsl (list  8 32 8 16 8 16 32 16 8 16 32 32  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 0 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 0 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 0 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 1 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 1 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 1 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 1 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 0 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 1 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 0 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 0 ) 
(vminq_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vuzp2_u16_dsl)
		(define input-precs-dsl (list  16 8 32 32 8 8 16 8 32 32 16 64 16 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 1 8 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 1 4 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 1 16 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 32 1 16 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 8 1 4 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 1 4 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 1 8 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 8 1 4 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 1 16 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 32 1 16 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 16 1 8 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 64 1 32 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 16 1 8 ) 
(vuzp2_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 64 1 32 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vceqz_s64_dsl)
		(define input-precs-dsl (list  64 64 64 8 32 16 16 64 16 8 32 8 16 32 64 8 32 64  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 64 64 0 64 64 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 64 64 0 64 64 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 64 64 0 64 64 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) 128 128 0 128 8 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 128 128 0 128 32 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 64 64 0 64 16 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 128 128 0 128 16 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 128 128 0 128 64 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 128 128 0 128 16 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) 64 64 0 64 8 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 64 64 0 64 32 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) 64 64 0 64 8 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 64 64 0 64 16 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 128 128 0 128 32 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 128 128 0 128 64 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) 128 128 0 128 8 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 64 64 0 64 32 1 ) 
(vceqz_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 64 64 0 64 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmla_n_s32_dsl)
		(define input-precs-dsl (list  32 32 32 32  ))
		(define input-size-dsl (list   (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 128 128 32 ) ) )
		(define variants (list (vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vmla_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmla_u16_dsl)
		(define input-precs-dsl (list  16 32 16 16 8 32 8 32 8 16 8 32  ))
		(define input-size-dsl (list   (list 64 64 64 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 128 128 128 ) (list 128 128 128 ) ) )
		(define variants (list (vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
(vmla_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vtrn2_s32_dsl)
		(define input-precs-dsl (list  32 8 32 16 64 8 64 16 16 16 8 32 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 16 2 32 1 16 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 1 16 2 32 1 16 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 32 2 64 1 32 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 64 1 32 2 64 1 32 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 16 1 8 2 16 1 8 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 32 1 16 2 32 1 16 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 8 1 4 2 8 1 4 ) 
(vtrn2_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 32 1 16 2 32 1 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmlal_n_s32_dsl)
		(define input-precs-dsl (list  32  ))
		(define input-size-dsl (list   (list 128 64 32 ) ) )
		(define variants (list (vqdmlal_n_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 1 64 1 -1 1 1 2 1 64 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 1)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmull_n_u16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 64 16 ) (list 64 16 ) ) )
		(define variants (list (vmull_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 32 2 0 0 ) 
(vmull_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 32 2 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmulq_n_u32_dsl)
		(define input-precs-dsl (list  32 32 32 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 64 32 ) (list 64 32 ) (list 128 32 ) ) )
		(define variants (list (vmulq_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
(vmulq_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmulq_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmulq_n_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vaddhn_s64_dsl)
		(define input-precs-dsl (list  64 64 16 32 32 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vaddhn_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 64 2 ) 
(vaddhn_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 32 -1 64 2 ) 
(vaddhn_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 16 2 ) 
(vaddhn_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 32 2 ) 
(vaddhn_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 16 -1 32 2 ) 
(vaddhn_s64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 8 -1 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpadal_u16_dsl)
		(define input-precs-dsl (list  16 32 8 32 16 8 16 32 16 8 8 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 32 -1 0 -1 0 16 1 8 0 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 64 -1 0 -1 0 32 1 16 0 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 16 -1 0 -1 1 8 1 4 1 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 64 -1 0 -1 1 32 1 16 1 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 32 -1 0 -1 1 16 1 8 1 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 16 -1 0 -1 0 8 1 4 0 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 32 -1 0 -1 1 16 1 8 1 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 64 -1 0 -1 0 32 1 16 0 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 32 -1 0 -1 0 16 1 8 0 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 16 -1 0 -1 0 8 1 4 0 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 16 -1 0 -1 1 8 1 4 1 2 ) 
(vpadal_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 64 -1 0 -1 1 32 1 16 1 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqadd_s16_dsl)
		(define input-precs-dsl (list  16 8 8 8 32 32 64 8 64 64 64 64 8 16 16 16 32 64 32 16 16 8 32 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 8 8 ) (list 8 8 ) (list 128 128 ) (list 64 64 ) (list 32 32 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 16 16 ) (list 128 128 ) (list 32 32 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 1 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vqadd_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vceqq_u8_dsl)
		(define input-precs-dsl (list  8 8 32 8 16 32 64 64 16 64 8 32 64 32 64 64 16 16  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) 128 128 0 128 8 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) 128 128 0 128 8 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) 128 128 0 128 32 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) 64 64 0 64 8 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) 128 128 0 128 16 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) 64 64 0 64 32 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) 128 128 0 128 64 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) 64 64 0 64 16 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000ff (bitvector 8))) (reg (bv 1 8)) 64 64 0 64 8 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) 64 64 0 64 32 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (reg (bv 1 8)) 128 128 0 128 32 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) 64 64 0 64 64 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (reg (bv 1 8)) 128 128 0 128 64 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) 128 128 0 128 16 ) 
(vceqq_u8_dsl (reg (bv 0 8)) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000ffff (bitvector 16))) (reg (bv 1 8)) 64 64 0 64 16 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vzip1q_u64_dsl)
		(define input-precs-dsl (list  64 8 16 16 8 32 32 8 64 16 32 16 32 8  ))
		(define input-size-dsl (list   (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 64 1 32 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 8 1 4 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 16 1 8 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 16 1 8 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 8 0 32 8 2 8 1 4 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 32 1 16 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 32 1 16 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 8 1 4 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 64 0 64 64 2 64 1 32 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 16 0 32 16 2 16 1 8 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 32 0 64 32 2 32 1 16 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 16 0 64 16 2 16 1 8 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 32 32 0 32 32 2 32 1 16 ) 
(vzip1q_u64_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 64 8 0 64 8 2 8 1 4 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlaq_n_s16_dsl)
		(define input-precs-dsl (list  16 16 16 16  ))
		(define input-size-dsl (list   (list 128 128 16 ) (list 64 64 16 ) (list 128 128 16 ) (list 64 64 16 ) ) )
		(define variants (list (vmlaq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vmlaq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vmlaq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vmlaq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrdmulhq_n_s16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 128 16 ) (list 64 16 ) ) )
		(define variants (list (vqrdmulhq_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 -1 1 ) 
(vqrdmulhq_n_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshr_n_s64_dsl)
		(define input-precs-dsl (list  64 32 32 64 8 64 8 16 16  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 128 64 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) ) )
		(define variants (list (vshr_n_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 1 ) 
(vshr_n_s64_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmovn_s64_dsl)
		(define input-precs-dsl (list  32 32 8 16 8 16  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) ) )
		(define variants (list (vmovn_s64_dsl (reg (bv 0 8)) 64 64 0 64 32 2 ) 
(vmovn_s64_dsl (reg (bv 0 8)) 64 64 0 64 32 2 ) 
(vmovn_s64_dsl (reg (bv 0 8)) 64 64 0 64 8 2 ) 
(vmovn_s64_dsl (reg (bv 0 8)) 64 64 0 64 16 2 ) 
(vmovn_s64_dsl (reg (bv 0 8)) 64 64 0 64 8 2 ) 
(vmovn_s64_dsl (reg (bv 0 8)) 64 64 0 64 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vclez_s16_dsl)
		(define input-precs-dsl (list  16 32 16 64 64 8 64 32 8  ))
		(define input-size-dsl (list   (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vclez_s16_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vclez_s16_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlsl_n_u16_dsl)
		(define input-precs-dsl (list  16 16  ))
		(define input-size-dsl (list   (list 128 64 16 ) (list 128 64 16 ) ) )
		(define variants (list (vmlsl_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 32 -1 2 0 0 ) 
(vmlsl_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 1 32 -1 2 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vaddl_s16_dsl)
		(define input-precs-dsl (list  16 8 8 16 32 32  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vaddl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 1 1 ) 
(vaddl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 0 0 ) 
(vaddl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 1 1 ) 
(vaddl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 0 0 ) 
(vaddl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 1 1 ) 
(vaddl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpmax_s16_dsl)
		(define input-precs-dsl (list  16 32 32 8 32 8 16 8 32 16 16 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) ) )
		(define variants (list (vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 16 16 1 8 1 16 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 32 32 1 16 0 32 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 8 8 1 4 1 8 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 8 8 1 4 0 8 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 32 32 1 16 1 32 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 16 16 1 8 1 16 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 16 16 1 8 0 16 2 ) 
(vpmax_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 8 8 1 4 1 8 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshr_n_u8_dsl)
		(define input-precs-dsl (list  8 32 64 64 64 64 32 8 16 64 16  ))
		(define input-size-dsl (list   (list 64 32 ) (list 128 32 ) (list 64 64 32 ) (list 64 64 32 ) (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) (list 128 64 ) (list 64 32 ) ) )
		(define variants (list (vshr_n_u8_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 0 ) 
(vshr_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vshr_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x00000000 (bitvector 8))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 0 ) 
(vshr_n_u8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 11)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmls_n_u16_dsl)
		(define input-precs-dsl (list  16 16 16 16  ))
		(define input-size-dsl (list   (list 64 64 16 ) (list 128 128 16 ) (list 64 64 16 ) (list 128 128 16 ) ) )
		(define variants (list (vmls_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vmls_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
(vmls_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 0 -1 0 0 ) 
(vmls_n_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 0 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmulq_n_s16_dsl)
		(define input-precs-dsl (list  16 16 16 16  ))
		(define input-size-dsl (list   (list 128 16 ) (list 64 16 ) (list 64 16 ) (list 128 16 ) ) )
		(define variants (list (vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
(vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
(vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
(vmulq_n_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 4)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmlsl_u32_dsl)
		(define input-precs-dsl (list  32 16 8 8 32 16  ))
		(define input-size-dsl (list   (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) (list 128 64 64 ) ) )
		(define variants (list (vmlsl_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 0 0 ) 
(vmlsl_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 1 1 ) 
(vmlsl_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 0 0 ) 
(vmlsl_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 16 -1 2 0 1 1 ) 
(vmlsl_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 64 -1 2 0 1 1 ) 
(vmlsl_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 32 -1 2 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqneg_s16_dsl)
		(define input-precs-dsl (list  16 32 8 64 16 8 16 64 8 32 64 32  ))
		(define input-size-dsl (list   (list 64 ) (list 32 ) (list 64 ) (list 64 ) (list 128 ) (list 8 ) (list 16 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vqneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 32 32 0 32 32 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 8 8 0 8 8 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 16 16 0 16 16 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vqneg_s16_dsl (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcgtzd_s64_dsl)
		(define input-precs-dsl (list  64 32 8 64 64 16 16 8 32  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vcgtzd_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 32 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 8 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 64 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000ffffffffffffffff (bitvector 64))) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 64 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 16 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000000000ffff (bitvector 16))) (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 16 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000ff (bitvector 8))) (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 64 64 0 64 8 1 1 ) 
(vcgtzd_s64_dsl (lit (bv #x000000000000000000000000ffffffff (bitvector 32))) (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 192))) (reg (bv 0 8)) 128 128 0 128 32 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmls_u32_dsl)
		(define input-precs-dsl (list  32 16 8 32 8 8 16 8 16 32 32 16  ))
		(define input-size-dsl (list   (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) (list 128 128 128 ) (list 128 128 128 ) (list 128 128 128 ) (list 64 64 64 ) (list 64 64 64 ) (list 128 128 128 ) (list 64 64 64 ) ) )
		(define variants (list (vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 0 0 ) 
(vmls_u32_dsl (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmull_n_s32_dsl)
		(define input-precs-dsl (list  32 32  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) ) )
		(define variants (list (vmull_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 64 2 0 1 ) 
(vmull_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 64 2 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 2)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsubl_s32_dsl)
		(define input-precs-dsl (list  32 8 8 32 16 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vsubl_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 1 1 ) 
(vsubl_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 1 1 ) 
(vsubl_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 2 -1 0 0 ) 
(vsubl_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 2 -1 0 0 ) 
(vsubl_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 1 1 ) 
(vsubl_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 2 -1 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqmovn_u32_dsl)
		(define input-precs-dsl (list  32 64 16 64 64 16 32 32 16 32 16 16 64 16 32 64 32 64  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 16 ) (list 64 ) (list 128 ) (list 16 ) (list 32 ) (list 128 ) (list 128 ) (list 32 ) (list 128 ) (list 128 ) (list 64 ) (list 16 ) (list 128 ) (list 128 ) (list 32 ) (list 64 ) ) )
		(define variants (list (vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 16 0 0 32 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 32 1 1 64 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 8 8 0 8 8 0 0 16 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 32 32 0 32 32 1 1 64 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 32 0 1 64 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 8 8 0 8 8 1 1 16 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 16 16 0 16 16 0 0 32 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 16 0 1 32 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 8 0 0 16 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 16 16 0 16 16 0 1 32 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 8 0 1 16 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 8 1 1 16 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 32 32 0 32 32 0 1 64 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 8 8 0 8 8 0 1 16 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 16 1 1 32 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 64 64 0 64 32 0 0 64 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 16 16 0 16 16 1 1 32 2 ) 
(vqmovn_u32_dsl (reg (bv 0 8)) 32 32 0 32 32 0 0 64 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmul_s16_dsl)
		(define input-precs-dsl (list  16 32 16 16 32 16 8 32 8 32 8 8  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 0 ) 
(vmul_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpaddq_u32_dsl)
		(define input-precs-dsl (list  32 16 64 16 64 32 16 32 8 8 32 16 8 8  ))
		(define input-size-dsl (list   (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 32 0 64 32 -1 32 16 32 ) 
(vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 64 0 128 64 -1 64 32 64 ) 
(vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 64 0 128 64 -1 64 32 64 ) 
(vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 32 0 64 32 -1 32 16 32 ) 
(vpaddq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 32 0 64 32 -1 32 16 32 ) 
(vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 8 0 16 8 -1 8 4 8 ) 
(vpaddq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 8 0 16 8 -1 8 4 8 ) 
(vpaddq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 32 0 64 32 -1 32 16 32 ) 
(vpaddq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 16 0 32 16 -1 16 8 16 ) 
(vpaddq_u32_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) (reg (bv 1 8)) 64 8 0 16 8 -1 8 4 8 ) 
(vpaddq_u32_dsl (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (bitvector 128))) (reg (bv 0 8)) (reg (bv 1 8)) 128 8 0 16 8 -1 8 4 8 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 14)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vmvn_u8_dsl)
		(define input-precs-dsl (list  8 8 8 8 8 8 8 8 8 8 8 8  ))
		(define input-size-dsl (list   (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 64 ) (list 64 ) (list 128 ) ) )
		(define variants (list (vmvn_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 64 64 0 64 8 ) 
(vmvn_u8_dsl (reg (bv 0 8)) 128 128 0 128 8 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vsubw_u8_dsl)
		(define input-precs-dsl (list  16 64 32 32 16 64  ))
		(define input-size-dsl (list   (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) (list 128 64 ) ) )
		(define variants (list (vsubw_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 0 0 2 ) 
(vsubw_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 0 0 2 ) 
(vsubw_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 1 1 2 ) 
(vsubw_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 32 0 -1 0 0 2 ) 
(vsubw_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 16 0 -1 1 1 2 ) 
(vsubw_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 64 0 -1 1 1 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vget_low_u32_dsl)
		(define input-precs-dsl (list  64 64 64 64 64 64 64 64  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) ) )
		(define variants (list (vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
(vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
(vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
(vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
(vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
(vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
(vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
(vget_low_u32_dsl (reg (bv 0 8)) 64 64 0 64 64 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 8)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vcombine_u16_dsl)
		(define input-precs-dsl (list  64 64 64 64 64 64 64 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) ) )
		(define variants (list (vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
(vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
(vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
(vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
(vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
(vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
(vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
(vcombine_u16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 128 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 8)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vget_high_u16_dsl)
		(define input-precs-dsl (list  64 64 64 64 64 64 64 64  ))
		(define input-size-dsl (list   (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) ) )
		(define variants (list (vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
(vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
(vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
(vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
(vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
(vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
(vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
(vget_high_u16_dsl (reg (bv 0 8)) 64 64 0 64 64 0 64 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 8)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vpaddl_s16_dsl)
		(define input-precs-dsl (list  16 8 16 32 32 32 8 16 8 16 8 32  ))
		(define input-size-dsl (list   (list 64 ) (list 128 ) (list 64 ) (list 64 ) (list 128 ) (list 128 ) (list 128 ) (list 128 ) (list 64 ) (list 128 ) (list 64 ) (list 64 ) ) )
		(define variants (list (vpaddl_s16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 64 64 0 32 16 32 -1 0 -1 1 16 1 8 1 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 128 128 0 64 8 16 -1 0 -1 0 8 1 4 0 2 ) 
(vpaddl_s16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 64 64 0 32 16 32 -1 0 -1 0 16 1 8 0 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 64 64 0 32 32 64 -1 0 -1 1 32 1 16 1 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 128 128 0 64 32 64 -1 0 -1 1 32 1 16 1 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 128 128 0 64 32 64 -1 0 -1 0 32 1 16 0 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 128 128 0 64 8 16 -1 0 -1 1 8 1 4 1 2 ) 
(vpaddl_s16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 128 128 0 64 16 32 -1 0 -1 0 16 1 8 0 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 64 64 0 32 8 16 -1 0 -1 1 8 1 4 1 2 ) 
(vpaddl_s16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (reg (bv 0 8)) 128 128 0 64 16 32 -1 0 -1 1 16 1 8 1 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (reg (bv 0 8)) 64 64 0 32 8 16 -1 0 -1 0 8 1 4 0 2 ) 
(vpaddl_s16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (reg (bv 0 8)) 64 64 0 32 32 64 -1 0 -1 0 32 1 16 0 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrdmulhs_s32_dsl)
		(define input-precs-dsl (list  32 16 16 16 32 32  ))
		(define input-size-dsl (list   (list 32 32 ) (list 128 128 ) (list 16 16 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vqrdmulhs_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 1 ) 
(vqrdmulhs_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 1 ) 
(vqrdmulhs_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 1 ) 
(vqrdmulhs_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 1 ) 
(vqrdmulhs_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 1 ) 
(vqrdmulhs_s32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqdmulh_s16_dsl)
		(define input-precs-dsl (list  16 32 32 32 16 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 16 16 ) (list 128 128 ) ) )
		(define variants (list (vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 1 1 ) 
(vqdmulh_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshl_s16_dsl)
		(define input-precs-dsl (list  16 8 8 64 64 32 32 16 8 8 64 32 16 64 16 64 32 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 1 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 1 ) 
(vshl_s16_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vshll_n_s32_dsl)
		(define input-precs-dsl (list  32 8 16 16 32 8  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 64 32 ) ) )
		(define variants (list (vshll_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 64 0 2 1 ) 
(vshll_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 16 0 2 1 ) 
(vshll_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 32 0 2 1 ) 
(vshll_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 32 0 2 0 ) 
(vshll_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 64 0 2 0 ) 
(vshll_n_s32_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 16 0 2 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrshl_s16_dsl)
		(define input-precs-dsl (list  16 64 64 64 32 8 32 8 16 64 8 64 32 16 64 8 16 32 32 8 32 8 16 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 32 32 ) (list 8 8 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 32 32 ) (list 16 16 ) (list 64 64 ) (list 8 8 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 -1 1 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 -1 1 ) 
(vqrshl_s16_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshld_u64_dsl)
		(define input-precs-dsl (list  64 64 32 32 64 8 32 8 8 64 16 64 16 64 8 16 32 16  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 64 64 ) ) )
		(define variants (list (vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 -1 0 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 -1 1 -1 1 ) 
(vrshld_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 -1 0 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshlb_n_u8_dsl)
		(define input-precs-dsl (list  8 16 8 16 64 8 8 32 8 16 16 32 32 32 64 32 16 64  ))
		(define input-size-dsl (list   (list 8 32 ) (list 64 32 ) (list 8 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 8 32 ) (list 32 32 ) (list 64 32 ) (list 16 32 ) (list 16 32 ) (list 64 32 ) (list 32 32 ) (list 32 32 ) (list 64 32 ) (list 128 32 ) (list 16 32 ) (list 64 32 ) ) )
		(define variants (list (vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 0 0 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 1 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 1 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 1 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 0 0 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 1 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 0 0 ) 
(vqshlb_n_u8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 0 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 18)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqshl_s8_dsl)
		(define input-precs-dsl (list  8 64 8 16 8 8 16 64 8 64 16 64 8 16 16 32 32 32 32 32 32 16 64 64  ))
		(define input-size-dsl (list   (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 8 8 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 64 64 ) (list 128 128 ) (list 16 16 ) (list 64 64 ) (list 8 8 ) (list 128 128 ) (list 64 64 ) (list 64 64 ) (list 32 32 ) (list 32 32 ) (list 64 64 ) (list 128 128 ) (list 128 128 ) (list 16 16 ) (list 64 64 ) (list 128 128 ) ) )
		(define variants (list (vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 0 0 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 1 1 1 ) 
(vqshl_s8_dsl (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 1 1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 24)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshr_n_s8_dsl)
		(define input-precs-dsl (list  8 32 16 64 64 64 16 8 32  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vrshr_n_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 0 -1 0 -1 1 ) 
(vrshr_n_s8_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 0 -1 0 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrsraq_n_s64_dsl)
		(define input-precs-dsl (list  64 64 64 8 16 32 16 8 32  ))
		(define input-size-dsl (list   (list 128 128 32 ) (list 64 64 32 ) (list 64 64 32 ) (list 64 64 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 128 128 32 ) (list 128 128 32 ) (list 64 64 32 ) ) )
		(define variants (list (vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 64 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 -1 0 -1 1 ) 
(vrsraq_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 -1 0 -1 1 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrshrnd_n_u64_dsl)
		(define input-precs-dsl (list  64 32 32 16 64 16  ))
		(define input-size-dsl (list   (list 64 32 ) (list 32 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 16 32 ) ) )
		(define variants (list (vqrshrnd_n_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 0 0 -1 0 64 2 ) 
(vqrshrnd_n_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 0 0 -1 0 32 2 ) 
(vqrshrnd_n_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 0 -1 0 32 2 ) 
(vqrshrnd_n_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 0 -1 0 16 2 ) 
(vqrshrnd_n_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 0 -1 0 64 2 ) 
(vqrshrnd_n_u64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 0 0 -1 0 16 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshrn_n_u32_dsl)
		(define input-precs-dsl (list  32 16 64 64 16 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vrshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 0 -1 0 32 2 ) 
(vrshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 0 -1 0 16 2 ) 
(vrshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 0 -1 0 64 2 ) 
(vrshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 0 -1 0 64 2 ) 
(vrshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 0 -1 0 16 2 ) 
(vrshrn_n_u32_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 0 -1 0 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 6)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrsraq_n_u8_dsl)
		(define input-precs-dsl (list  8 64 64 8 16 16 32 32 64  ))
		(define input-size-dsl (list   (list 128 128 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) (list 64 64 32 ) (list 128 128 32 ) (list 64 64 32 ) ) )
		(define variants (list (vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 8 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 64 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 8 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 16 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 16 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 32 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 128 128 0 128 32 -1 0 -1 0 -1 0 ) 
(vrsraq_n_u8_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) (reg (bv 2 8)) 64 64 0 64 64 -1 0 -1 0 -1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vqrshrn_n_s64_dsl)
		(define input-precs-dsl (list  64 16 16 16 16 32 64 32 64 32 64 32  ))
		(define input-size-dsl (list   (list 128 32 ) (list 128 32 ) (list 16 32 ) (list 16 32 ) (list 128 32 ) (list 32 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) (list 64 32 ) (list 32 32 ) ) )
		(define variants (list (vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 1 -1 1 64 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 0 -1 1 16 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 0 0 -1 1 16 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 8 8 0 8 8 -1 0 1 -1 1 16 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 1 -1 1 16 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 0 1 -1 1 32 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 0 1 -1 1 64 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 1 -1 1 32 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 0 -1 1 64 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 0 -1 1 32 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 32 32 0 32 32 -1 0 0 -1 1 64 2 ) 
(vqrshrn_n_s64_dsl (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 16 16 0 16 16 -1 0 0 -1 1 32 2 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 12)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
	[(equal? prog vrshr_n_u16_dsl)
		(define input-precs-dsl (list  16 64 64 32 8 32 16 64 8  ))
		(define input-size-dsl (list   (list 64 32 ) (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 64 32 ) (list 64 32 ) (list 128 32 ) (list 128 32 ) (list 128 32 ) ) )
		(define variants (list (vrshr_n_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 16 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 64 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 32 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 8 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x00000000000000000000000000000000 (bitvector 32))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 64 64 0 64 32 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x0000000000000000 (bitvector 16))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 16 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 (bitvector 64))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 64 -1 0 -1 0 -1 0 ) 
(vrshr_n_u16_dsl (lit (bv #x00000000 (bitvector 8))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (lit (bv #x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (bitvector 192))) (reg (bv 0 8)) (reg (bv 1 8)) 128 128 0 128 8 -1 0 -1 0 -1 0 ) 
))
		
            (define (filter-fn i)
              (define length-condition #f)
              (define prec-condition #f)

              (for/list ([l input-sizes])
                        (for/list ([l_ (list-ref input-size-dsl i)])
                                  (cond [(equal? l l_) (set! length-condition #t)] )
                                  )
                        )

              (for/list ([p input-precs])
                        (cond [(equal? p (list-ref input-precs-dsl i)) (set! prec-condition #t)] )
                        )

              (and length-condition prec-condition)
              )
        
		(define relavent-indices (filter filter-fn (range 0 9)))
		(for/list ([i relavent-indices]) (list-ref variants i))
	]
 )
)
;; ================================================================================

