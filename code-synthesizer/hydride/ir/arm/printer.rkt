;#============================== Hydride File =================================
;#
;# Part of the Hydride Compiler Infrastructure.
;# <Placeholder for license information>
;#
;#=============================================================================
;#
;# Do NOT modify this file. It is automatically generated.
;#
;#=============================================================================

#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require rosette/lib/destruct)

(require hydride/utils/bvops)
(require hydride/utils/misc)

(require hydride/ir/hydride/definition)


(require hydride/ir/arm/definition)
(require hydride/ir/arm/length)
(require hydride/ir/arm/prec)


(provide (all-defined-out))
;; ================================================================================
;;                                DSL Custom Printer
;; ================================================================================
(define (arm:hydride-printer  prog)
 (destruct prog
	[(dim-x id) (string-append "\n"  "(dim-x " (~s id) ")")]
	[(dim-y id) (string-append "\n" "(dim-y " (~s id) ")")]
	[(idx-i id) (string-append "\n" "(idx-i " (~s id) ")")]
	[(idx-j id) (string-append "\n" "(idx-j " (~s id) ")")]
	[(reg id) (string-append  "\n" "(reg " (~s  (bitvector->natural id)) ")")]
	[(lit v) (string-append   "(lit " (~s v) ")")]
	[(nop v1) (string-append "\n" "(nop " (arm:hydride-printer v1) ")")]
	[(idx-add i1 i2) (string-append "\n" "(idx-add " (~s i1) (~s i2) ")" )]
	[(idx-mul i1 i2) (string-append "\n" "(idx-mul " (~s i1) (~s i2) ")" )]
	[(vector-two-input-swizzle_dsl v0 v1 num_2 prec_i_o num_4 num_5 num_6 num_7 num_8) 
	(string-append "\n" 
	(string-append "(vector-two-input-swizzle_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vectors_dsl v0 v1 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vectors_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
	[(deinterleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(deinterleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
	[(llvm_shuffle_vectors_dsl v0 v1 num_2 prec_i_o v4 num_5) 
	(string-append "\n" 
	(string-append "(llvm_shuffle_vectors_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v4 (vector 0)) (arm:get-prec v4 (vector 0))) (/ (arm:get-prec v4 (vector 0))) )] [else (values (/ (arm:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vraddhn_s32_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_o num_8 num_9 num_10 prec_i num_12) 
	(string-append "\n" 
	(string-append "(vraddhn_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmla_n_s32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmla_n_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vshl_s8_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vshl_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsubw_high_u8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vsubw_high_u8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmull_n_u16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i num_7 prec_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmull_n_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlsl_high_n_s32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlsl_high_n_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlaq_n_u16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmlaq_n_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vaddl_high_s16_dsl v0 v1 size_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vaddl_high_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) 64) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqsub_u8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vqsub_u8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vpminq_s32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 num_14 prec_i num_16) 
	(string-append "\n" 
	(string-append "(vpminq_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmull_n_s16_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i num_8 prec_o num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vqdmull_n_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vuqaddq_s8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vuqaddq_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vcgtzq_s64_dsl vc_0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(vcgtzq_s64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vrshlq_s8_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vrshlq_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmulhq_n_s32_dsl vc_0 vc_1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vqdmulhq_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v4 (vector 0)) (arm:get-prec v4 (vector 0))) (/ (arm:get-prec v4 (vector 0))) )] [else (values (/ (arm:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqabs_s8_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7) 
	(string-append "\n" 
	(string-append "(vqabs_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmovn_u64_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6) 
	(string-append "\n" 
	(string-append "(vmovn_u64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vabd_u16_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vabd_u16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlals_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i prec_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlals_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmul_n_s32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(vmul_n_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsubl_s8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vsubl_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vshll_high_n_u8_dsl v0 v1 size_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vshll_high_n_u8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) 64) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmvnq_s8_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o) 
	(string-append "\n" 
	(string-append "(vmvnq_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsraq_n_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vsraq_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmull_high_n_s32_dsl vc_0 v1 v2 size_o num_4 num_5 num_6 prec_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vqdmull_high_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) 64) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) 64) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsubhn_s32_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_o num_8 num_9 num_10 prec_i num_12) 
	(string-append "\n" 
	(string-append "(vsubhn_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vclt_u32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vclt_u32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqmovn_s32_dsl v0 size_i_o num_2 num_3 num_4 prec_o num_6 num_7 prec_i num_9) 
	(string-append "\n" 
	(string-append "(vqmovn_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqshlq_s64_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vqshlq_s64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vceqzq_s64_dsl v0 vc_1 vc_2 vc_3 size_i_o num_5 num_6 num_7 prec_i_o num_9) 
	(string-append "\n" 
	(string-append "(vceqzq_s64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_3 (vector 0)) (arm:get-prec vc_3 (vector 0))) (/ (arm:get-prec vc_3 (vector 0))) )] [else (values (/ (arm:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlal_s32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlal_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlsl_high_n_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlsl_high_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vabdl_high_s8_dsl vc_0 v1 v2 size_o num_4 num_5 num_6 prec_o num_8 num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(vabdl_high_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) 64) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) 64) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmovq_n_u8_dsl v0 size_o num_2 num_3 num_4 prec_o) 
	(string-append "\n" 
	(string-append "(vmovq_n_u8_dsl " (if (lit? v0) (arm:hydride-printer v0) (arm:hydride-printer v0)) " " " " (if (lit? size_o) (arm:hydride-printer size_o) (arm:hydride-printer size_o)) " " " " (if (lit? num_2) (arm:hydride-printer num_2) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (arm:hydride-printer num_3) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (arm:hydride-printer num_4) (arm:hydride-printer num_4)) " " " " (if (lit? prec_o) (arm:hydride-printer prec_o) (arm:hydride-printer prec_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vrhaddq_s8_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vrhaddq_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vtst_s8_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o) 
	(string-append "\n" 
	(string-append "(vtst_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmovl_high_u16_dsl vc_0 v1 size_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vmovl_high_u16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) 64) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlal_high_n_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlal_high_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmls_n_s16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmls_n_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vcgt_u16_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vcgt_u16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsub_s64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(vsub_s64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vceq_s8_dsl v0 vc_1 v2 vc_3 size_i_o num_5 num_6 num_7 prec_i_o) 
	(string-append "\n" 
	(string-append "(vceq_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_3 (vector 0)) (arm:get-prec vc_3 (vector 0))) (/ (arm:get-prec vc_3 (vector 0))) )] [else (values (/ (arm:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlaq_s32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmlaq_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmull_high_s32_dsl vc_0 v1 v2 size_o num_4 num_5 num_6 prec_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vqdmull_high_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) 64) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) 64) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vabdl_s8_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(vabdl_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlsl_n_s32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i num_8 prec_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlsl_n_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlsl_high_u32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlsl_high_u32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vrsra_n_s8_dsl vc_0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(vrsra_n_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v4 (vector 0)) (arm:get-prec v4 (vector 0))) (/ (arm:get-prec v4 (vector 0))) )] [else (values (/ (arm:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vadd_u64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(vadd_u64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmull_n_s32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i num_7 prec_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmull_n_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vhadd_u8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vhadd_u8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vaddw_high_s32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vaddw_high_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vtrn1_u16_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(vtrn1_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vrshl_s32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i prec_o num_10 num_11 num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(vrshl_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmull_u32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmull_u32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsra_n_u8_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vsra_n_u8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmull_s32_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vqdmull_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmaxq_u16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vmaxq_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vshll_n_u16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vshll_n_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vzip1_s32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vzip1_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vcgeq_u32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vcgeq_u32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlal_high_n_s16_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlal_high_n_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqneg_s32_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7) 
	(string-append "\n" 
	(string-append "(vqneg_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlsl_n_s16_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i num_9 prec_o num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlsl_n_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmulq_u8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(vmulq_u8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vtrn2_s32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16) 
	(string-append "\n" 
	(string-append "(vtrn2_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vcltz_s32_dsl vc_0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(vcltz_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlsl_high_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlsl_high_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmulh_s16_dsl vc_0 vc_1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vqdmulh_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v4 (vector 0)) (arm:get-prec v4 (vector 0))) (/ (arm:get-prec v4 (vector 0))) )] [else (values (/ (arm:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlsl_high_n_s16_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlsl_high_n_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlsl_high_n_s16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlsl_high_n_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vpaddq_u64_dsl vc_0 v1 v2 size_i prec_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vpaddq_u64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i (vector 0)) (arm:get-prec size_i (vector 0))) (/ (arm:get-prec size_i (vector 0))) )] [else (values (/ (arm:get-length size_i (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmull_high_n_s16_dsl v0 v1 size_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmull_high_n_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) 64) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqrshlq_s16_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i prec_o num_10 num_11 num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(vqrshlq_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlal_n_u32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i num_8 prec_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlal_n_u32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlsq_u16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmlsq_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqshl_u8_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vqshl_u8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vuzp2_s16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(vuzp2_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vclezq_s8_dsl vc_0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(vclezq_s8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqrshl_u8_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vqrshl_u8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vhsubq_u16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vhsubq_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlal_n_s16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i num_8 prec_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlal_n_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vuzp1_u16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(vuzp1_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmulhq_n_s16_dsl vc_0 vc_1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vqdmulhq_n_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v4 (vector 0)) (arm:get-prec v4 (vector 0))) (/ (arm:get-prec v4 (vector 0))) )] [else (values (/ (arm:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vshl_u16_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vshl_u16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vabs_s32_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7) 
	(string-append "\n" 
	(string-append "(vabs_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vaddl_u8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vaddl_u8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmull_high_n_s16_dsl vc_0 v1 v2 size_o num_4 num_5 num_6 prec_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vqdmull_high_n_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) 64) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) 64) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vneg_s8_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7) 
	(string-append "\n" 
	(string-append "(vneg_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_2 (vector 0)) (arm:get-prec num_2 (vector 0))) (/ (arm:get-prec num_2 (vector 0))) )] [else (values (/ (arm:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlsls_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i prec_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlsls_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmull_high_n_u32_dsl v0 v1 size_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmull_high_n_u32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) 64) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vpmax_u32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 num_14 prec_i num_16) 
	(string-append "\n" 
	(string-append "(vpmax_u32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmull_n_s32_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i num_8 prec_o num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vqdmull_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsubw_s8_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vsubw_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vrsra_n_u8_dsl vc_0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(vrsra_n_u8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v4 (vector 0)) (arm:get-prec v4 (vector 0))) (/ (arm:get-prec v4 (vector 0))) )] [else (values (/ (arm:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vcle_s64_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vcle_s64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vsubl_high_s16_dsl v0 v1 size_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vsubl_high_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) 64) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqadd_u64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vqadd_u64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlal_n_s16_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i num_9 prec_o num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlal_n_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlsl_n_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i num_9 prec_o num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlsl_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlsl_n_u16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i num_8 prec_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlsl_n_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vminq_u16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vminq_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlsl_u16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlsl_u16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vcgez_s16_dsl vc_0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(vcgez_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_1 (vector 0)) (arm:get-prec vc_1 (vector 0))) (/ (arm:get-prec vc_1 (vector 0))) )] [else (values (/ (arm:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_2 (vector 0)) (arm:get-prec vc_2 (vector 0))) (/ (arm:get-prec vc_2 (vector 0))) )] [else (values (/ (arm:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmulq_n_s16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(vmulq_n_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlal_high_s8_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlal_high_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlal_n_s32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i num_9 prec_o num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlal_n_s32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqdmlal_high_s16_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(vqdmlal_high_s16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v3 (vector 0)) (arm:get-prec v3 (vector 0))) (/ (arm:get-prec v3 (vector 0))) )] [else (values (/ (arm:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmull_high_u8_dsl v0 v1 size_o num_3 num_4 num_5 prec_o num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmull_high_u8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) 64) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) 64) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_o (vector 0)) 64) 1)  (values  (/ (arm:get-length size_o (vector 0)) (arm:get-prec size_o (vector 0))) (/ (arm:get-prec size_o (vector 0))) )] [else (values (/ (arm:get-length size_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) 64) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) 64) 64)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) 64) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) 64) 64)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmls_n_s32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(vmls_n_s32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vaddw_s16_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(vaddw_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlal_high_n_u32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlal_high_n_u32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmovl_u16_dsl vc_0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(vmovl_u16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length vc_0 (vector 0)) (arm:get-prec vc_0 (vector 0))) (/ (arm:get-prec vc_0 (vector 0))) )] [else (values (/ (arm:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_i (vector 0)) (arm:get-prec prec_i (vector 0))) (/ (arm:get-prec prec_i (vector 0))) )] [else (values (/ (arm:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (arm:get-length prec_o (vector 0)) (arm:get-prec prec_o (vector 0))) (/ (arm:get-prec prec_o (vector 0))) )] [else (values (/ (arm:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vzip2_s8_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19) 
	(string-append "\n" 
	(string-append "(vzip2_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_14 (vector 0)) (arm:get-prec num_14 (vector 0))) (/ (arm:get-prec num_14 (vector 0))) )] [else (values (/ (arm:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_15 (vector 0)) (arm:get-prec num_15 (vector 0))) (/ (arm:get-prec num_15 (vector 0))) )] [else (values (/ (arm:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_16 (vector 0)) (arm:get-prec num_16 (vector 0))) (/ (arm:get-prec num_16 (vector 0))) )] [else (values (/ (arm:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_17 (vector 0)) (arm:get-prec num_17 (vector 0))) (/ (arm:get-prec num_17 (vector 0))) )] [else (values (/ (arm:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_18 (vector 0)) (arm:get-prec num_18 (vector 0))) (/ (arm:get-prec num_18 (vector 0))) )] [else (values (/ (arm:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_19 (vector 0)) (arm:get-prec num_19 (vector 0))) (/ (arm:get-prec num_19 (vector 0))) )] [else (values (/ (arm:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_19)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vqshlb_n_s8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(vqshlb_n_s8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_3 (vector 0)) (arm:get-prec num_3 (vector 0))) (/ (arm:get-prec num_3 (vector 0))) )] [else (values (/ (arm:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_7 (vector 0)) (arm:get-prec num_7 (vector 0))) (/ (arm:get-prec num_7 (vector 0))) )] [else (values (/ (arm:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
[(vmlal_high_n_s16_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(vmlal_high_n_s16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v0 (vector 0)) (arm:get-prec v0 (vector 0))) (/ (arm:get-prec v0 (vector 0))) )] [else (values (/ (arm:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v1 (vector 0)) (arm:get-prec v1 (vector 0))) (/ (arm:get-prec v1 (vector 0))) )] [else (values (/ (arm:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length v2 (vector 0)) (arm:get-prec v2 (vector 0))) (/ (arm:get-prec v2 (vector 0))) )] [else (values (/ (arm:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length size_i_o (vector 0)) (arm:get-prec size_i_o (vector 0))) (/ (arm:get-prec size_i_o (vector 0))) )] [else (values (/ (arm:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_4 (vector 0)) (arm:get-prec num_4 (vector 0))) (/ (arm:get-prec num_4 (vector 0))) )] [else (values (/ (arm:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_5 (vector 0)) (arm:get-prec num_5 (vector 0))) (/ (arm:get-prec num_5 (vector 0))) )] [else (values (/ (arm:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_6 (vector 0)) (arm:get-prec num_6 (vector 0))) (/ (arm:get-prec num_6 (vector 0))) )] [else (values (/ (arm:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length prec_i_o (vector 0)) (arm:get-prec prec_i_o (vector 0))) (/ (arm:get-prec prec_i_o (vector 0))) )] [else (values (/ (arm:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_8 (vector 0)) (arm:get-prec num_8 (vector 0))) (/ (arm:get-prec num_8 (vector 0))) )] [else (values (/ (arm:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_9 (vector 0)) (arm:get-prec num_9 (vector 0))) (/ (arm:get-prec num_9 (vector 0))) )] [else (values (/ (arm:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_10 (vector 0)) (arm:get-prec num_10 (vector 0))) (/ (arm:get-prec num_10 (vector 0))) )] [else (values (/ (arm:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_11 (vector 0)) (arm:get-prec num_11 (vector 0))) (/ (arm:get-prec num_11 (vector 0))) )] [else (values (/ (arm:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_12 (vector 0)) (arm:get-prec num_12 (vector 0))) (/ (arm:get-prec num_12 (vector 0))) )] [else (values (/ (arm:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (arm:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (arm:get-length num_13 (vector 0)) (arm:get-prec num_13 (vector 0))) (/ (arm:get-prec num_13 (vector 0))) )] [else (values (/ (arm:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (arm:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (arm:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (arm:get-length prog (vector 0)) (arm:get-prec prog (vector 0))) ) " x " "i" (~s (arm:get-prec prog (vector 0))) ">") "\n")]
	[v (~s v)]
 )
)
;; ================================================================================

