#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require racket/pretty)
(require data/bit-vector)
(require rosette/lib/destruct)
(require rosette/solver/smt/boolector)

(require hydride/utils/bvops)
(require hydride/utils/misc)

(require hydride/ir/hydride/definition)
(require hydride/ir/hydride/length)
(require hydride/ir/hydride/prec)


(provide (all-defined-out))




;; ================================================================================
;;                                DSL Custom Printer
;; ================================================================================
(define (hydride:hydride-printer  prog)
 (destruct prog
	[(dim-x id) (string-append "\n"  "(dim-x " (~s id) ")")]
	[(dim-y id) (string-append "\n" "(dim-y " (~s id) ")")]
	[(idx-i id) (string-append "\n" "(idx-i " (~s id) ")")]
	[(idx-j id) (string-append "\n" "(idx-j " (~s id) ")")]
	[(reg id) (string-append  "\n" "(reg " (~s  (bitvector->natural id)) ")")]
	[(lit v) (string-append   "(lit " (~s v) ")")]
	[(nop v1) (string-append "\n" "(nop " (hydride:hydride-printer v1) ")")]
	[(idx-add i1 i2) (string-append "\n" "(idx-add " (~s i1) (~s i2) ")" )]
	[(idx-mul i1 i2) (string-append "\n" "(idx-mul " (~s i1) (~s i2) ")" )]
	[(vector-two-input-swizzle_dsl v0 v1 num_2 prec_i_o num_4 num_5 num_6 num_7 num_8) 
	(string-append "\n" 
	(string-append "(vector-two-input-swizzle_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vectors_dsl v0 v1 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vectors_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[(interleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(interleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[(deinterleave-vector_dsl v0 size_i_o prec_i_o) 
	(string-append "\n" 
	(string-append "(deinterleave-vector_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]

[(llvm-vect-add_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-add_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-sub_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-sub_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-mul_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-mul_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-sdiv_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-sdiv_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[(llvm-vect-udiv_dsl v0 v1 num_2 prec_i_o) 
	(string-append "\n" 
	(string-append "(llvm-vect-udiv_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_rem_epu32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm512_rem_epu32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_or_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(_mm512_or_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_min_epi8_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm256_mask_min_epi8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_xor_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(_mm256_xor_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_add_si64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(_mm_add_si64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_m_packssdw_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_o num_10 num_11 num_12 num_13 prec_i num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_m_packssdw_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_packus_epi32_dsl v0 vc_1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 num_10 num_11 num_12 size_i_o num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_packus_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_24 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_24 (vector 0)) (hydride:get-prec num_24 (vector 0))) (/ (hydride:get-prec num_24 (vector 0))) )] [else (values (/ (hydride:get-length num_24 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_24)) " " " " (if (lit? num_25) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_25 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_25 (vector 0)) (hydride:get-prec num_25 (vector 0))) (/ (hydride:get-prec num_25 (vector 0))) )] [else (values (/ (hydride:get-length num_25 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_25) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_25)) " " " " (if (lit? num_26) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_26 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_26 (vector 0)) (hydride:get-prec num_26 (vector 0))) (/ (hydride:get-prec num_26 (vector 0))) )] [else (values (/ (hydride:get-length num_26 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_26) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_26)) " " " " (if (lit? num_27) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_27 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_27 (vector 0)) (hydride:get-prec num_27 (vector 0))) (/ (hydride:get-prec num_27 (vector 0))) )] [else (values (/ (hydride:get-length num_27 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_27) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_27)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_xor_si256_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm256_xor_si256_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_rolv_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(_mm_rolv_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_maskz_srl_epi32_dsl v0 v1 vc_2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm_maskz_srl_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_avg_epu16_dsl v0 vc_1 vc_2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15 num_16) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_avg_epu16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_rolv_epi32_dsl v0 vc_1 vc_2 vc_3 v4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(_mm512_mask_rolv_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_hadd_pi16_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm_hadd_pi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_extracti64x4_epi64_dsl vc_0 vc_1 v2 v3 size_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm512_extracti64x4_epi64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_o (vector 0)) (hydride:get-prec size_o (vector 0))) (/ (hydride:get-prec size_o (vector 0))) )] [else (values (/ (hydride:get-length size_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_unpacklo_epi64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm512_unpacklo_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_cvtepi64_epi32_dsl v0 size_i_o num_2 num_3 num_4 prec_o prec_i num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm256_cvtepi64_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_max_epu64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm256_max_epu64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_broadcastmb_epi64_dsl v0 size_o num_2 num_3 num_4 prec_i prec_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(_mm_broadcastmb_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_o (vector 0)) (hydride:get-prec size_o (vector 0))) (/ (hydride:get-prec size_o (vector 0))) )] [else (values (/ (hydride:get-length size_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_unpacklo_pi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(_mm_unpacklo_pi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_srav_epi16_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 prec_i_o num_14 num_15) 
	(string-append "\n" 
	(string-append "(_mm512_srav_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_unpacklo_pi8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(_mm_unpacklo_pi8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_mul_epu32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm_mask_mul_epu32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mul_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm256_mul_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_testn_epi32_mask_dsl vc_0 v1 vc_2 vc_3 vc_4 v5 vc_6 v7 size_i_o num_9 num_10 num_11 prec_o num_13 prec_i num_15 num_16) 
	(string-append "\n" 
	(string-append "(_mm256_mask_testn_epi32_mask_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? vc_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_6 (vector 0)) (hydride:get-prec vc_6 (vector 0))) (/ (hydride:get-prec vc_6 (vector 0))) )] [else (values (/ (hydride:get-length vc_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_6)) " " " " (if (lit? v7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v7 (vector 0)) (hydride:get-prec v7 (vector 0))) (/ (hydride:get-prec v7 (vector 0))) )] [else (values (/ (hydride:get-length v7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v7)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_rorv_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(_mm_rorv_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mulhi_epu16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm512_mulhi_epu16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mul_su32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i prec_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm_mul_su32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_broadcast_i32x2_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm_broadcast_i32x2_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_ror_epi32_dsl vc_0 v1 vc_2 vc_3 v4 v5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm_mask_ror_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_rol_epi32_dsl vc_0 v1 v2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm_mask_rol_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_hadd_pi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm_hadd_pi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_cmpeq_epu8_mask_dsl v0 vc_1 v2 v3 vc_4 vc_5 vc_6 size_i_o num_8 num_9 num_10 prec_o num_12 prec_i num_14 num_15) 
	(string-append "\n" 
	(string-append "(_mm256_mask_cmpeq_epu8_mask_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? vc_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_6 (vector 0)) (hydride:get-prec vc_6 (vector 0))) (/ (hydride:get-prec vc_6 (vector 0))) )] [else (values (/ (hydride:get-length vc_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_movemask_epi8_dsl v0 size_o num_2 num_3 num_4 prec_o num_6 num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm_movemask_epi8_dsl " (if (lit? v0) (hydride:hydride-printer v0) (hydride:hydride-printer v0)) " " " " (if (lit? size_o) (hydride:hydride-printer size_o) (hydride:hydride-printer size_o)) " " " " (if (lit? num_2) (hydride:hydride-printer num_2) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (hydride:hydride-printer num_3) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (hydride:hydride-printer num_4) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_o) (hydride:hydride-printer prec_o) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_6) (hydride:hydride-printer num_6) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (hydride:hydride-printer num_7) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (hydride:hydride-printer num_8) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_sll_epi64_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm512_sll_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_sign_pi16_dsl vc_0 v1 vc_2 vc_3 v4 size_i_o num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm_sign_pi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_sll_epi64_dsl v0 v1 vc_2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19) 
	(string-append "\n" 
	(string-append "(_mm512_mask_sll_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_add_pi8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm_add_pi8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_srav_epi32_dsl v0 v1 vc_2 vc_3 vc_4 v5 vc_6 vc_7 v8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 prec_i_o num_19 num_20) 
	(string-append "\n" 
	(string-append "(_mm512_mask_srav_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? vc_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_6 (vector 0)) (hydride:get-prec vc_6 (vector 0))) (/ (hydride:get-prec vc_6 (vector 0))) )] [else (values (/ (hydride:get-length vc_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_6)) " " " " (if (lit? vc_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_7 (vector 0)) (hydride:get-prec vc_7 (vector 0))) (/ (hydride:get-prec vc_7 (vector 0))) )] [else (values (/ (hydride:get-length vc_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_7)) " " " " (if (lit? v8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v8 (vector 0)) (hydride:get-prec v8 (vector 0))) (/ (hydride:get-prec v8 (vector 0))) )] [else (values (/ (hydride:get-length v8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v8)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_hsub_pi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm_hsub_pi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mulhrs_epi16_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm256_mulhrs_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_madd52hi_epu64_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22) 
	(string-append "\n" 
	(string-append "(_mm256_mask_madd52hi_epu64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_extracti64x4_epi64_dsl v0 vc_1 vc_2 v3 vc_4 v5 v6 num_7 num_8 num_9 num_10 num_11 size_i_o num_13 num_14 num_15 prec_i_o num_17 num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25) 
	(string-append "\n" 
	(string-append "(_mm512_mask_extracti64x4_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_24 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_24 (vector 0)) (hydride:get-prec num_24 (vector 0))) (/ (hydride:get-prec num_24 (vector 0))) )] [else (values (/ (hydride:get-length num_24 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_24)) " " " " (if (lit? num_25) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_25 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_25 (vector 0)) (hydride:get-prec num_25 (vector 0))) (/ (hydride:get-prec num_25 (vector 0))) )] [else (values (/ (hydride:get-length num_25 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_25) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_25)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_extracti64x2_epi64_dsl vc_0 v1 vc_2 vc_3 vc_4 v5 size_o num_7 num_8 num_9 prec_i_o num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm512_extracti64x2_epi64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_o (vector 0)) (hydride:get-prec size_o (vector 0))) (/ (hydride:get-prec size_o (vector 0))) )] [else (values (/ (hydride:get-length size_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_sra_epi64_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm512_sra_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_maskz_max_epi32_dsl vc_0 v1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm256_maskz_max_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_abs_epi16_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6) 
	(string-append "\n" 
	(string-append "(_mm_abs_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_unpacklo_epi16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(_mm512_unpacklo_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_fmadd_epi32_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm512_fmadd_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_div_epi64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm_div_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_sllv_epi16_dsl v0 v1 vc_2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 prec_i_o num_17) 
	(string-append "\n" 
	(string-append "(_mm256_mask_sllv_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_abs_epi16_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm256_mask_abs_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_cmpgt_epi16_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10) 
	(string-append "\n" 
	(string-append "(_mm_cmpgt_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_unpackhi_epi16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9 num_10) 
	(string-append "\n" 
	(string-append "(_mm256_unpackhi_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_packs_epi16_dsl vc_0 v1 v2 v3 v4 num_5 num_6 num_7 num_8 num_9 num_10 num_11 num_12 size_i_o num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27) 
	(string-append "\n" 
	(string-append "(_mm_mask_packs_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_24 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_24 (vector 0)) (hydride:get-prec num_24 (vector 0))) (/ (hydride:get-prec num_24 (vector 0))) )] [else (values (/ (hydride:get-length num_24 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_24)) " " " " (if (lit? num_25) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_25 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_25 (vector 0)) (hydride:get-prec num_25 (vector 0))) (/ (hydride:get-prec num_25 (vector 0))) )] [else (values (/ (hydride:get-length num_25 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_25) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_25)) " " " " (if (lit? num_26) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_26 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_26 (vector 0)) (hydride:get-prec num_26 (vector 0))) (/ (hydride:get-prec num_26 (vector 0))) )] [else (values (/ (hydride:get-length num_26 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_26) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_26)) " " " " (if (lit? num_27) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_27 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_27 (vector 0)) (hydride:get-prec num_27 (vector 0))) (/ (hydride:get-prec num_27 (vector 0))) )] [else (values (/ (hydride:get-length num_27 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_27) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_27)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_xor_epi32_dsl v0 vc_1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_xor_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_sra_epi64_dsl vc_0 v1 v2 vc_3 vc_4 v5 vc_6 vc_7 v8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 prec_i_o num_20 num_21 num_22) 
	(string-append "\n" 
	(string-append "(_mm_mask_sra_epi64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? vc_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_6 (vector 0)) (hydride:get-prec vc_6 (vector 0))) (/ (hydride:get-prec vc_6 (vector 0))) )] [else (values (/ (hydride:get-length vc_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_6)) " " " " (if (lit? vc_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_7 (vector 0)) (hydride:get-prec vc_7 (vector 0))) (/ (hydride:get-prec vc_7 (vector 0))) )] [else (values (/ (hydride:get-length vc_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_7)) " " " " (if (lit? v8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v8 (vector 0)) (hydride:get-prec v8 (vector 0))) (/ (hydride:get-prec v8 (vector 0))) )] [else (values (/ (hydride:get-length v8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v8)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_or_epi64_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm_mask_or_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_cmplt_epi32_mask_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_o num_9 prec_i num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm512_cmplt_epi32_mask_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_sllv_epi16_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 prec_i_o num_12) 
	(string-append "\n" 
	(string-append "(_mm512_sllv_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask3_fmadd_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(_mm512_mask3_fmadd_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_unpackhi_epi32_dsl vc_0 v1 v2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22) 
	(string-append "\n" 
	(string-append "(_mm_mask_unpackhi_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_dpbusd_epi32_dsl v0 v1 v2 size_i prec_o num_5 num_6 prec_i num_8 num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm256_dpbusd_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? size_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i (vector 0)) (hydride:get-prec size_i (vector 0))) (/ (hydride:get-prec size_i (vector 0))) )] [else (values (/ (hydride:get-length size_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_avg_epu8_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm_avg_epu8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_maskz_mulhrs_epi16_dsl vc_0 v1 vc_2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19) 
	(string-append "\n" 
	(string-append "(_mm256_maskz_mulhrs_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_hadd_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm256_hadd_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_and_si256_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm256_and_si256_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_cmpeq_epu64_mask_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_o prec_i num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm256_cmpeq_epu64_mask_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_cvtsepi16_epi8_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm512_mask_cvtsepi16_epi8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mulhi_epu32_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 prec_i_o num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm512_mulhi_epu32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_broadcastq_epi64_dsl v0 size_o num_2 num_3 num_4 prec_i_o num_6 num_7) 
	(string-append "\n" 
	(string-append "(_mm512_broadcastq_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_o (vector 0)) (hydride:get-prec size_o (vector 0))) (/ (hydride:get-prec size_o (vector 0))) )] [else (values (/ (hydride:get-length size_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_sub_si64_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(_mm_sub_si64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_extract_epi8_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 num_7 prec_o num_9 prec_i num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm256_extract_epi8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_srai_epi16_dsl vc_0 v1 v2 vc_3 v4 vc_5 vc_6 v7 vc_8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 prec_i_o num_20 num_21 num_22 num_23 num_24) 
	(string-append "\n" 
	(string-append "(_mm_mask_srai_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? vc_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_6 (vector 0)) (hydride:get-prec vc_6 (vector 0))) (/ (hydride:get-prec vc_6 (vector 0))) )] [else (values (/ (hydride:get-length vc_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_6)) " " " " (if (lit? v7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v7 (vector 0)) (hydride:get-prec v7 (vector 0))) (/ (hydride:get-prec v7 (vector 0))) )] [else (values (/ (hydride:get-length v7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v7)) " " " " (if (lit? vc_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_8 (vector 0)) (hydride:get-prec vc_8 (vector 0))) (/ (hydride:get-prec vc_8 (vector 0))) )] [else (values (/ (hydride:get-length vc_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_8)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_24 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_24 (vector 0)) (hydride:get-prec num_24 (vector 0))) (/ (hydride:get-prec num_24 (vector 0))) )] [else (values (/ (hydride:get-length num_24 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_24)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_sra_epi32_dsl v0 vc_1 vc_2 v3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19) 
	(string-append "\n" 
	(string-append "(_mm256_sra_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_m_psrawi_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_m_psrawi_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_packs_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_o num_10 num_11 num_12 num_13 prec_i num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm512_packs_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_rorv_epi32_dsl v0 vc_1 vc_2 vc_3 v4 v5 v6 size_i_o num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(_mm256_mask_rorv_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_srl_epi64_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_srl_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_rem_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm512_mask_rem_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_madd52hi_epu64_dsl v0 v1 v2 size_i_o num_4 num_5 num_6 prec_i prec_o num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm256_madd52hi_epu64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_min_epu16_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm_min_epu16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_andnot_si128_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm_andnot_si128_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_maskz_cvtepi16_epi8_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm256_maskz_cvtepi16_epi8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_test_epi64_mask_dsl vc_0 v1 vc_2 vc_3 v4 size_i_o num_6 num_7 num_8 prec_o prec_i num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm_test_epi64_mask_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_cvtepu8_epi32_dsl v0 size_i_o num_2 num_3 num_4 prec_i prec_o num_7 num_8 num_9) 
	(string-append "\n" 
	(string-append "(_mm512_cvtepu8_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_cmpgt_epu64_mask_dsl v0 vc_1 vc_2 vc_3 vc_4 v5 v6 size_i_o num_8 num_9 num_10 prec_o num_12 num_13 prec_i num_15 num_16) 
	(string-append "\n" 
	(string-append "(_mm256_mask_cmpgt_epu64_mask_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_maskz_unpacklo_epi64_dsl v0 vc_1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23) 
	(string-append "\n" 
	(string-append "(_mm_maskz_unpacklo_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_unpackhi_epi64_dsl vc_0 v1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_unpackhi_epi64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_div_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm512_mask_div_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_maskz_sll_epi32_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm_maskz_sll_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_and_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(_mm512_and_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_dpbusd_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o prec_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20) 
	(string-append "\n" 
	(string-append "(_mm256_mask_dpbusd_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_m_pslld_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16) 
	(string-append "\n" 
	(string-append "(_m_pslld_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_andnot_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7) 
	(string-append "\n" 
	(string-append "(_mm512_andnot_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_mulhi_epu32_dsl v0 vc_1 vc_2 v3 v4 v5 size_i_o num_7 num_8 num_9 prec_i_o num_11 num_12 num_13 num_14 num_15 num_16) 
	(string-append "\n" 
	(string-append "(_mm512_mask_mulhi_epu32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_subs_epi8_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_mm512_subs_epi8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_rol_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(_mm256_rol_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_m_from_int_dsl v0 size_i_o num_2 num_3 num_4 prec_i_o num_6 num_7) 
	(string-append "\n" 
	(string-append "(_m_from_int_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_m_psrld_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16) 
	(string-append "\n" 
	(string-append "(_m_psrld_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_fmadd_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(_mm512_mask_fmadd_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_srli_epi16_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(_mm512_srli_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_cmpneq_epu8_mask_dsl vc_0 v1 vc_2 v3 size_i_o num_5 num_6 num_7 prec_o prec_i num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm512_cmpneq_epu8_mask_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_srlv_epi64_dsl vc_0 v1 v2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 prec_i_o num_17) 
	(string-append "\n" 
	(string-append "(_mm512_mask_srlv_epi64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_mulhi_epi16_dsl vc_0 v1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_mulhi_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_cvtusepi64_epi32_dsl v0 size_i_o num_2 num_3 num_4 prec_o num_6 prec_i num_8 num_9) 
	(string-append "\n" 
	(string-append "(_mm512_cvtusepi64_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_2 (vector 0)) (hydride:get-prec num_2 (vector 0))) (/ (hydride:get-prec num_2 (vector 0))) )] [else (values (/ (hydride:get-length num_2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_2)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_slli_epi16_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(_mm512_slli_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_unpackhi_epi16_dsl vc_0 v1 v2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22) 
	(string-append "\n" 
	(string-append "(_mm256_mask_unpackhi_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_unpacklo_epi16_dsl vc_0 v1 vc_2 v3 v4 num_5 num_6 num_7 num_8 num_9 size_i_o num_11 num_12 num_13 prec_i_o num_15 num_16 num_17 num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_unpacklo_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_maskz_dpwssd_epi32_dsl vc_0 v1 v2 vc_3 v4 v5 size_i_o prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19) 
	(string-append "\n" 
	(string-append "(_mm256_maskz_dpwssd_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_extracti32x4_epi32_dsl v0 vc_1 vc_2 vc_3 vc_4 vc_5 v6 v7 v8 num_9 num_10 num_11 num_12 num_13 size_i_o num_15 num_16 num_17 prec_i_o num_19 num_20 num_21 num_22 num_23 num_24 num_25 num_26 num_27 num_28 num_29 num_30 num_31 num_32) 
	(string-append "\n" 
	(string-append "(_mm512_mask_extracti32x4_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? v7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v7 (vector 0)) (hydride:get-prec v7 (vector 0))) (/ (hydride:get-prec v7 (vector 0))) )] [else (values (/ (hydride:get-length v7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v7)) " " " " (if (lit? v8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v8 (vector 0)) (hydride:get-prec v8 (vector 0))) (/ (hydride:get-prec v8 (vector 0))) )] [else (values (/ (hydride:get-length v8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_24 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_24 (vector 0)) (hydride:get-prec num_24 (vector 0))) (/ (hydride:get-prec num_24 (vector 0))) )] [else (values (/ (hydride:get-length num_24 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_24)) " " " " (if (lit? num_25) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_25 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_25 (vector 0)) (hydride:get-prec num_25 (vector 0))) (/ (hydride:get-prec num_25 (vector 0))) )] [else (values (/ (hydride:get-length num_25 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_25) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_25)) " " " " (if (lit? num_26) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_26 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_26 (vector 0)) (hydride:get-prec num_26 (vector 0))) (/ (hydride:get-prec num_26 (vector 0))) )] [else (values (/ (hydride:get-length num_26 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_26) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_26)) " " " " (if (lit? num_27) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_27 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_27 (vector 0)) (hydride:get-prec num_27 (vector 0))) (/ (hydride:get-prec num_27 (vector 0))) )] [else (values (/ (hydride:get-length num_27 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_27) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_27)) " " " " (if (lit? num_28) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_28 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_28 (vector 0)) (hydride:get-prec num_28 (vector 0))) (/ (hydride:get-prec num_28 (vector 0))) )] [else (values (/ (hydride:get-length num_28 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_28) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_28)) " " " " (if (lit? num_29) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_29 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_29 (vector 0)) (hydride:get-prec num_29 (vector 0))) (/ (hydride:get-prec num_29 (vector 0))) )] [else (values (/ (hydride:get-length num_29 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_29) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_29)) " " " " (if (lit? num_30) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_30 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_30 (vector 0)) (hydride:get-prec num_30 (vector 0))) (/ (hydride:get-prec num_30 (vector 0))) )] [else (values (/ (hydride:get-length num_30 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_30) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_30)) " " " " (if (lit? num_31) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_31 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_31 (vector 0)) (hydride:get-prec num_31 (vector 0))) (/ (hydride:get-prec num_31 (vector 0))) )] [else (values (/ (hydride:get-length num_31 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_31) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_31)) " " " " (if (lit? num_32) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_32 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_32 (vector 0)) (hydride:get-prec num_32 (vector 0))) (/ (hydride:get-prec num_32 (vector 0))) )] [else (values (/ (hydride:get-length num_32 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_32) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_32)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_cvtepi16_epi64_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 prec_i_o num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(_mm512_mask_cvtepi16_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_movepi32_mask_dsl v0 vc_1 vc_2 vc_3 size_o num_5 num_6 num_7 prec_o num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm_movepi32_mask_dsl " (if (lit? v0) (hydride:hydride-printer v0) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (hydride:hydride-printer vc_1) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (hydride:hydride-printer vc_2) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (hydride:hydride-printer vc_3) (hydride:hydride-printer vc_3)) " " " " (if (lit? size_o) (hydride:hydride-printer size_o) (hydride:hydride-printer size_o)) " " " " (if (lit? num_5) (hydride:hydride-printer num_5) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (hydride:hydride-printer num_6) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (hydride:hydride-printer num_7) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_o) (hydride:hydride-printer prec_o) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_9) (hydride:hydride-printer num_9) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (hydride:hydride-printer num_10) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (hydride:hydride-printer num_11) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (hydride:hydride-printer num_12) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_m_por_dsl v0 v1 size_i_o num_3 num_4 num_5 prec_i_o num_7 num_8) 
	(string-append "\n" 
	(string-append "(_m_por_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_m_pcmpeqb_dsl vc_0 v1 v2 vc_3 size_i_o num_5 num_6 num_7 prec_i_o num_9) 
	(string-append "\n" 
	(string-append "(_m_pcmpeqb_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_extract_pi16_dsl vc_0 v1 v2 size_i_o num_4 num_5 num_6 num_7 prec_o num_9 prec_i num_11 num_12 num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm_extract_pi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_broadcast_i64x2_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm256_mask_broadcast_i64x2_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_hsub_epi32_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm256_hsub_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_hsub_epi16_dsl v0 v1 size_i_o num_3 num_4 num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17) 
	(string-append "\n" 
	(string-append "(_mm_hsub_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_3 (vector 0)) (hydride:get-prec num_3 (vector 0))) (/ (hydride:get-prec num_3 (vector 0))) )] [else (values (/ (hydride:get-length num_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_3)) " " " " (if (lit? num_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_4 (vector 0)) (hydride:get-prec num_4 (vector 0))) (/ (hydride:get-prec num_4 (vector 0))) )] [else (values (/ (hydride:get-length num_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_4)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_dpwssd_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o prec_i_o num_7 num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18) 
	(string-append "\n" 
	(string-append "(_mm512_mask_dpwssd_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_ror_epi32_dsl vc_0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13 num_14 num_15) 
	(string-append "\n" 
	(string-append "(_mm256_ror_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_srli_epi32_dsl v0 vc_1 v2 v3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm256_mask_srli_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_broadcastd_epi32_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm_mask_broadcastd_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_maskz_madd52lo_epu64_dsl vc_0 v1 vc_2 v3 v4 v5 size_i_o num_7 num_8 num_9 num_10 num_11 num_12 prec_i_o num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21 num_22 num_23) 
	(string-append "\n" 
	(string-append "(_mm_maskz_madd52lo_epu64_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_blendv_epi8_dsl vc_0 v1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm256_blendv_epi8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_srl_epi64_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 num_11 prec_i_o num_13 num_14) 
	(string-append "\n" 
	(string-append "(_mm512_srl_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_blend_epi16_dsl v0 vc_1 v2 v3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm256_blend_epi16_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_mask_sra_epi32_dsl v0 vc_1 v2 vc_3 vc_4 vc_5 v6 v7 vc_8 size_i_o num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 prec_i_o num_20 num_21 num_22 num_23 num_24) 
	(string-append "\n" 
	(string-append "(_mm_mask_sra_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? v7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v7 (vector 0)) (hydride:get-prec v7 (vector 0))) (/ (hydride:get-prec v7 (vector 0))) )] [else (values (/ (hydride:get-length v7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v7)) " " " " (if (lit? vc_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_8 (vector 0)) (hydride:get-prec vc_8 (vector 0))) (/ (hydride:get-prec vc_8 (vector 0))) )] [else (values (/ (hydride:get-length vc_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_8)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " (if (lit? num_22) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_22 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_22 (vector 0)) (hydride:get-prec num_22 (vector 0))) (/ (hydride:get-prec num_22 (vector 0))) )] [else (values (/ (hydride:get-length num_22 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_22) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_22)) " " " " (if (lit? num_23) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_23 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_23 (vector 0)) (hydride:get-prec num_23 (vector 0))) (/ (hydride:get-prec num_23 (vector 0))) )] [else (values (/ (hydride:get-length num_23 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_23) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_23)) " " " " (if (lit? num_24) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_24 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_24 (vector 0)) (hydride:get-prec num_24 (vector 0))) (/ (hydride:get-prec num_24 (vector 0))) )] [else (values (/ (hydride:get-length num_24 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_24) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_24)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_movm_epi8_dsl v0 vc_1 vc_2 vc_3 size_i_o num_5 num_6 num_7 prec_i_o num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm_movm_epi8_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_maskz_sub_epi8_dsl vc_0 v1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm_maskz_sub_epi8_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_maskz_andnot_epi64_dsl v0 vc_1 vc_2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm512_maskz_andnot_epi64_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm512_mask_add_epi32_dsl vc_0 v1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12 num_13) 
	(string-append "\n" 
	(string-append "(_mm512_mask_add_epi32_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_mask_and_epi32_dsl v0 vc_1 v2 v3 v4 size_i_o num_6 num_7 num_8 prec_i_o num_10 num_11 num_12) 
	(string-append "\n" 
	(string-append "(_mm256_mask_and_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_maskz_slli_epi32_dsl v0 v1 vc_2 vc_3 vc_4 vc_5 v6 size_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 prec_i_o num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm_maskz_slli_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? vc_3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_3 (vector 0)) (hydride:get-prec vc_3 (vector 0))) (/ (hydride:get-prec vc_3 (vector 0))) )] [else (values (/ (hydride:get-length vc_3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_3)) " " " " (if (lit? vc_4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_4 (vector 0)) (hydride:get-prec vc_4 (vector 0))) (/ (hydride:get-prec vc_4 (vector 0))) )] [else (values (/ (hydride:get-length vc_4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_4)) " " " " (if (lit? vc_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_5 (vector 0)) (hydride:get-prec vc_5 (vector 0))) (/ (hydride:get-prec vc_5 (vector 0))) )] [else (values (/ (hydride:get-length vc_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_5)) " " " " (if (lit? v6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v6 (vector 0)) (hydride:get-prec v6 (vector 0))) (/ (hydride:get-prec v6 (vector 0))) )] [else (values (/ (hydride:get-length v6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v6)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm256_maddubs_epi16_dsl vc_0 v1 v2 size_i prec_o num_5 num_6 prec_i num_8 num_9 num_10 num_11) 
	(string-append "\n" 
	(string-append "(_mm256_maddubs_epi16_dsl " (if (lit? vc_0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_0 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length vc_0 (vector 0)) (hydride:get-prec vc_0 (vector 0))) (/ (hydride:get-prec vc_0 (vector 0))) )] [else (values (/ (hydride:get-length vc_0 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer vc_0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_0)) " " " " (if (lit? v1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v1 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v1 (vector 0)) (hydride:get-prec v1 (vector 0))) (/ (hydride:get-prec v1 (vector 0))) )] [else (values (/ (hydride:get-length v1 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v1)) " " " " (if (lit? v2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v2 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length v2 (vector 0)) (hydride:get-prec v2 (vector 0))) (/ (hydride:get-prec v2 (vector 0))) )] [else (values (/ (hydride:get-length v2 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer v2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v2)) " " " " (if (lit? size_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length size_i (vector 0)) (hydride:get-prec size_i (vector 0))) (/ (hydride:get-prec size_i (vector 0))) )] [else (values (/ (hydride:get-length size_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer size_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i)) " " " " (if (lit? prec_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_o (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_o (vector 0)) (hydride:get-prec prec_o (vector 0))) (/ (hydride:get-prec prec_o (vector 0))) )] [else (values (/ (hydride:get-length prec_o (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? prec_i) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length prec_i (vector 0)) (hydride:get-prec prec_i (vector 0))) (/ (hydride:get-prec prec_i (vector 0))) )] [else (values (/ (hydride:get-length prec_i (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer prec_i) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i) prec_i)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_maskz_dpbusds_epi32_dsl v0 vc_1 vc_2 v3 v4 v5 size_i_o prec_i_o num_8 num_9 num_10 num_11 num_12 num_13 num_14 num_15 num_16 num_17 num_18 num_19 num_20 num_21) 
	(string-append "\n" 
	(string-append "(_mm_maskz_dpbusds_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? v4) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v4 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v4 (vector 0)) (hydride:get-prec v4 (vector 0))) (/ (hydride:get-prec v4 (vector 0))) )] [else (values (/ (hydride:get-length v4 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v4) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v4)) " " " " (if (lit? v5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v5 (vector 0)) (hydride:get-prec v5 (vector 0))) (/ (hydride:get-prec v5 (vector 0))) )] [else (values (/ (hydride:get-length v5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v5)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? num_11) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_11 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_11 (vector 0)) (hydride:get-prec num_11 (vector 0))) (/ (hydride:get-prec num_11 (vector 0))) )] [else (values (/ (hydride:get-length num_11 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_11) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_11)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " (if (lit? num_13) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_13 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_13 (vector 0)) (hydride:get-prec num_13 (vector 0))) (/ (hydride:get-prec num_13 (vector 0))) )] [else (values (/ (hydride:get-length num_13 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_13) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_13)) " " " " (if (lit? num_14) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_14 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_14 (vector 0)) (hydride:get-prec num_14 (vector 0))) (/ (hydride:get-prec num_14 (vector 0))) )] [else (values (/ (hydride:get-length num_14 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_14) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_14)) " " " " (if (lit? num_15) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_15 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_15 (vector 0)) (hydride:get-prec num_15 (vector 0))) (/ (hydride:get-prec num_15 (vector 0))) )] [else (values (/ (hydride:get-length num_15 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_15) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_15)) " " " " (if (lit? num_16) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_16 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_16 (vector 0)) (hydride:get-prec num_16 (vector 0))) (/ (hydride:get-prec num_16 (vector 0))) )] [else (values (/ (hydride:get-length num_16 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_16) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_16)) " " " " (if (lit? num_17) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_17 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_17 (vector 0)) (hydride:get-prec num_17 (vector 0))) (/ (hydride:get-prec num_17 (vector 0))) )] [else (values (/ (hydride:get-length num_17 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_17) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_17)) " " " " (if (lit? num_18) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_18 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_18 (vector 0)) (hydride:get-prec num_18 (vector 0))) (/ (hydride:get-prec num_18 (vector 0))) )] [else (values (/ (hydride:get-length num_18 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_18) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_18)) " " " " (if (lit? num_19) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_19 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_19 (vector 0)) (hydride:get-prec num_19 (vector 0))) (/ (hydride:get-prec num_19 (vector 0))) )] [else (values (/ (hydride:get-length num_19 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_19) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_19)) " " " " (if (lit? num_20) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_20 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_20 (vector 0)) (hydride:get-prec num_20 (vector 0))) (/ (hydride:get-prec num_20 (vector 0))) )] [else (values (/ (hydride:get-length num_20 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_20) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_20)) " " " " (if (lit? num_21) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_21 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_21 (vector 0)) (hydride:get-prec num_21 (vector 0))) (/ (hydride:get-prec num_21 (vector 0))) )] [else (values (/ (hydride:get-length num_21 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_21) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_21)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
[(_mm_srlv_epi32_dsl v0 vc_1 vc_2 v3 size_i_o num_5 num_6 num_7 num_8 num_9 num_10 prec_i_o num_12) 
	(string-append "\n" 
	(string-append "(_mm_srlv_epi32_dsl " (if (lit? v0) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v0 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v0 (vector 0)) (hydride:get-prec v0 (vector 0))) (/ (hydride:get-prec v0 (vector 0))) )] [else (values (/ (hydride:get-length v0 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v0) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v0)) " " " " (if (lit? vc_1) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_1 (vector 0)) (hydride:get-prec vc_1 (vector 0))) (/ (hydride:get-prec vc_1 (vector 0))) )] [else (values (/ (hydride:get-length vc_1 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_1) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_1)) " " " " (if (lit? vc_2) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length vc_2 (vector 0)) (hydride:get-prec vc_2 (vector 0))) (/ (hydride:get-prec vc_2 (vector 0))) )] [else (values (/ (hydride:get-length vc_2 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer vc_2) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer vc_2)) " " " " (if (lit? v3) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length v3 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length v3 (vector 0)) (hydride:get-prec v3 (vector 0))) (/ (hydride:get-prec v3 (vector 0))) )] [else (values (/ (hydride:get-length v3 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer v3) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer v3)) " " " " (if (lit? size_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length size_i_o (vector 0)) (hydride:get-prec size_i_o (vector 0))) (/ (hydride:get-prec size_i_o (vector 0))) )] [else (values (/ (hydride:get-length size_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer size_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer size_i_o)) " " " " (if (lit? num_5) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_5 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_5 (vector 0)) (hydride:get-prec num_5 (vector 0))) (/ (hydride:get-prec num_5 (vector 0))) )] [else (values (/ (hydride:get-length num_5 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_5) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_5)) " " " " (if (lit? num_6) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_6 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_6 (vector 0)) (hydride:get-prec num_6 (vector 0))) (/ (hydride:get-prec num_6 (vector 0))) )] [else (values (/ (hydride:get-length num_6 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_6) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_6)) " " " " (if (lit? num_7) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_7 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_7 (vector 0)) (hydride:get-prec num_7 (vector 0))) (/ (hydride:get-prec num_7 (vector 0))) )] [else (values (/ (hydride:get-length num_7 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_7) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_7)) " " " " (if (lit? num_8) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_8 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_8 (vector 0)) (hydride:get-prec num_8 (vector 0))) (/ (hydride:get-prec num_8 (vector 0))) )] [else (values (/ (hydride:get-length num_8 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_8) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_8)) " " " " (if (lit? num_9) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_9 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_9 (vector 0)) (hydride:get-prec num_9 (vector 0))) (/ (hydride:get-prec num_9 (vector 0))) )] [else (values (/ (hydride:get-length num_9 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_9) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_9)) " " " " (if (lit? num_10) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_10 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_10 (vector 0)) (hydride:get-prec num_10 (vector 0))) (/ (hydride:get-prec num_10 (vector 0))) )] [else (values (/ (hydride:get-length num_10 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_10) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_10)) " " " " (if (lit? prec_i_o) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length prec_i_o (vector 0)) (hydride:get-prec prec_i_o (vector 0))) (/ (hydride:get-prec prec_i_o (vector 0))) )] [else (values (/ (hydride:get-length prec_i_o (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer prec_i_o) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer prec_i_o)) " " " " (if (lit? num_12) (begin (define-values (num_elem arg_prec) (cond [(< (/ (hydride:get-length num_12 (vector 0)) prec_i_o) 1)  (values  (/ (hydride:get-length num_12 (vector 0)) (hydride:get-prec num_12 (vector 0))) (/ (hydride:get-prec num_12 (vector 0))) )] [else (values (/ (hydride:get-length num_12 (vector 0)) prec_i_o) prec_i_o)]))(string-append (hydride:hydride-printer num_12) " ; " "<" (~s num_elem) " x i" (~s arg_prec) ">" "\n" )) (hydride:hydride-printer num_12)) " " " " ")")
	(string-append ";" "<" (~s (/ (hydride:get-length prog (vector 0)) (hydride:get-prec prog (vector 0))) ) " x " "i" (~s (hydride:get-prec prog (vector 0))) ">") "\n")]
	[v (~s v)]
 )
)

;; ================================================================================
